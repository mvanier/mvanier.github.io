{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The CS 1 book: Fall 2024","text":"<p>This book is location of the readings for the Caltech CS 1 course  (Introduction to Computer Programming) for the Fall 2024 term.</p> <p>The course instructors are Adam Blank and Mike Vanier. The readings were mostly authored by Mike, with many ideas and suggestions coming from Adam.</p> <p>Please direct all comments about these readings to Mike. In particular, he is very interested in hearing about</p> <ol> <li>Typos and errors.</li> <li>Anything that isn't clear.</li> <li>Suggestions for topics that aren't covered but should be.</li> </ol> <p>Note</p> <p>We like getting feedback! It will help make these readings better for future CS 1 classes, so don't be shy about emailing us if you think something can be explained better.</p>"},{"location":"1/reading1/","title":"Reading 1: Introduction to Python, part 1","text":"<p>I do not fear computers.  I fear the lack of them. - Isaac Asimov</p>"},{"location":"1/reading1/#introduction","title":"Introduction","text":"<p>Welcome to CS 1! We're delighted that you're taking our course. We hope you have a lot of fun and learn a lot in the process.</p> <p>This is the first \"reading\" of the course. The idea behind readings is to serve as the official course notes, so that lectures are less of a brain dump of details and more an opportunity to interactively go through code examples, answer questions, and get you thinking about the programming process. We will try to post the reading(s) corresponding to a lecture at least a day before the lecture. You should ideally have read it (them) before coming to lecture, so you can use class time to ask questions about the material and refine your understanding. We will use the questions you ask in the lecture to improve the readings.</p> <p>Note</p> <p>The readings will roughly correspond to the lecture topics, but it's not an exact equivalence; some topics may be covered more deeply in the readings than in lectures or vice-versa.</p>"},{"location":"1/reading1/#topics","title":"Topics","text":"<p>This reading is a general introduction to programming and Python, followed by a short crash course on the most basic aspects of Python, which will be continued in the next reading.</p>"},{"location":"1/reading1/#your-programming-background","title":"Your programming background","text":"<p>We are very well aware that students in CS 1 come from a very wide variety of backgrounds in terms of knowledge of computer programming. Some of you have never programmed a computer before. That's fine; you're in the right place! Others have done some or perhaps even extensive programming. We will try to make these notes accessible to everyone, and if there is a topic that you are very familiar with, we encourage you to skim (but not to skip) the notes on that topic.</p>"},{"location":"1/reading1/#programming-as-a-thought-process","title":"Programming as a thought process","text":"<p>[This section is for new programmers; experienced programmers can skip to the next section.]</p> <p>The hardest subjects to learn are usually those that force you to think in a different way than you're used to. For instance, when you learn algebra, you have to generalize the arithmetic you've learned (\"ten apples times three equals thirty apples\") to allow for unknown quantities (variables) (\"<code>x</code> apples times <code>y</code> equals <code>xy</code> apples\"). That's a mental leap. When you learn calculus you have to generalize what you know about functions to allow for operations like derivatives that take functions as arguments. And when you learn programming for the first time, you have to learn to \"think like a machine\". This is what we mean when we speak of programming as a thought process. \"Thinking like a machine\" means understanding enough about how the computer works to be able to predict what the result of executing your code is going to be.</p> <p>Thinking like a machine isn't necessarily hard, but it is different. The machine (the computer) works by iron-clad rules of logic, doing many very simple operations at blinding speed. We write programs to tell computers what to do, and the computer will do exactly what we tell it to, no more and no less, whether it makes sense or not. There is no room for error; if you get a single character wrong in your program, it will either do the wrong thing or not run at all. The computer doesn't know or care what you \"meant\" it to do, only what you specifically asked it to do. It is completely literal and completely unforgiving. You should expect to spend a lot of time fixing mistakes in your programs (which are called \"bugs\") to finally get it to do the right thing.</p>  The first bug ever found (1947): a moth trapped in the Mark II computer in Harvard University.  <p>Fortunately, the computer has a number of safeguards which prevent you from doing anything really horrible (so running a program is unlikely to physically destroy the computer itself, for instance); usually, if you make a mistake, it will just complain that something went wrong and halt, or else it'll just not do what you wanted it to.</p> <p>Learning to understand the very logical, very exact, very literal and incredibly picky way a computer works is going to take time. We're not going to lie to you: programming can be incredibly frustrating. But once you finally get it to do what you want, it's incredibly satisfying, and with experience, the less frustrating it gets and the more satisfying it is. (But the frustration never goes away entirely!) We will be trying to help you learn to \"think like a machine\" all through this course. Often, we will not give you the whole story about what is happening when we first introduce a topic, because to do that would take too long and be tedious. But as we visit and revisit topics, we will fill in more and more of the gaps so that eventually you'll have a very good idea of what happens when your programs execute. (To get a really deep understanding of all this, though, you'll have to take more courses than just CS 1!) Don't worry; it's going to be fun!</p>"},{"location":"1/reading1/#program-design-as-a-thought-process","title":"Program design as a thought process","text":"<p>[This section is for beginning and experienced programmers alike.]</p> <p>Even after you internalize the first thought process (thinking like a machine) you have to learn another thought process: how to design programs. You will have to write many functions and programs in this course. You'll be given a pretty precise description of what the function or program is supposed to do, and then you will have to write the code to do it. This is a creative act! There is always going to be more than one way to solve all but the simplest problems, and there is never going to be an objectively \"perfect\" answer. But for many programmers, even ones who understand the workings of a programming language quite well, it can be challenging to put together the elements of the programming language in the right way to solve a problem. We call this activity program design. As a creative act, we can't give exact rules on how to do it, but we can give guidelines, rules of thumb, and general wisdom we've accumulated over our years of programming. Knowing these guidelines and rules of thumb should help you when you have to write a function (or class, or module) but don't know where to start.</p> <p>The details of the programming languages we'll be teaching you (first Python, and then Java) will be in these readings. The thought process behind program design will mainly be covered in lectures, often by simply showing you a problem and walking through the steps needed to solve it. That way, you'll see how experienced programmers think about a problem, and you can apply what you learn to your own programs.</p>"},{"location":"1/reading1/#programming-jargon","title":"Programming jargon","text":"<p>Another challenge for beginning programmers is that programming uses a lot of common words with very specific meanings that aren't the usual meanings. Words like list, dictionary, string, file, function, interpreter and so on mean very different things when used in a programming context than they would mean in everyday conversation. We will try hard to be incredibly clear on what a particular programming term means, especially if that meaning is different from the common meaning. If you find a term we are using confusing, let us know so we can improve these readings!</p>"},{"location":"1/reading1/#the-choice-of-programming-languages","title":"The choice of programming language(s)","text":"<p>We will be using two programming languages in this course: Python and Java. We will use Python for about the first two-thirds of the course, and then switch to Java for the remainder of the course.</p> <p>Note</p> <p>Java is the only language used in CS 2, so it's important that you learn it before taking that course. Java is also well worth knowing in its own right.</p> <p>Python is an excellent first programming language. It's very useful for teaching the basic concepts of programming, and it's also an incredibly useful real-world language. Perhaps most relevant to you, Python has in recent years emerged as one of the most important programming languages in science and data analysis, as well as one of the most-used languages in machine learning and artificial intelligence. Python is easy to learn, incredibly versatile, very readable, and very consistent. You may know some (or a lot!) of Python already, but even in that case we're pretty sure we're going to be teaching you some new things about it.</p> <p></p> <p>We love Python both as a teaching language and as a language we use ourselves, but don't kid yourself: it's not the only good or useful programming language. As we mentioned, near the end of this course (and in CS 2) you will learn Java. if you take CS 3 and/or CS 11, you will learn C, and if you take CS 4 you will learn OCaml. Serious programmers need to know more than one language, so think of this as the start of your programming journey. Programming is a lot of fun, and we hope to show you why we love it so much and why it's so exciting to learn computer science.</p>"},{"location":"1/reading1/#a-brief-history-of-python","title":"A brief history of Python","text":"<p>Computer languages have weird names. Some, like <code>C</code>, are completely arbitrary and meaningless.<sup>1</sup> Others, like <code>Java</code> or <code>Ruby</code>, are named after something (coffee and the gem stone, respectively). <code>Python</code> is named after the British comedy group Monty Python's Flying Circus. It was invented in the late 1980s by Guido van Rossum, a Dutch programmer who wanted a language that was easier to use than C for everyday tasks. Guido was also a fan of the comedy group, so he named his language after them as an homage.</p> <p>Python has been under continual development ever since it was created, and the latest version of Python available as of this writing is Python 3.12.4. Python is now one of the most popular programming languages in use today.</p> <p>The Python home page is at https://www.python.org. (You should bookmark it, because the online Python documentation is hosted there, and you will definitely need that for this course.)</p>"},{"location":"1/reading1/#code-examples","title":"Code examples","text":"<p>In the supporting documents we will be going through all the details you need to know in order to get Python working on your computer, which IDE/editor to use<sup>2</sup>, etc. We won't do that in the readings, but instead we'll assume you can run Python code.</p> <p>Note</p> <p>If you can't do that yet, don't worry; you should still be able to understand the code examples. You simply won't be able to run them yourselves yet.</p> <p>However, we strongly recommend that you do get Python set up as soon as possible and follow along with the readings by typing in the examples and playing around with them; you'll learn a lot more that way and it'll be more fun too.</p> <p>Here is a snippet of Python code:</p> <pre><code>print('Hello, world!')\n</code></pre> <p>Believe it or not, this is a complete Python program! When run from a terminal window, it will print the words <code>Hello, world!</code> to the terminal.<sup>3</sup></p> <p>Terminals</p> <p>A terminal (more jargon!) is a program which allows you to directly type commands to your computer and receive textual output back from the computer. Some of you may never have used a terminal, because non-programmers typically have little use for one. Programmers use them all the time, and some of us spend most of our time on the computer working inside a terminal. Terminal programs include Terminal.app and Iterm.app (MacOS), Windows Terminal (Windows), and many different programs for Linux. You can run Python programs directly from a terminal, and we'll show you lots of examples of this.</p> <p>We will get into the details of Python below, but just so you aren't confused: the words <code>'Hello, world!'</code> in single quotes are a Python string (which is the way textual data is represented inside Python). The word <code>print</code> stands for a built-in Python function which takes a single argument (in this case the string <code>'Hello, world!'</code>) and prints it out to the terminal.<sup>4</sup> We'll talk more about functions in the next reading, and we'll cover strings in detail after that.</p> <p>The colors in the Python code snippet have nothing to do with the Python language; they are what is called \"syntax coloring\". Its purpose is just to make the code a bit more readable by highlighting different parts of the code in different ways. (They don't affect the meaning of the code at all.)</p>"},{"location":"1/reading1/#source-code-files-vs-the-interactive-interpreter","title":"Source code files vs. the interactive interpreter","text":"<p>In this course, we will be working with Python in two distinct ways:</p> <ul> <li> <p>interactively, using the Python \"interactive interpreter\"</p> </li> <li> <p>running Python on text files containing Python code</p> </li> </ul> <p>When we are giving lectures, we'll be using Python in both ways, and you will do the same when writing your assignments. You will also be running \"test suites\" which will rigorously test your code, but if something doesn't work, you'll have to run the code yourself one of these ways to figure out why!</p> <p>Note</p> <p>Don't worry, we'll show you how to debug your code when the time comes.</p>"},{"location":"1/reading1/#source-code-files","title":"Source code files","text":"<p>Python code that you write (using an editor) is called source code. The \"source\" word implies that this is the first thing that is created in order to make a program. (Files are just data that is stored on a computer permanently i.e. it doesn't disappear when the computer is turned off). Python source code files are plain text files with a specific suffix, which is <code>.py</code>. Usually, the name of a source code file is in all lowercase letters; for instance, you might have one called <code>lab1.py</code> or <code>sudoku.py</code>.</p> <p>Let's say we've written a file of Python code called <code>hello.py</code> which contains the following code:</p> <pre><code>print('Hello, world!')\n</code></pre> <p>We can run this file by typing the following command at a terminal command line:</p> <pre><code>$ python hello.py\n</code></pre> <p>The <code>$</code> is called a prompt; you don't type it.</p> <p>Prompts</p> <p>Your prompt may look different from this. It doesn't matter. The purpose of the prompt is to highlight where on the terminal the commands you type are going to be displayed.</p> <p>Inside a terminal there is a program called a shell which is running. The shell is the program which interprets commands like this. (Most people think of the terminal and the shell as one combined entity, but they are actually separate; a shell runs inside of a terminal.)</p> <p>The shell prompt (the <code>$</code> above) is printed automatically when the shell is waiting for more input. Then you type in the words <code>python hello.py</code> and hit the return key<sup>5</sup>. What this does is run the <code>python</code> program (which is the program that runs Python language files) on the file called <code>hello.py</code>.</p> <p>If all goes well, the terminal should print out:</p> <pre><code>Hello, world!\n</code></pre> <p>and return you to the prompt.</p> <p>Note</p> <p>This assumes your computer is running either Linux or Mac OS X as its operating system. If it's running Windows, you can get to a terminal prompt like this by installing the Windows Subsystem for Linux, but don't worry about this now; there are other ways to run Python programs. The important thing to understand is that you can run all the Python code in a single file with a single command.</p> <p>Python programs can be split between multiple files; such files are usually called \"modules\". We will talk more about modules in a future reading.</p>"},{"location":"1/reading1/#the-python-interpreter","title":"The Python interpreter","text":"<p>It's also possible to enter all the code for a program on-the-fly by starting up the Python interpreter. An interpreter or interactive interpreter is a program which reads lines of code you type and immediately runs them.<sup>6</sup> Python can work as an interpreter if you type the word <code>python</code> into a terminal, followed by typing the return key:</p> <p></p> <p>This will cause the interactive Python interpreter to start up. First, a banner message is printed, which identifies the Python version as well as some other information. Then the Python prompt is displayed. It looks like this:</p> <pre><code>&gt;&gt;&gt;\n</code></pre> <p>The three <code>&gt;</code>s are the Python prompt. It's how Python tells you it's waiting for you to type a line of code for it to execute. (Don't confuse the Python prompt with the shell prompt! the Python prompt is only used to enter Python language statements, not to invoke arbitrary programs.)</p> <p>Now you can enter expressions at the prompt:</p> <pre><code>&gt;&gt;&gt; 1 + 1\n</code></pre> <p>Hit the return key, and Python will helpfully print out</p> <pre><code>2\n</code></pre> <p>and print out the prompt again. If you want to exit the interpreter, type \"control d\" i.e. hold down the \"control\" key on your keyboard while typing the letter <code>d</code> (lowercase). This will exit the interpreter and return you to the shell prompt. Typing <code>exit()</code> or <code>quit()</code> at the prompt followed by the return key  will also exit the interpreter.</p> <p>It's important to understand that the <code>&gt;&gt;&gt;</code> prompt is not part of the Python language; it's just the way that the interactive Python interpreter lets you know that it is waiting for you to enter some code.</p> <p>There is more to say about the interactive interpreter; we will cover it as we get to it.</p>"},{"location":"1/reading1/#python-as-a-calculator","title":"Python as a calculator","text":""},{"location":"1/reading1/#arithmetic-expressions","title":"Arithmetic expressions","text":"<p>One thing that is easy to do with Python is to use it as a kind of terminal-based calculator program. You do this by starting the interactive interpreter and entering arithmetic expressions:</p> <pre><code>&gt;&gt;&gt; 2 + 2\n4\n&gt;&gt;&gt; 1.2 * 3.4\n4.08\n&gt;&gt;&gt; 2 ** 16\n65536\n&gt;&gt;&gt; (4 - 2) * (3 + 3)\n12\n&gt;&gt;&gt; 1/6\n0.16666666666666666\n</code></pre> <p>and so on. Note that some common operations use different operators than is customary in math:</p> Operator symbol Meaning in Python <code>*</code> multiplication <code>/</code> division <code>**</code> to the power of <p>This is done because common symbols like the \"times\" symbol (\\(\\times\\)) and the \"divide\" symbol (\\(\\div\\)) can't be typed on a standard keyboard. (Most programming languages use <code>*</code> and <code>/</code> for multiplication and division.) Traditional math notation uses superscripts for powers, which is also not easily typeable, so Python uses <code>**</code>. For instance, <code>2 ** 16</code> means \\(2^{16}\\).</p>"},{"location":"1/reading1/#numbers","title":"Numbers","text":"<p>Numbers in Python can be \"integers\" (no fractional part) or \"floating point\" (approximate real numbers). Floating point numbers are a computer approximation to real numbers. Some real numbers (like \\(\\pi\\) or \\(e\\)) need an infinite number of decimal places to represent them exactly. Computers don't have infinite storage, so the number is cut off after a certain number of decimal places, and we call this kind of number a \"floating point\" number (or \"float\" for short).</p> <pre><code>&gt;&gt;&gt; 42\n42\n&gt;&gt;&gt; 1.23\n1.23\n&gt;&gt;&gt; 6.022e23\n6.022e+23\n</code></pre> <p><code>42</code> is an integer, and <code>1.23</code> and <code>6.022e23</code> are floating point numbers. The <code>e</code> means \"exponent\", so <code>6.022e23</code> means \\(6.022 \\times 10^{23}\\). You can combine integers and floating-point numbers in arithmetic expressions:</p> <pre><code>&gt;&gt;&gt; 42 + 1.23\n43.23\n</code></pre> <p>Python even lets you enter complex numbers:</p> <pre><code>&gt;&gt;&gt; (1.0+2.3j) * (3.4+4.5j)\n(-6.949999999999999+12.32j)\n</code></pre> <p>(Don't worry if you don't yet know what complex numbers are.)</p> <p>Note</p> <p>The long list of consecutive <code>9</code>s in <code>(-6.949999999999999+12.32j)</code> are due to roundoff error. It's not something you need to be worried about now.</p>"},{"location":"1/reading1/#operator-precedence","title":"Operator precedence","text":"<p>When writing arithmetic expressions with different operators, sometimes there will be two reasonable ways to interpret the expression. For instance:</p> <pre><code>1 + 2 * 3\n</code></pre> <p>could mean either</p> <pre><code>1 + (2 * 3)\n</code></pre> <p>or</p> <pre><code>(1 + 2) * 3\n</code></pre> <p>The usual rule in math is to do multiplications (and divisions) before additions (and subtractions), so in fact Python evaluates this expression the first way:</p> <pre><code>&gt;&gt;&gt; 1 + 2 * 3\n7\n</code></pre> <p>If you really want to evaluate it the second way, add the parentheses yourself:</p> <pre><code>&gt;&gt;&gt; (1 + 2) * 3\n9\n</code></pre> <p>In computer-language-speak, we say that the <code>*</code> operator has a higher precedence than the <code>+</code> operator. There are a lot of precedence rules in Python (and in most programming languages), but you don't generally have to think about them; Python usually does what you expect. Most of the time, all you need to remember is that:</p> <ul> <li><code>*</code> and <code>/</code> have a higher precedence than <code>+</code> or <code>-</code>,</li> <li><code>**</code> has a higher precedence than <code>*</code> or <code>/</code>,</li> <li><code>=</code> (assignment, next section) has a lower precedence than any of them,</li> <li>and use parentheses if you need to force a different order of evaluation.</li> </ul> <p>If you positively have to know what the relative precedences of different operators are, you should look at the Python language operator precedence table. (This might be worth bookmarking.)</p> <ol> <li> <p>It's actually called <code>C</code> because it's the successor to a language called <code>B</code>. We hope that clears that up.\u00a0\u21a9</p> </li> <li> <p>Did you catch that? We just dropped two programming jargon terms on you: \"IDE\" and \"editor\". An \"editor\" is a program that allows you to write text files, which is what programs are, and \"IDE\" stands for Integrated Development Environment, which is a kind of super-editor that allows you to run and debug code as well as edit it.\u00a0\u21a9</p> </li> <li> <p>It's a tradition for the first program you write in a new language to be one that prints out the phrase <code>\"Hello, world!\"</code>. This started with the C programming language in the 1970s and persists to this day.\u00a0\u21a9</p> </li> <li> <p>The <code>print</code> function can do much more than this, but this is the simplest way to use it.\u00a0\u21a9</p> </li> <li> <p>Some keyboards have the \"return\" key labelled as \"Enter\" instead of \"return\". It does the same thing.\u00a0\u21a9</p> </li> <li> <p>If you eventually take Mike's CS 131 course, you'll learn how to write your own interpreters!\u00a0\u21a9</p> </li> </ol>"},{"location":"2/reading2/","title":"Reading 2: Introduction to Python, part 2","text":"<p>Science is what we understand well enough to explain to a computer. Art is everything else we do. - Donald Knuth</p>"},{"location":"2/reading2/#topics","title":"Topics","text":"<p>This reading continues our crash course on the most basic aspects of Python started in the last reading.</p>"},{"location":"2/reading2/#variables-and-assignment","title":"Variables and assignment","text":"<p>Using Python as a calculator is useful but very limited. Often we want to give names to interesting values, especially when we want to use them more than once. Sometimes we also want to change those values. In Python (and in most programming languages) we do this using variables and assignment statements. A variable is a name that stands for a value (like a variable in algebra). An assignment statement is how we associate a value with a name. For instance:</p> <pre><code>&gt;&gt;&gt; width = 10\n&gt;&gt;&gt; width\n10\n</code></pre> <p>Here, <code>width</code> is a variable and <code>10</code> is the value that it stands for. When you type <code>width</code> in the interpreter, you get <code>10</code> back. The <code>=</code> sign is the assignment operator that does the actual assignment.</p> <p>Notice that when you type an assignment statement into the Python interpreter, nothing is printed. When you type a variable name (or any expression), it evaluates it (looks up its value), and prints it to the terminal.</p> <p>Assignment (<code>=</code>) vs. equality (<code>==</code>)</p> <p>The statement <code>width = 10</code> is an assignment, not an equality comparison! If you want to compare <code>width</code> with <code>10</code> to see if <code>width</code> currently equals <code>10</code>, you would have to type <code>width == 10</code>. You'd probably also want to use an <code>if</code> statement. We'll get to all of this in a few readings.</p> <p>If you assign to a variable again, it changes the value.</p> <pre><code>&gt;&gt;&gt; width = 10\n&gt;&gt;&gt; width\n10\n&gt;&gt;&gt; width = 42\n&gt;&gt;&gt; width\n42\n&gt;&gt;&gt; width = 'hi there!'\n&gt;&gt;&gt; width\n'hi there!'\n</code></pre> <p>Variable names don't have to be declared before assigning to them, and they don't have to only store data of a single type (unlike many other programming languages). Here, we see the variable <code>width</code> which contains the integer <code>10</code>, then <code>42</code>, then the string <code>'hi there!'</code>. (We'll learn more about strings in the next reading.) Of course, <code>'hi there!'</code> doesn't make sense as a width, but Python doesn't care if your names make sense. (In general, though, assigning a different kind of data to a variable is usually a bad idea.)</p> <p>Once you've defined a variable, you can use it in expressions:</p> <pre><code>&gt;&gt;&gt; pi = 3.1415926\n&gt;&gt;&gt; pi\n3.1415926\n&gt;&gt;&gt; 4 * pi\n12.5663704\n</code></pre>"},{"location":"2/reading2/#variable-name-rules","title":"Variable name rules","text":"<p>Not all names can be used as variable names:</p> <pre><code>a = 10\nb1 = 20\nthis_is_a_name = 30\n&amp;*%$2foo? = 40   # WRONG\n</code></pre> <p>The first three names are valid variable names, but the last isn't.</p> <p>Here are the rules for variable names (also known as identifiers):</p> <ul> <li> <p>Variable names can only consist of the letters <code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>, the digits <code>0</code>-<code>9</code>, and the underscore (<code>_</code>).</p> </li> <li> <p>A variable name needs to have one or more characters.</p> </li> <li> <p>Variable names can't start with a digit (this avoids confusion with numbers).</p> </li> <li> <p>Variable names can't contain spaces. (Beginning programmers often find this an annoying restriction. Tip: if you want a space in a variable name, use the underscore (<code>_</code>) character instead.)</p> </li> <li> <p>The case of letters is significant: <code>Foo</code> is a different identifier than <code>foo</code>.</p> </li> </ul>"},{"location":"2/reading2/#assignments-and-expressions","title":"Assignments and expressions","text":"<p>The rule for evaluating an assignment statement is:</p> <ul> <li>Evaluate the expression on the right hand side of the <code>=</code> sign.</li> <li>Assign that result to the variable name on the left hand side of the <code>=</code> sign.</li> </ul> <p>Here, an expression can be a plain number, another variable, an arithmetic expression, or some combination of these. An expression can also be a function call (see below) and there are other kinds of expressions we'll meet later.</p> <p>Note</p> <p>Basically, some piece of Python code that has a value is an \"expression\". If it does something (like an assignment), it's usually not an expression but a statement. Don't worry if this seems fuzzy to you now; it will get clearer as we go along and you learn about different kinds of expressions and statements. There are also some ambiguous cases: a <code>print</code> function call is technically an expression, but it also does something (printing).</p> <p>So if you have an assignment statement with an arithmetic expression on the right-hand side, you evaluate the expression before doing the assignment:</p> <pre><code>&gt;&gt;&gt; a = 2 + 3\n# Evaluate 2 + 3 to get 5, then assign 5 to the variable \"a\".\n&gt;&gt;&gt; a\n5\n</code></pre> <p>You can use the results of previous assignments in subsequent ones:</p> <pre><code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; b = a * 5\n&gt;&gt;&gt; c = a + b\n&gt;&gt;&gt; c\n60\n</code></pre> <p>You can even use the result of a previous assignment when reassigning the same variable:</p> <pre><code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; a = a + 100\n&gt;&gt;&gt; a\n110\n</code></pre> <p>You might find statements like <code>a = a + 100</code> to be nonsensical, but remember that the <code>=</code> operator doesn't compare for equality, it assigns the result of evaluating the right-hand side to the variable on the left hand side. So <code>a = a + 100</code> means \"take the old value of <code>a</code>, add <code>100</code> to it and make that the new value of <code>a</code>\".</p>"},{"location":"2/reading2/#types","title":"Types","text":"<p>Data in programming languages is subdivided into different \"types\":</p> <ul> <li>integers: <code>0</code>, <code>-43</code>,<code>1001</code></li> <li>floating-point numbers:  <code>3.1415</code>, <code>2.718</code>, <code>1.234e-5</code></li> <li>boolean values: <code>True</code> <code>False</code></li> <li>strings:  <code>'foobar'</code> <code>'Hello, world!'</code></li> <li>and many others</li> </ul> <p>Roughly speaking, a type is a kind of data that is represented a particular way inside the computer. All integers are represented in pretty much the same way as other integers, and all strings are represented in the same way as other strings, but integers and strings are represented differently. (Don't worry if this seems vague to you now.)</p> <p>Types are important because many operations/functions can only work on specific types. For instance, you can multiply two numbers together but you can't multiply two strings.</p> <p>Python has these abbreviated names for types:</p> English name Python name integers <code>int</code> floating-point numbers <code>float</code> boolean values <code>bool</code> strings <code>str</code> <p>(as well as many others).</p> <p>Python variables can hold data of any type. Unlike many computer languages, you don't have to declare the type a variable can hold. As we saw above, the same variable can even hold values of different types at different times (though this is usually bad practice).</p> <pre><code>&gt;&gt;&gt; bird = 'parrot'\n&gt;&gt;&gt; weight = 10.3245\n&gt;&gt;&gt; income = 65000\n&gt;&gt;&gt; is_ready = True\n&gt;&gt;&gt; bird\n'parrot'\n&gt;&gt;&gt; bird = 42\n&gt;&gt;&gt; bird\n42\n</code></pre> <p>There is much more to say about types, and we will meet many more types as we go along.</p>"},{"location":"2/reading2/#functions","title":"Functions","text":"<p>Computer programs are primarily made up of functions. A function (like the math equivalent for which it's named) is something that takes in argument values and computes and returns a result. Unlike in math, a function in a programming language can also do other things: print to the terminal, send an email, create and display an image, and so on.</p> <p>Functions have to be defined and then called with appropriate arguments.</p>"},{"location":"2/reading2/#calling-functions","title":"Calling functions","text":"<p>Some functions are built-in to Python. For instance, <code>abs</code> is a function that computes absolute values of numbers, <code>min</code> computes the minimum of two numbers, <code>max</code> the maximum, and so on.</p> <p>You call a function using this syntax:</p> <pre><code>&gt;&gt;&gt; abs(-5)\n5\n&gt;&gt;&gt; min(5, 3)\n3\n&gt;&gt;&gt; max(5, 3)\n5\n</code></pre> <p>Syntax means the rules by which expressions and statements in the programming language are written. Every programming language has its own unique syntax, though there are lots of similarities between languages.</p> <p>In Python, the syntax for calling functions is the same as the usual math notation: the name of the function, followed by the argument list in parentheses. Multiple arguments in the argument list are separated by commas.</p> <p>Arguments can be either literal values (like numbers or strings), variables, or other expressions. For instance:</p> <pre><code>&gt;&gt;&gt; max(5 + 3, 8 \u2013 6)\n8\n</code></pre> <p>The way this works is that Python has the following evaluation rule for function calls:</p> <ul> <li> <p>First, evaluate all the arguments to the function.</p> <ul> <li>If the argument is a number, it's already evaluated.</li> <li>If the argument is a variable, look up the variable's value.</li> <li>If the argument is an expression, evaluate the expression to get its value.</li> </ul> </li> <li> <p>Then call the function with the argument values as the function's arguments.</p> </li> </ul> <p>Here, the function is the <code>max</code> (maximum) function. The first argument is the expression <code>5 + 3</code> which obviously evaluates to <code>8</code>. The second argument is the expression <code>8 - 6</code> which obviously evaluates to <code>2</code>. So the result is <code>max(8, 2)</code> or just <code>8</code>.</p> <p>You can use function calls in expressions:</p> <pre><code>&gt;&gt;&gt; 2 * max(5 + 3, 8 \u2013 6) - 4\n12\n</code></pre> <p>You can even have function calls inside other function calls:</p> <pre><code>&gt;&gt;&gt; max(max(5, 3), min(8, 6))\n6\n&gt;&gt;&gt; min(2 + max(5, 3), 10)\n7\n</code></pre> <p>In this case, remember that the inner function calls get evaluated before the outer one. (This is the same evaluation rule, since a function call is also an expression.)</p> <p>Note</p> <p>Don't think that you need to memorize these evaluation rules. For the most part, they should be intuitive; Python pretty much does what you would expect it to most of the time. We're being very explicit about these rules mainly for completeness.</p>"},{"location":"2/reading2/#defining-new-functions","title":"Defining new functions","text":"<p>A function call is done when you want to compute a particular value using that function. If the function doesn't exist yet, you have to define it. Unlike function calls, Python's syntax for function definitions is nothing like math notation. Instead, it uses a special keyword (reserved word) called <code>def</code> (short for \"define\"):</p> <pre><code>def double(x):\n    return x * 2\n</code></pre> <p>This code defines a function called <code>double</code> which takes one argument (called <code>x</code>), doubles it and returns it to where it was called. The argument <code>x</code> is called a formal argument or formal parameter of the function; it's a name that will acquire the value of whatever actual argument the <code>double</code> function is called with. The formal parameter(s) are enclosed in parentheses and separated by commas, just like arguments in function calls. At the end of the <code>def</code> line, you have to put a colon character (<code>:</code>) or it's a syntax error. (The placement of a colon here is just a peculiarity of Python's syntax.)</p> <p>Here's an example of calling this function:</p> <pre><code>&gt;&gt;&gt; double(42)\n84\n</code></pre> <p>In this case, the actual argument of the call to the <code>double</code> function is the number <code>42</code>. The definition states that the formal parameter <code>x</code> will be given the value <code>42</code> for this function call and then the \"body\" of the function will use that value for <code>x</code> when computing the return value.</p> <p>The body of the <code>double</code> function is just one line:</p> <pre><code>    return x * 2\n</code></pre> <p><code>return</code> is another Python keyword. What this line means is that the expression <code>x * 2</code> is computed and returned from the function. So, for instance, if some other code calls the <code>double</code> function:</p> <pre><code>n = double(42)\n</code></pre> <p>then the <code>double</code> function:</p> <ul> <li>will receive the number <code>42</code> as its only argument,</li> <li>will set its formal parameter <code>x</code> to <code>42</code>,</li> <li>will compute <code>x * 2</code> i.e. <code>84</code>,</li> <li>will return <code>84</code>,</li> </ul> <p>and then <code>n</code> will be assigned to the return value of <code>84</code>. After this, using the variable <code>n</code> will be like using the number <code>84</code> (at least until <code>n</code> is set to some other value).</p> <p>Keywords</p> <p>A keyword is a reserved word in Python's grammar. Even if it technically obeys the rules for variables, you can't use it as a variable name. Python, like most programming languages, has a number of keywords; the full list is here. You definitely should not bother memorizing these at this time.</p> <p>Note that you can enter function definitions interactively in the Python interpreter:</p> <pre><code>&gt;&gt;&gt; def double(x):\n...     return x * 2\n...\n&gt;&gt;&gt; double(42)\n84\n</code></pre> <p>When you do this, Python recognizes after the first line that you are inside a function definition and changes the prompt to its secondary prompt which is <code>...</code> (three periods). Once the function is done, Python returns to the primary prompt (<code>&gt;&gt;&gt;</code>).</p> <p>In general, though, you should be writing functions in files, loading them into Python, and then using/testing them interactively.<sup>1</sup> (We'll describe how to do this in a later reading and in the assignments.) Writing functions in the interpreter is a bad idea, because once the interpreter exits, the function definitions disappear (they aren't reloaded the next time you start Python).</p> <p>In Python, the body of a function can be one line or multiple lines long. Either way, you have to indent the body of the function relative to the <code>def</code> line. If there are multiple lines, you have to indent them all the same amount:</p> <pre><code>def sum_of_squares(x, y):\n    z = x * x\n    z = z + y * y\n    return z\n</code></pre> <p>In Python, it's conventional to indent the bodies of functions exactly four spaces, although this isn't a requirement.</p>"},{"location":"2/reading2/#local-variables","title":"Local variables","text":"<p>We sneakily introduced an important new feature of Python in the last example: local variables. Let's see that function again:</p> <pre><code>def sum_of_squares(x, y):\n    z = x * x\n    z = z + y * y\n    return z\n</code></pre> <p>(We've added line numbers to make it easier to talk about the code.)</p> <p>The body of the function consists of lines 2 to 4. They are evaluated in order. Line 2 defines a local variable called <code>z</code> which we set to be equal to <code>x * x</code> i.e. <code>x</code> squared. Then line 3 adds <code>y * y</code> to <code>z</code>, so that <code>z</code> contains the sum of squares of <code>x</code> and <code>y</code>. Then <code>z</code> is returned from the function in line 4. By default, Python executes code in this one-line-after-another manner. However, there are ways of changing the flow of the program which we will describe in later readings.</p> <p>A local variable is a variable which exists only while the function is executing. It springs into existence when the function is called and disappears when the function returns. The next time the <code>double</code> function is called, it won't \"remember\" its previous <code>z</code> value either; it starts from scratch. If you define this function and try to access the variable <code>z</code> after it returns, Python will tell you that <code>z</code> isn't defined.<sup>2</sup> Variables that aren't local are global variables.<sup>3</sup> Most variables in a Python program will be local variables.</p> <p>Let's say we call this function from the interpreter:</p> <pre><code>&gt;&gt;&gt; sum_of_squares(3, 4)\n25\n</code></pre> <p>So far, so good.  Now if we do:</p> <pre><code>&gt;&gt;&gt; z\n</code></pre> <p>we get this error:</p> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'z' is not defined\n</code></pre> <p>Tracebacks</p> <p>A traceback is a representation of exactly where in the code Python was when an error occurred, along with an indication of what kind of error occurred. Tracebacks will be explained in detail in a later reading. For now, all you need to know is that it indicates that something went wrong, and there is usually an error message telling you what that was.</p> <p>Here, you can see that there is no value associated with the local variable <code>z</code> when <code>sum_of_squares(3, 4)</code> returns. Interestingly, this is also true of the formal parameters <code>x</code> and <code>y</code>; they behave like local variables as well.</p> <pre><code>&gt;&gt;&gt; sum_of_squares(3, 4)\n25\n&gt;&gt;&gt; x\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'x' is not defined\n&gt;&gt;&gt; y\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'y' is not defined\n</code></pre> <p>Note</p> <p>The fact that the names <code>x</code> and <code>y</code> are not defined after <code>sum_of_squares</code> returns is a good thing! You want your local variables to stay local, so they can't interfere with anything outside the function, and can't be interfered with by anything outside the function.</p>"},{"location":"2/reading2/#global-variables","title":"Global variables","text":"<p>Any variable defined at the top level of the program (which means not inside a function) is a global variable.<sup>4</sup></p> <pre><code># Global variable representing the current year.\nyear = 2024\n</code></pre> <p>A global variable can be used inside any function. In general, though, try not to use global variables if you can help it; local variables are just easier to reason about. Global variables are OK if you don't change them in the program; then they are effectively global constants.</p>"},{"location":"2/reading2/#comments","title":"Comments","text":"<p>One very important thing that all programming languages allow you to do is to write comments in the code. These are \"notes to yourself\" which explain things about the code to anyone reading it. They aren't executed; the computer simply ignores them.</p> <p>Python comment syntax is very simple: a comment starts with the <code>#</code> character and goes until the end of the line it's on.</p> <pre><code># This is a comment.\na = 10  # This is a comment that doesn't span an entire line.\n</code></pre> <p>Comments are one useful way to document your code. There are other ways which we'll see as we go along.</p> <ol> <li> <p>You may also be using a debugger, which is a tool that can run code inside of a code editor and help you walk through the code to find bugs. And you may also be running pre-written tests from the terminal command line.\u00a0\u21a9</p> </li> <li> <p>Unless a different non-local variable named <code>z</code> was defined previously, which we are assuming isn't the case here.\u00a0\u21a9</p> </li> <li> <p>We're oversimplifying here. There are other kinds of variables, and we'll get to them in due time.\u00a0\u21a9</p> </li> <li> <p>Names defined inside a class are also not global variables, but we're keeping things simple for now.\u00a0\u21a9</p> </li> </ol>"}]}