{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The CS 1 book: Fall 2024","text":"<p>This book is location of the readings for the Caltech CS 1 course  (Introduction to Computer Programming) for the Fall 2024 term.</p> <p>The course instructors are Adam Blank and Mike Vanier. The readings were mostly authored by Mike, with many ideas and suggestions coming from Adam.</p> <p>Please direct all comments about these readings to Mike. In particular, he is very interested in hearing about</p> <ol> <li>Typos and errors.</li> <li>Anything that isn't clear.</li> <li>Suggestions for topics that aren't covered but should be.</li> </ol> <p>Dark mode and grey mode</p> <p>Since reading a website with a bright white background can be hard on the eyes, this site can be switched to \"dark mode\" (dark background, light text) or \"grey mode\" (grey background, dark text) by clicking on the icon at the top of the page to the immediate left of the search bar.</p>"},{"location":"#feedback-is-welcome","title":"Feedback is welcome!","text":"<p>We like getting feedback! It will help make these readings better for future CS 1 classes, so don't be shy about emailing us if you think something can be explained better.</p>"},{"location":"1/reading1/","title":"Reading 1: Introduction to Python, part 1","text":"<p>I do not fear computers.  I fear the lack of them. - Isaac Asimov</p>"},{"location":"1/reading1/#introduction","title":"Introduction","text":"<p>Welcome to CS 1! We're delighted that you're taking our course. We hope you have a lot of fun and learn a lot in the process.</p> <p>This is the first \"reading\" of the course. The idea behind readings is to serve as the official course notes, so that lectures are less of a brain dump of details and more an opportunity to interactively go through code examples, answer questions, and get you thinking about the programming process. We will try to post the reading(s) corresponding to a lecture at least a day before the lecture. You should ideally have read it (them) before coming to lecture, so you can use class time to ask questions about the material and refine your understanding. We will use the questions you ask in the lecture to improve the readings.</p> <p>Note</p> <p>The readings will roughly correspond to the lecture topics, but it's not an exact equivalence; some topics may be covered more deeply in the readings than in lectures or vice-versa.</p>"},{"location":"1/reading1/#topics","title":"Topics","text":"<p>This reading is a general introduction to programming and Python, followed by a short crash course on the most basic aspects of Python, which will be continued in the next reading.</p>"},{"location":"1/reading1/#your-programming-background","title":"Your programming background","text":"<p>We are very well aware that students in CS 1 come from a very wide variety of backgrounds in terms of knowledge of computer programming. Some of you have never programmed a computer before. That's fine; you're in the right place! Others have done some or perhaps even extensive programming. We will try to make these notes accessible to everyone, and if there is a topic that you are very familiar with, we encourage you to skim (but not to skip) the notes on that topic.</p>"},{"location":"1/reading1/#programming-as-a-thought-process","title":"Programming as a thought process","text":"<p>[This section is for new programmers; experienced programmers can skip to the next section.]</p> <p>The hardest subjects to learn are usually those that force you to think in a different way than you're used to. For instance, when you learn algebra, you have to generalize the arithmetic you've learned (\"ten apples times three equals thirty apples\") to allow for unknown quantities (variables) (\"<code>x</code> apples times <code>y</code> equals <code>xy</code> apples\"). That's a mental leap. When you learn calculus you have to generalize what you know about functions to allow for operations like derivatives that take functions as arguments. And when you learn programming for the first time, you have to learn to \"think like a machine\". This is what we mean when we speak of programming as a thought process. \"Thinking like a machine\" means understanding enough about how the computer works to be able to predict what the result of executing your code is going to be.</p> <p>Thinking like a machine isn't necessarily hard, but it is different. The machine (the computer) works by iron-clad rules of logic, doing many very simple operations at blinding speed. We write programs to tell computers what to do, and the computer will do exactly what we tell it to, no more and no less, whether it makes sense or not. There is no room for error; if you get a single character wrong in your program, it will either do the wrong thing or not run at all. The computer doesn't know or care what you \"meant\" it to do, only what you specifically asked it to do. It is completely literal and completely unforgiving. You should expect to spend a lot of time fixing mistakes in your programs (which are called \"bugs\") to finally get it to do the right thing.</p>  The first bug ever found (1947): a moth trapped in the Mark II computer in Harvard University.  <p>Fortunately, the computer has a number of safeguards which prevent you from doing anything really horrible (so running a program is unlikely to physically destroy the computer itself, for instance); usually, if you make a mistake, it will just complain that something went wrong and halt, or else it'll just not do what you wanted it to.</p> <p>Learning to understand the very logical, very exact, very literal and incredibly picky way a computer works is going to take time. We're not going to lie to you: programming can be incredibly frustrating. But once you finally get it to do what you want, it's incredibly satisfying, and with experience, the less frustrating it gets and the more satisfying it is. (But the frustration never goes away entirely!) We will be trying to help you learn to \"think like a machine\" all through this course. Often, we will not give you the whole story about what is happening when we first introduce a topic, because to do that would take too long and be tedious. But as we visit and revisit topics, we will fill in more and more of the gaps so that eventually you'll have a very good idea of what happens when your programs execute. (To get a really deep understanding of all this, though, you'll have to take more courses than just CS 1!) Don't worry; it's going to be fun!</p>"},{"location":"1/reading1/#program-design-as-a-thought-process","title":"Program design as a thought process","text":"<p>[This section is for beginning and experienced programmers alike.]</p> <p>Even after you internalize the first thought process (thinking like a machine) you have to learn another thought process: how to design programs. You will have to write many functions and programs in this course. You'll be given a pretty precise description of what the function or program is supposed to do, and then you will have to write the code to do it. This is a creative act! There is always going to be more than one way to solve all but the simplest problems, and there is never going to be an objectively \"perfect\" answer. But for many programmers, even ones who understand the workings of a programming language quite well, it can be challenging to put together the elements of the programming language in the right way to solve a problem. We call this activity program design. As a creative act, we can't give exact rules on how to do it, but we can give guidelines, rules of thumb, and general wisdom we've accumulated over our years of programming. Knowing these guidelines and rules of thumb should help you when you have to write a function (or class, or module) but don't know where to start.</p> <p>The details of the programming languages we'll be teaching you (first Python, and then Java) will be in these readings. The thought process behind program design will mainly be covered in lectures, often by simply showing you a problem and walking through the steps needed to solve it. That way, you'll see how experienced programmers think about a problem, and you can apply what you learn to your own programs.</p>"},{"location":"1/reading1/#programming-jargon","title":"Programming jargon","text":"<p>Another challenge for beginning programmers is that programming uses a lot of common words with very specific meanings that aren't the usual meanings. Words like list, dictionary, string, file, function, interpreter and so on mean very different things when used in a programming context than they would mean in everyday conversation. We will try hard to be incredibly clear on what a particular programming term means, especially if that meaning is different from the common meaning. If you find a term we are using confusing, let us know so we can improve these readings!</p>"},{"location":"1/reading1/#the-choice-of-programming-languages","title":"The choice of programming language(s)","text":"<p>We will be using two programming languages in this course: Python and Java. We will use Python for about the first two-thirds of the course, and then switch to Java for the remainder of the course.</p> <p>Note</p> <p>Java is the only language used in CS 2, so it's important that you learn it before taking that course. Java is also well worth knowing in its own right.</p> <p>Python is an excellent first programming language. It's very useful for teaching the basic concepts of programming, and it's also an incredibly useful real-world language. Perhaps most relevant to you, Python has in recent years emerged as one of the most important programming languages in science and data analysis, as well as one of the most-used languages in machine learning and artificial intelligence. Python is easy to learn, incredibly versatile, very readable, and very consistent. You may know some (or a lot!) of Python already, but even in that case we're pretty sure we're going to be teaching you some new things about it.</p> <p></p> <p>We love Python both as a teaching language and as a language we use ourselves, but don't kid yourself: it's not the only good or useful programming language. As we mentioned, near the end of this course (and in CS 2) you will learn Java. if you take CS 3 and/or CS 11, you will learn C, and if you take CS 4 you will learn OCaml. Serious programmers need to know more than one language, so think of this as the start of your programming journey. Programming is a lot of fun, and we hope to show you why we love it so much and why it's so exciting to learn computer science.</p>"},{"location":"1/reading1/#a-brief-history-of-python","title":"A brief history of Python","text":"<p>Computer languages have weird names. Some, like <code>C</code>, are completely arbitrary and meaningless.<sup>1</sup> Others, like <code>Java</code> or <code>Ruby</code>, are named after something (coffee and the gem stone, respectively). <code>Python</code> is named after the British comedy group Monty Python's Flying Circus. It was invented in the late 1980s by Guido van Rossum, a Dutch programmer who wanted a language that was easier to use than C for everyday tasks. Guido was also a fan of the comedy group, so he named his language after them as an homage.</p> <p>Python has been under continual development ever since it was created, and the latest version of Python available as of this writing is Python 3.12.4. Python is now one of the most popular programming languages in use today.</p> <p>The Python home page is at https://www.python.org. (You should bookmark it, because the online Python documentation is hosted there, and you will definitely need that for this course.)</p>"},{"location":"1/reading1/#code-examples","title":"Code examples","text":"<p>In the supporting documents we will be going through all the details you need to know in order to get Python working on your computer, which IDE/editor to use<sup>2</sup>, etc. We won't do that in the readings, but instead we'll assume you can run Python code.</p> <p>Note</p> <p>If you can't do that yet, don't worry; you should still be able to understand the code examples. You simply won't be able to run them yourselves yet.</p> <p>However, we strongly recommend that you do get Python set up as soon as possible and follow along with the readings by typing in the examples and playing around with them; you'll learn a lot more that way and it'll be more fun too.</p> <p>Here is a snippet of Python code:</p> <pre><code>print('Hello, world!')\n</code></pre> <p>Believe it or not, this is a complete Python program! When run from a terminal window, it will print the words <code>Hello, world!</code> to the terminal.<sup>3</sup></p> <p>Terminals</p> <p>A terminal (more jargon!) is a program which allows you to directly type commands to your computer and receive textual output back from the computer. Some of you may never have used a terminal, because non-programmers typically have little use for one. Programmers use them all the time, and some of us spend most of our time on the computer working inside a terminal. Terminal programs include Terminal.app and Iterm.app (MacOS), Windows Terminal (Windows), and many different programs for Linux. You can run Python programs directly from a terminal, and we'll show you lots of examples of this.</p> <p>We will get into the details of Python below, but just so you aren't confused: the words <code>'Hello, world!'</code> in single quotes are a Python string (which is the way textual data is represented inside Python). The word <code>print</code> stands for a built-in Python function which takes a single argument (in this case the string <code>'Hello, world!'</code>) and prints it out to the terminal.<sup>4</sup> We'll talk more about functions in the next reading, and we'll cover strings in detail after that.</p> <p>The colors in the Python code snippet have nothing to do with the Python language; they are what is called \"syntax coloring\". Its purpose is just to make the code a bit more readable by highlighting different parts of the code in different ways. (They don't affect the meaning of the code at all.)</p>"},{"location":"1/reading1/#source-code-files-vs-the-interactive-interpreter","title":"Source code files vs. the interactive interpreter","text":"<p>In this course, we will be working with Python in two distinct ways:</p> <ul> <li> <p>interactively, using the Python \"interactive interpreter\"</p> </li> <li> <p>running Python on text files containing Python code</p> </li> </ul> <p>When we are giving lectures, we'll be using Python in both ways, and you will do the same when writing your assignments. You will also be running \"test suites\" which will rigorously test your code, but if something doesn't work, you'll have to run the code yourself one of these ways to figure out why!</p> <p>Note</p> <p>Don't worry, we'll show you how to debug your code when the time comes.</p>"},{"location":"1/reading1/#source-code-files","title":"Source code files","text":"<p>Python code that you write (using an editor) is called source code. The \"source\" word implies that this is the first thing that is created in order to make a program. (Files are just data that is stored on a computer permanently i.e. it doesn't disappear when the computer is turned off). Python source code files are plain text files with a specific suffix, which is <code>.py</code>. Usually, the name of a source code file is in all lowercase letters; for instance, you might have one called <code>lab1.py</code> or <code>sudoku.py</code>.</p> <p>Let's say we've written a file of Python code called <code>hello.py</code> which contains the following code:</p> <pre><code>print('Hello, world!')\n</code></pre> <p>We can run this file by typing the following command at a terminal command line:</p> <pre><code>$ python hello.py\n</code></pre> <p>The <code>$</code> is called a prompt; you don't type it.</p> <p>Prompts</p> <p>Your prompt may look different from this. It doesn't matter. The purpose of the prompt is to highlight where on the terminal the commands you type are going to be displayed.</p> <p>Inside a terminal there is a program called a shell which is running. The shell is the program which interprets commands like this. (Most people think of the terminal and the shell as one combined entity, but they are actually separate; a shell runs inside of a terminal.)</p> <p>The shell prompt (the <code>$</code> above) is printed automatically when the shell is waiting for more input. Then you type in the words <code>python hello.py</code> and hit the return key<sup>5</sup>. What this does is run the <code>python</code> program (which is the program that runs Python language files) on the file called <code>hello.py</code>.</p> <p>If all goes well, the terminal should print out:</p> <pre><code>Hello, world!\n</code></pre> <p>and return you to the prompt.</p> <p>Note</p> <p>This assumes your computer is running either Linux or Mac OS X as its operating system. If it's running Windows, you can get to a terminal prompt like this by installing the Windows Subsystem for Linux, but don't worry about this now; there are other ways to run Python programs. The important thing to understand is that you can run all the Python code in a single file with a single command.</p> <p>Python programs can be split between multiple files; such files are usually called \"modules\". We will talk more about modules in a future reading.</p>"},{"location":"1/reading1/#the-python-interpreter","title":"The Python interpreter","text":"<p>It's also possible to enter all the code for a program on-the-fly by starting up the Python interpreter. An interpreter or interactive interpreter is a program which reads lines of code you type and immediately runs them.<sup>6</sup> Python can work as an interpreter if you type the word <code>python</code> into a terminal, followed by typing the return key:</p> <p></p> <p>This will cause the interactive Python interpreter to start up. First, a banner message is printed, which identifies the Python version as well as some other information. Then the Python prompt is displayed. It looks like this:</p> <pre><code>&gt;&gt;&gt;\n</code></pre> <p>The three <code>&gt;</code>s are the Python prompt. It's how Python tells you it's waiting for you to type a line of code for it to execute. (Don't confuse the Python prompt with the shell prompt! the Python prompt is only used to enter Python language statements, not to invoke arbitrary programs.)</p> <p>Now you can enter expressions at the prompt:</p> <pre><code>&gt;&gt;&gt; 1 + 1\n</code></pre> <p>Hit the return key, and Python will helpfully print out</p> <pre><code>2\n</code></pre> <p>and print out the prompt again. If you want to exit the interpreter, type \"control d\" i.e. hold down the \"control\" key on your keyboard while typing the letter <code>d</code> (lowercase). This will exit the interpreter and return you to the shell prompt. Typing <code>exit()</code> or <code>quit()</code> at the prompt followed by the return key  will also exit the interpreter.</p> <p>It's important to understand that the <code>&gt;&gt;&gt;</code> prompt is not part of the Python language; it's just the way that the interactive Python interpreter lets you know that it is waiting for you to enter some code.</p> <p>There is more to say about the interactive interpreter; we will cover it as we get to it.</p>"},{"location":"1/reading1/#python-as-a-calculator","title":"Python as a calculator","text":""},{"location":"1/reading1/#arithmetic-expressions","title":"Arithmetic expressions","text":"<p>One thing that is easy to do with Python is to use it as a kind of terminal-based calculator program. You do this by starting the interactive interpreter and entering arithmetic expressions:</p> <pre><code>&gt;&gt;&gt; 2 + 2\n4\n&gt;&gt;&gt; 1.2 * 3.4\n4.08\n&gt;&gt;&gt; 2 ** 16\n65536\n&gt;&gt;&gt; (4 - 2) * (3 + 3)\n12\n&gt;&gt;&gt; 1/6\n0.16666666666666666\n</code></pre> <p>and so on. Note that some common operations use different operators than is customary in math:</p> Operator symbol Meaning in Python <code>*</code> multiplication <code>/</code> division <code>**</code> to the power of <p>This is done because common symbols like the \"times\" symbol (\\(\\times\\)) and the \"divide\" symbol (\\(\\div\\)) can't be typed on a standard keyboard. (Most programming languages use <code>*</code> and <code>/</code> for multiplication and division.) Traditional math notation uses superscripts for powers, which is also not easily typeable, so Python uses <code>**</code>. For instance, <code>2 ** 16</code> means \\(2^{16}\\).</p>"},{"location":"1/reading1/#numbers","title":"Numbers","text":"<p>Numbers in Python can be \"integers\" (no fractional part) or \"floating point\" (approximate real numbers). Floating point numbers are a computer approximation to real numbers. Some real numbers (like \\(\\pi\\) or \\(e\\)) need an infinite number of decimal places to represent them exactly. Computers don't have infinite storage, so the number is cut off after a certain number of decimal places, and we call this kind of number a \"floating point\" number (or \"float\" for short).</p> <pre><code>&gt;&gt;&gt; 42\n42\n&gt;&gt;&gt; 1.23\n1.23\n&gt;&gt;&gt; 6.022e23\n6.022e+23\n</code></pre> <p><code>42</code> is an integer, and <code>1.23</code> and <code>6.022e23</code> are floating point numbers. The <code>e</code> means \"exponent\", so <code>6.022e23</code> means \\(6.022 \\times 10^{23}\\). You can combine integers and floating-point numbers in arithmetic expressions:</p> <pre><code>&gt;&gt;&gt; 42 + 1.23\n43.23\n</code></pre> <p>Python even lets you enter complex numbers:</p> <pre><code>&gt;&gt;&gt; (1.0+2.3j) * (3.4+4.5j)\n(-6.949999999999999+12.32j)\n</code></pre> <p>(Don't worry if you don't yet know what complex numbers are.)</p> <p>Note</p> <p>The long list of consecutive <code>9</code>s in <code>(-6.949999999999999+12.32j)</code> are due to roundoff error. It's not something you need to be worried about now.</p>"},{"location":"1/reading1/#operator-precedence","title":"Operator precedence","text":"<p>When writing arithmetic expressions with different operators, sometimes there will be two reasonable ways to interpret the expression. For instance:</p> <pre><code>1 + 2 * 3\n</code></pre> <p>could mean either</p> <pre><code>1 + (2 * 3)\n</code></pre> <p>or</p> <pre><code>(1 + 2) * 3\n</code></pre> <p>The usual rule in math is to do multiplications (and divisions) before additions (and subtractions), so in fact Python evaluates this expression the first way:</p> <pre><code>&gt;&gt;&gt; 1 + 2 * 3\n7\n</code></pre> <p>If you really want to evaluate it the second way, add the parentheses yourself:</p> <pre><code>&gt;&gt;&gt; (1 + 2) * 3\n9\n</code></pre> <p>In computer-language-speak, we say that the <code>*</code> operator has a higher precedence than the <code>+</code> operator. There are a lot of precedence rules in Python (and in most programming languages), but you don't generally have to think about them; Python usually does what you expect. Most of the time, all you need to remember is that:</p> <ul> <li><code>*</code> and <code>/</code> have a higher precedence than <code>+</code> or <code>-</code>,</li> <li><code>**</code> has a higher precedence than <code>*</code> or <code>/</code>,</li> <li><code>=</code> (assignment, next section) has a lower precedence than any of them,</li> <li>and use parentheses if you need to force a different order of evaluation.</li> </ul> <p>If you positively have to know what the relative precedences of different operators are, you should look at the Python language operator precedence table. (This might be worth bookmarking.)</p> <ol> <li> <p>It's actually called <code>C</code> because it's the successor to a language called <code>B</code>. We hope that clears that up.\u00a0\u21a9</p> </li> <li> <p>Did you catch that? We just dropped two programming jargon terms on you: \"IDE\" and \"editor\". An \"editor\" is a program that allows you to write text files, which is what programs are, and \"IDE\" stands for Integrated Development Environment, which is a kind of super-editor that allows you to run and debug code as well as edit it.\u00a0\u21a9</p> </li> <li> <p>It's a tradition for the first program you write in a new language to be one that prints out the phrase <code>\"Hello, world!\"</code>. This started with the C programming language in the 1970s and persists to this day.\u00a0\u21a9</p> </li> <li> <p>The <code>print</code> function can do much more than this, but this is the simplest way to use it.\u00a0\u21a9</p> </li> <li> <p>Some keyboards have the \"return\" key labelled as \"Enter\" instead of \"return\". It does the same thing.\u00a0\u21a9</p> </li> <li> <p>If you eventually take Mike's CS 131 course, you'll learn how to write your own interpreters!\u00a0\u21a9</p> </li> </ol>"},{"location":"2/reading2/","title":"Reading 2: Introduction to Python, part 2","text":"<p>Science is what we understand well enough to explain to a computer. Art is everything else we do. - Donald Knuth</p>"},{"location":"2/reading2/#topics","title":"Topics","text":"<p>This reading continues our crash course on the most basic aspects of Python started in the last reading.</p>"},{"location":"2/reading2/#variables-and-assignment","title":"Variables and assignment","text":"<p>Using Python as a calculator is useful but very limited. Often we want to give names to interesting values, especially when we want to use them more than once. Sometimes we also want to change those values. In Python (and in most programming languages) we do this using variables and assignment statements. A variable is a name that stands for a value (like a variable in algebra). An assignment statement is how we associate a value with a name. For instance:</p> <pre><code>&gt;&gt;&gt; width = 10\n&gt;&gt;&gt; width\n10\n</code></pre> <p>Here, <code>width</code> is a variable and <code>10</code> is the value that it stands for. When you type <code>width</code> in the interpreter, you get <code>10</code> back. The <code>=</code> sign is the assignment operator that does the actual assignment.</p> <p>Notice that when you type an assignment statement into the Python interpreter, nothing is printed. When you type a variable name (or any expression), it evaluates it (looks up its value), and prints it to the terminal.</p> <p>Assignment (<code>=</code>) vs. equality (<code>==</code>)</p> <p>The statement <code>width = 10</code> is an assignment, not an equality comparison! If you want to compare <code>width</code> with <code>10</code> to see if <code>width</code> currently equals <code>10</code>, you would have to type <code>width == 10</code>. You'd probably also want to use an <code>if</code> statement. We'll get to all of this in a few readings.</p> <p>If you assign to a variable again, it changes the value.</p> <pre><code>&gt;&gt;&gt; width = 10\n&gt;&gt;&gt; width\n10\n&gt;&gt;&gt; width = 42\n&gt;&gt;&gt; width\n42\n&gt;&gt;&gt; width = 'hi there!'\n&gt;&gt;&gt; width\n'hi there!'\n</code></pre> <p>Variable names don't have to be declared before assigning to them, and they don't have to only store data of a single type (unlike many other programming languages). Here, we see the variable <code>width</code> which contains the integer <code>10</code>, then <code>42</code>, then the string <code>'hi there!'</code>. (We'll learn more about strings in the next reading.) Of course, <code>'hi there!'</code> doesn't make sense as a width, but Python doesn't care if your names make sense. (In general, though, assigning a different kind of data to a variable is usually a bad idea.)</p> <p>Once you've defined a variable, you can use it in expressions:</p> <pre><code>&gt;&gt;&gt; pi = 3.1415926\n&gt;&gt;&gt; pi\n3.1415926\n&gt;&gt;&gt; 4 * pi\n12.5663704\n</code></pre>"},{"location":"2/reading2/#variable-name-rules","title":"Variable name rules","text":"<p>Not all names can be used as variable names:</p> <pre><code>a = 10\nb1 = 20\nthis_is_a_name = 30\n&amp;*%$2foo? = 40   # WRONG\n</code></pre> <p>The first three names are valid variable names, but the last isn't.</p> <p>Here are the rules for variable names (also known as identifiers):</p> <ul> <li> <p>Variable names can only consist of the letters <code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>, the digits <code>0</code>-<code>9</code>, and the underscore (<code>_</code>).</p> </li> <li> <p>A variable name needs to have one or more characters.</p> </li> <li> <p>Variable names can't start with a digit (this avoids confusion with numbers).</p> </li> <li> <p>Variable names can't contain spaces. (Beginning programmers often find this an annoying restriction. Tip: if you want a space in a variable name, use the underscore (<code>_</code>) character instead.)</p> </li> <li> <p>The case of letters is significant: <code>Foo</code> is a different identifier than <code>foo</code>.</p> </li> </ul>"},{"location":"2/reading2/#assignments-and-expressions","title":"Assignments and expressions","text":"<p>The rule for evaluating an assignment statement is:</p> <ul> <li>Evaluate the expression on the right hand side of the <code>=</code> sign.</li> <li>Assign that result to the variable name on the left hand side of the <code>=</code> sign.</li> </ul> <p>Here, an expression can be a plain number, another variable, an arithmetic expression, or some combination of these. An expression can also be a function call (see below) and there are other kinds of expressions we'll meet later.</p> <p>Note</p> <p>Basically, some piece of Python code that has a value is an \"expression\". If it does something (like an assignment), it's usually not an expression but a statement. Don't worry if this seems fuzzy to you now; it will get clearer as we go along and you learn about different kinds of expressions and statements. There are also some ambiguous cases: a <code>print</code> function call is technically an expression, but it also does something (printing).</p> <p>So if you have an assignment statement with an arithmetic expression on the right-hand side, you evaluate the expression before doing the assignment:</p> <pre><code>&gt;&gt;&gt; a = 2 + 3\n# Evaluate 2 + 3 to get 5, then assign 5 to the variable \"a\".\n&gt;&gt;&gt; a\n5\n</code></pre> <p>You can use the results of previous assignments in subsequent ones:</p> <pre><code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; b = a * 5\n&gt;&gt;&gt; c = a + b\n&gt;&gt;&gt; c\n60\n</code></pre> <p>You can even use the result of a previous assignment when reassigning the same variable:</p> <pre><code>&gt;&gt;&gt; a = 10\n&gt;&gt;&gt; a = a + 100\n&gt;&gt;&gt; a\n110\n</code></pre> <p>You might find statements like <code>a = a + 100</code> to be nonsensical, but remember that the <code>=</code> operator doesn't compare for equality, it assigns the result of evaluating the right-hand side to the variable on the left hand side. So <code>a = a + 100</code> means \"take the old value of <code>a</code>, add <code>100</code> to it and make that the new value of <code>a</code>\".</p>"},{"location":"2/reading2/#types","title":"Types","text":"<p>Data in programming languages is subdivided into different \"types\":</p> <ul> <li>integers: <code>0</code>, <code>-43</code>,<code>1001</code></li> <li>floating-point numbers:  <code>3.1415</code>, <code>2.718</code>, <code>1.234e-5</code></li> <li>boolean values: <code>True</code> <code>False</code></li> <li>strings:  <code>'foobar'</code> <code>'Hello, world!'</code></li> <li>and many others</li> </ul> <p>Roughly speaking, a type is a kind of data that is represented a particular way inside the computer. All integers are represented in pretty much the same way as other integers, and all strings are represented in the same way as other strings, but integers and strings are represented differently. (Don't worry if this seems vague to you now.)</p> <p>Types are important because many operations/functions can only work on specific types. For instance, you can multiply two numbers together but you can't multiply two strings.</p> <p>Python has these abbreviated names for types:</p> English name Python name integers <code>int</code> floating-point numbers <code>float</code> boolean values <code>bool</code> strings <code>str</code> <p>(as well as many others).</p> <p>Python variables can hold data of any type. Unlike many computer languages, you don't have to declare the type a variable can hold. As we saw above, the same variable can even hold values of different types at different times (though this is usually bad practice).</p> <pre><code>&gt;&gt;&gt; bird = 'parrot'\n&gt;&gt;&gt; weight = 10.3245\n&gt;&gt;&gt; income = 65000\n&gt;&gt;&gt; is_ready = True\n&gt;&gt;&gt; bird\n'parrot'\n&gt;&gt;&gt; bird = 42\n&gt;&gt;&gt; bird\n42\n</code></pre> <p>There is much more to say about types, and we will meet many more types as we go along.</p>"},{"location":"2/reading2/#functions","title":"Functions","text":"<p>Computer programs are primarily made up of functions. A function (like the math equivalent for which it's named) is something that takes in argument values and computes and returns a result. Unlike in math, a function in a programming language can also do other things: print to the terminal, send an email, create and display an image, and so on.</p> <p>Functions have to be defined and then called with appropriate arguments.</p>"},{"location":"2/reading2/#calling-functions","title":"Calling functions","text":"<p>Some functions are built-in to Python. For instance, <code>abs</code> is a function that computes absolute values of numbers, <code>min</code> computes the minimum of two numbers, <code>max</code> the maximum, and so on.</p> <p>You call a function using this syntax:</p> <pre><code>&gt;&gt;&gt; abs(-5)\n5\n&gt;&gt;&gt; min(5, 3)\n3\n&gt;&gt;&gt; max(5, 3)\n5\n</code></pre> <p>Syntax means the rules by which expressions and statements in the programming language are written. Every programming language has its own unique syntax, though there are lots of similarities between languages.</p> <p>In Python, the syntax for calling functions is the same as the usual math notation: the name of the function, followed by the argument list in parentheses. Multiple arguments in the argument list are separated by commas.</p> <p>Arguments can be either literal values (like numbers or strings), variables, or other expressions. For instance:</p> <pre><code>&gt;&gt;&gt; max(5 + 3, 8 \u2013 6)\n8\n</code></pre> <p>The way this works is that Python has the following evaluation rule for function calls:</p> <ul> <li> <p>First, evaluate all the arguments to the function.</p> <ul> <li>If the argument is a number, it's already evaluated.</li> <li>If the argument is a variable, look up the variable's value.</li> <li>If the argument is an expression, evaluate the expression to get its value.</li> </ul> </li> <li> <p>Then call the function with the argument values as the function's arguments.</p> </li> </ul> <p>Here, the function is the <code>max</code> (maximum) function. The first argument is the expression <code>5 + 3</code> which obviously evaluates to <code>8</code>. The second argument is the expression <code>8 - 6</code> which obviously evaluates to <code>2</code>. So the result is <code>max(8, 2)</code> or just <code>8</code>.</p> <p>You can use function calls in expressions:</p> <pre><code>&gt;&gt;&gt; 2 * max(5 + 3, 8 \u2013 6) - 4\n12\n</code></pre> <p>You can even have function calls inside other function calls:</p> <pre><code>&gt;&gt;&gt; max(max(5, 3), min(8, 6))\n6\n&gt;&gt;&gt; min(2 + max(5, 3), 10)\n7\n</code></pre> <p>In this case, remember that the inner function calls get evaluated before the outer one. (This is the same evaluation rule, since a function call is also an expression.)</p> <p>Note</p> <p>Don't think that you need to memorize these evaluation rules. For the most part, they should be intuitive; Python pretty much does what you would expect it to most of the time. We're being very explicit about these rules mainly for completeness.</p>"},{"location":"2/reading2/#defining-new-functions","title":"Defining new functions","text":"<p>A function call is done when you want to compute a particular value using that function. If the function doesn't exist yet, you have to define it. Unlike function calls, Python's syntax for function definitions is nothing like math notation. Instead, it uses a special keyword (reserved word) called <code>def</code> (short for \"define\"):</p> <pre><code>def double(x):\n    return x * 2\n</code></pre> <p>This code defines a function called <code>double</code> which takes one argument (called <code>x</code>), doubles it and returns it to where it was called. The argument <code>x</code> is called a formal argument or formal parameter of the function; it's a name that will acquire the value of whatever actual argument the <code>double</code> function is called with. The formal parameter(s) are enclosed in parentheses and separated by commas, just like arguments in function calls. At the end of the <code>def</code> line, you have to put a colon character (<code>:</code>) or it's a syntax error. (The placement of a colon here is just a peculiarity of Python's syntax.)</p> <p>Here's an example of calling this function:</p> <pre><code>&gt;&gt;&gt; double(42)\n84\n</code></pre> <p>In this case, the actual argument of the call to the <code>double</code> function is the number <code>42</code>. The definition states that the formal parameter <code>x</code> will be given the value <code>42</code> for this function call and then the \"body\" of the function will use that value for <code>x</code> when computing the return value.</p> <p>The body of the <code>double</code> function is just one line:</p> <pre><code>    return x * 2\n</code></pre> <p><code>return</code> is another Python keyword. What this line means is that the expression <code>x * 2</code> is computed and returned from the function. So, for instance, if some other code calls the <code>double</code> function:</p> <pre><code>n = double(42)\n</code></pre> <p>then the <code>double</code> function:</p> <ul> <li>will receive the number <code>42</code> as its only argument,</li> <li>will set its formal parameter <code>x</code> to <code>42</code>,</li> <li>will compute <code>x * 2</code> i.e. <code>84</code>,</li> <li>will return <code>84</code>,</li> </ul> <p>and then <code>n</code> will be assigned to the return value of <code>84</code>. After this, using the variable <code>n</code> will be like using the number <code>84</code> (at least until <code>n</code> is set to some other value).</p> <p>Keywords</p> <p>A keyword is a reserved word in Python's grammar. Even if it technically obeys the rules for variables, you can't use it as a variable name. Python, like most programming languages, has a number of keywords; the full list is here. You definitely should not bother memorizing these at this time.</p> <p>Note that you can enter function definitions interactively in the Python interpreter:</p> <pre><code>&gt;&gt;&gt; def double(x):\n...     return x * 2\n...\n&gt;&gt;&gt; double(42)\n84\n</code></pre> <p>When you do this, Python recognizes after the first line that you are inside a function definition and changes the prompt to its secondary prompt which is <code>...</code> (three periods). Once the function is done, Python returns to the primary prompt (<code>&gt;&gt;&gt;</code>).</p> <p>In general, though, you should be writing functions in files, loading them into Python, and then using/testing them interactively.<sup>1</sup> (We'll describe how to do this in a later reading and in the assignments.) Writing functions in the interpreter is a bad idea, because once the interpreter exits, the function definitions disappear (they aren't reloaded the next time you start Python).</p> <p>In Python, the body of a function can be one line or multiple lines long. Either way, you have to indent the body of the function relative to the <code>def</code> line. If there are multiple lines, you have to indent them all the same amount:</p> <pre><code>def sum_of_squares(x, y):\n    z = x * x\n    z = z + y * y\n    return z\n</code></pre> <p>In Python, it's conventional to indent the bodies of functions exactly four spaces, although this isn't a requirement.</p>"},{"location":"2/reading2/#local-variables","title":"Local variables","text":"<p>We sneakily introduced an important new feature of Python in the last example: local variables. Let's see that function again:</p> <pre><code>def sum_of_squares(x, y):\n    z = x * x\n    z = z + y * y\n    return z\n</code></pre> <p>(We've added line numbers to make it easier to talk about the code.)</p> <p>The body of the function consists of lines 2 to 4. They are evaluated in order. Line 2 defines a local variable called <code>z</code> which we set to be equal to <code>x * x</code> i.e. <code>x</code> squared. Then line 3 adds <code>y * y</code> to <code>z</code>, so that <code>z</code> contains the sum of squares of <code>x</code> and <code>y</code>. Then <code>z</code> is returned from the function in line 4. By default, Python executes code in this one-line-after-another manner. However, there are ways of changing the flow of the program which we will describe in later readings.</p> <p>A local variable is a variable which exists only while the function is executing. It springs into existence when the function is called and disappears when the function returns. The next time the <code>double</code> function is called, it won't \"remember\" its previous <code>z</code> value either; it starts from scratch. If you define this function and try to access the variable <code>z</code> after it returns, Python will tell you that <code>z</code> isn't defined.<sup>2</sup> Variables that aren't local are global variables.<sup>3</sup> Most variables in a Python program will be local variables.</p> <p>Let's say we call this function from the interpreter:</p> <pre><code>&gt;&gt;&gt; sum_of_squares(3, 4)\n25\n</code></pre> <p>So far, so good.  Now if we do:</p> <pre><code>&gt;&gt;&gt; z\n</code></pre> <p>we get this error:</p> <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'z' is not defined\n</code></pre> <p>Tracebacks</p> <p>A traceback is a representation of exactly where in the code Python was when an error occurred, along with an indication of what kind of error occurred. Tracebacks will be explained in detail in a later reading. For now, all you need to know is that it indicates that something went wrong, and there is usually an error message telling you what that was.</p> <p>Here, you can see that there is no value associated with the local variable <code>z</code> when <code>sum_of_squares(3, 4)</code> returns. Interestingly, this is also true of the formal parameters <code>x</code> and <code>y</code>; they behave like local variables as well.</p> <pre><code>&gt;&gt;&gt; sum_of_squares(3, 4)\n25\n&gt;&gt;&gt; x\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'x' is not defined\n&gt;&gt;&gt; y\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'y' is not defined\n</code></pre> <p>Note</p> <p>The fact that the names <code>x</code> and <code>y</code> are not defined after <code>sum_of_squares</code> returns is a good thing! You want your local variables to stay local, so they can't interfere with anything outside the function, and can't be interfered with by anything outside the function.</p>"},{"location":"2/reading2/#global-variables","title":"Global variables","text":"<p>Any variable defined at the top level of the program (which means not inside a function) is a global variable.<sup>4</sup></p> <pre><code># Global variable representing the current year.\nyear = 2024\n</code></pre> <p>A global variable can be used inside any function. In general, though, try not to use global variables if you can help it; local variables are just easier to reason about. Global variables are OK if you don't change them in the program; then they are effectively global constants.</p>"},{"location":"2/reading2/#comments","title":"Comments","text":"<p>One very important thing that all programming languages allow you to do is to write comments in the code. These are \"notes to yourself\" which explain things about the code to anyone reading it. They aren't executed; the computer simply ignores them.</p> <p>Python comment syntax is very simple: a comment starts with the <code>#</code> character and goes until the end of the line it's on.</p> <pre><code># This is a comment.\na = 10  # This is a comment that doesn't span an entire line.\n</code></pre> <p>Comments are one useful way to document your code. There are other ways which we'll see as we go along.</p> <ol> <li> <p>You may also be using a debugger, which is a tool that can run code inside of a code editor and help you walk through the code to find bugs. And you may also be running pre-written tests from the terminal command line.\u00a0\u21a9</p> </li> <li> <p>Unless a different non-local variable named <code>z</code> was defined previously, which we are assuming isn't the case here.\u00a0\u21a9</p> </li> <li> <p>We're oversimplifying here. There are other kinds of variables, and we'll get to them in due time.\u00a0\u21a9</p> </li> <li> <p>Names defined inside a class are also not global variables, but we're keeping things simple for now.\u00a0\u21a9</p> </li> </ol>"},{"location":"3/reading3/","title":"Reading 3: Strings, part 1","text":"<p>The good news about computers is that they do what you tell them to do. The bad news is that they do what you tell them to do. - Ted Nelson</p>"},{"location":"3/reading3/#topics","title":"Topics","text":"<p>In this reading and the next we'll be discussing \"strings\", which is the way text is represented inside computer programs. Strings are a fundamental data type, and are also an example of a Python \"object\". Python is what's called an \"object-oriented\" programming language, so objects are going to be a major topic for the entire course.<sup>1</sup> We will see objects again in a different language when we cover the Java language later in the course.</p> <p>Strings are important for another reason. Many beginning programmers are under the impression that the main thing programs do is work with numbers. While numbers are undoubtedly important, they are not the only kind of data. Strings are at least as important, and in many applications (for instance, web programming) probably more important.</p>"},{"location":"3/reading3/#terminology","title":"Terminology","text":"<p>As we've discussed previously, many terms in programming mean different things than they do in normal conversation. A string in programming doesn't mean something you use to tie things up or something your cat likes to play with. A string in programming is the way the computer represents textual data. Python has extremely good support for strings; using strings in Python is both powerful and easy. Also, there are a lot of useful operators and functions that are predefined in Python for working with strings.</p>  A string, but not a Python string  <p>We'll go over string syntax in detail below, but to cut to the chase, strings are usually represented as a sequence of characters in single quotes, like this:</p> <pre><code>'I am a string'\n</code></pre> <p>Strings are data, and as such can be assigned to variables:</p> <pre><code>s = 'I am a string'\n</code></pre> <p>And strings can be printed to the terminal using the built-in function <code>print</code>:</p> <pre><code>&gt;&gt;&gt; s = 'I am a string'\n&gt;&gt;&gt; print(s)\nI am a string\n</code></pre> <p>When this happens, the quotes are not printed.</p>"},{"location":"3/reading3/#applications","title":"Applications","text":"<p>Strings are one of the most commonly-used data types in computer programs. To give you some examples of things that can be represented as strings:</p> <ul> <li>DNA sequences e.g. <code>'ACCTGGAACT'</code></li> <li>Web pages</li> <li>Documents in text files</li> <li>Computer source code (like your Python programs)</li> </ul> <p>and many, many other kinds of data.</p>"},{"location":"3/reading3/#sequences","title":"Sequences","text":"<p>Strings are the first kind of data we've seen that is an example of a Python sequence. There are other kinds of sequence data types in Python (for instance, lists and tuples), which we will discuss in later readings. Sequences are nice because Python tends to use the same functions, operators and syntax for all sequences in similar ways. So once you've learned how to work with one kind of sequence (like strings), you can use that knowledge with other sequences (like lists), and things will usually do what you expect.</p>"},{"location":"3/reading3/#string-syntaxes","title":"String syntax(es)","text":"<p>Let's face it: syntax is boring. But much like learning your multiplication tables in elementary school, you just have to learn it. If syntax is boring, string syntax is even more boring. We'll give you the essentials here along with links to other documents with more details if you ever need them.</p>"},{"location":"3/reading3/#characters","title":"Characters","text":"<p>Strings are sequences of letters. In programming-speak, letters are referred to as characters. Characters include not only the alphabet letters (<code>a</code> to <code>z</code> and <code>A</code> to <code>Z</code>) but also digits (<code>0</code> through <code>9</code>), punctuation characters, etc. Basically, anything you can type on your keyboard is a character. Some characters are invisible, like newline characters and tab characters. However, they do something when printed; just because you don't see them doesn't mean they aren't real!<sup>2</sup></p> <p>Some programming languages (like Java) have a special data type for characters. Python doesn't; a character is represented by a string of length 1. For instance:</p> <pre><code>'a'  # the character a (letter)\n'1'  # the character 1 (digit)\n'_'  # the underscore character\n'?'  # question mark (symbol)\n</code></pre>"},{"location":"3/reading3/#quotation-marks","title":"Quotation marks","text":"<p>Most of the time, we write strings with single quote marks, not least because it's easy to type on the computer without using the shift key. But Python allows you to use either the single or double-quote character to delimit strings, as long as you use the same character for the start-string and end-string character:</p> <pre><code>'I am a string'\n\"So am I\"\n# \"This is not a valid string'\n# 'Neither is this\"\n</code></pre> <p>(We commented out the invalid strings.)</p> <p>The advantage of allowing both kinds of quote characters is that we can have one kind of quote within another:</p> <pre><code>\"This is a string with 'embedded single quotes'.\"\n'This is the \"same thing\" but with double quotes.'\n</code></pre> <p>This is useful when you want to e.g. print out a string with quotes in it.</p> <pre><code>&gt;&gt;&gt; print(\"Behold a 'quoted string'!\")\nBehold a 'quoted string'!\n</code></pre> <p>If you leave quotation marks off of a string entirely, Python doesn't consider it a string but will try to interpret it as regular Python code. For words, this means that Python will interpret the words as variable names, possibly resulting in an error:</p> <pre><code>&gt;&gt;&gt; foo\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'foo' is not defined\n&gt;&gt;&gt; 'foo'\n'foo'\n</code></pre> <p>If you try to embed a quote character inside a string that uses the same quote character as its delimiters, you get a syntax error:</p> <pre><code>&gt;&gt;&gt; s = 'this isn't going to work'\n</code></pre> <p>Python will respond:</p> <pre><code>  File \"&lt;stdin&gt;\", line 1\n    s = 'this isn't going to work'\n                  ^\nSyntaxError: invalid syntax\n</code></pre> <p>A syntax error means that you broke the syntax rules of Python. Here, Python thinks that the string ends with the <code>n</code> i.e.</p> <pre><code>s = 'this isn'\n</code></pre> <p>and then it can't make sense of <code>t going to work'</code>, so it aborts with an error. If the outer quotes were double quotes, it would work:</p> <pre><code>&gt;&gt;&gt; s = \"this isn't going to work\"\n&gt;&gt;&gt; s\n\"this isn't going to work\"\n</code></pre> <p>Of course, now the string <code>s</code> is telling you a lie about itself, but that's not our problem.</p>"},{"location":"3/reading3/#empty-string","title":"Empty string","text":"<p>If you need an empty string, you just write two quote characters one after another:</p> <pre><code>''  # empty string\n\"\"  # also empty string\n</code></pre> <p>You might think an empty string is completely useless, but it's not. Often you start with an empty string and add characters to it to create a longer string. (We'll see examples of this later.)</p> <p>Note that a string which contains only a space character is not an empty string:</p> <pre><code>' '  # a string containing a space character; not empty!\n</code></pre>"},{"location":"3/reading3/#whitespace-characters","title":"Whitespace characters","text":"<p>There are characters that don't actually print characters but make something else happen. The space character is one of them; it doesn't really \"print a space\", it simply moves the location where printing can happen over by one character width. (Nevertheless, we will still say that it \"prints a space\" because it's easier to write.) Characters like this are collectively called whitespace characters. There are three of these in common use: the space character, the newline character, and the tab character. The newline character makes the string skip to the beginning of the next line when printed. The tab character is like some number of spaces (the specific number depends on the terminal or editor settings). In Python, these characters are represented as follows:</p> character Python equivalent space <code>' '</code> or <code>\" \"</code> tab <code>'\\t'</code> or <code>\"\\t\"</code> newline <code>'\\n'</code> or <code>\"\\n\"</code> <p>Usually, these characters are inside of a string or at one or both ends of a string:</p> <pre><code>'    this is a string with spaces inside and on each end   '\n'this is a string with a newline at the end\\n'\n'this\\tis\\ta\\tstring\\twith\\twords\\tseparated\\tby\\ttabs'\n</code></pre> <p>It's important to understand that when you put e.g. a <code>\\n</code> inside a string, Python does not interpret this as the backslash character followed by the <code>n</code> character. Instead, it treats both of them as a single thing: a newline character.<sup>3</sup></p>"},{"location":"3/reading3/#escape-sequences","title":"Escape sequences","text":"<p>The notation <code>\\n</code> for a newline character or <code>\\t</code> for a tab character is a bit odd, because you are using two characters to stand for a single character. Python refers to such characters as escape sequences because you are \"escaping\" from the normal rules of how strings are constructed in order to put special characters into the string.</p> <p>There are a number of escape characters that Python recognizes; a full list is here, but you don't need to know it. For our purposes, the only ones we'll need are these:</p> escape sequence meaning <code>\\t</code> tab <code>\\n</code> newline <code>\\'</code> single quote character (even inside single-quoted string) <code>\\\"</code> double quote character (even inside double-quoted string) <code>\\\\</code> backslash character <p>You might wonder why we need the last three. You can use the escaped quote characters if you want to put a quote character inside a string which uses the same quote character as its delimiter.</p> <pre><code>'single quotes \\'inside\\' single quoted string'\n\"double quotes \\\"inside\\\" double quoted string\"\n</code></pre> <p>Usually, it's better to rewrite this by using a different quote character to create the string:</p> <pre><code>\"single quotes 'inside' a single quoted string\"\n'double quotes \"inside\" a double quoted string'\n</code></pre> <p>Sometimes we can't do this, like if we are already using both kinds of characters:</p> <pre><code>'this is a \"very messy \\'example\\' of\" nested quotes'\n</code></pre> <p>However, this is extremely rare.</p> <p>Since the backslash (<code>\\</code>) character is already used to mean the start of an escape sequence, what do we do if we want to put a literal backslash character inside a string? We use an escaped backslash, of course! This amounts to a double-backslash:</p> <pre><code>&gt;&gt;&gt; print('a string with a \\\\ backslash inside it')\na string with a \\ backslash inside it\n</code></pre> <p>When you enter a literal strings with escapes into the Python interpreter without using <code>print</code>, it shows you the escaped characters the way you would type them:</p> <pre><code>&gt;&gt;&gt; print('a string with a \\\\ backslash inside it')\na string with a \\ backslash inside it\n&gt;&gt;&gt; 'a string with a \\\\ backslash inside it'\n'a string with a \\\\ backslash inside it'\n</code></pre>"},{"location":"3/reading3/#strings-are-immutable","title":"Strings are immutable","text":"<p>A string is a fixed, or immutable object. Once you create a string, you can't change any of the letters inside the string. Instead, you would have to create a new string:</p> <pre><code>here = \"Caltexh\"  # oops!\nhere = \"Caltech\"  # fixed!\n</code></pre> <p>There are reasons for this that we will get to later, but for now, just be aware that you can't change the letters in a string after you create it.</p> <ol> <li> <p>Many programming languages are object-oriented: Java and C++ are two common examples. Some languages, like C, are not.\u00a0\u21a9</p> </li> <li> <p>You're science students, so you're used to this by now  \u21a9</p> </li> <li> <p>There is a way to make Python interpret it as a backslash followed by an <code>n</code>, which is <code>\\\\n</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"4/reading4/","title":"Reading 4: Strings, part 2","text":"<p>To err is human, but to really foul things up you need a computer. - Paul Erlich</p>"},{"location":"4/reading4/#topics","title":"Topics","text":"<p>This reading continues our discussion of strings. We'll go into more depth on strings and what you can do with them.</p>"},{"location":"4/reading4/#string-operations","title":"String operations","text":"<p>There are many useful string operations that are built in to Python. Some of them are operators (symbols) that work on strings; others are functions that work on strings. Still others are methods on string objects (methods will be covered in the next reading).</p>"},{"location":"4/reading4/#indexing","title":"Indexing","text":"<p>One basic thing we might want to do with a string is to extract a character from the string. We do this using Python's indexing operator, which is a pair of square brackets surrounding an integer index.</p> <pre><code>&gt;&gt;&gt; s = 'I am a string'\n&gt;&gt;&gt; s[0]\n'I'\n&gt;&gt;&gt; s[1]\n' '\n&gt;&gt;&gt; s[2]\n'a'\n</code></pre> <p>The first character of the string is <code>s[0]</code> which is the character <code>'I'</code> (actually a string of length 1). The second character is <code>s[1]</code>, which is a space character, the third is <code>s[2]</code>, which is <code>'a'</code>, and so on. Locations of characters in a string are called indices (plural of index), and they start at <code>0</code>, not <code>1</code>. The same kind of indexing is used for all Python sequence types (e.g. lists, tuples as well as strings) and we'll discuss it in more detail when we talk about lists.</p>"},{"location":"4/reading4/#length","title":"Length","text":"<p>To get the \"length\" of a string (i.e. the number of characters in the string) use the built-in <code>len</code> function:</p> <pre><code>&gt;&gt;&gt; len('')\n0\n&gt;&gt;&gt; len('Caltech')\n7\n&gt;&gt;&gt; len('MIT')\n3\n&gt;&gt;&gt; len('Caltech') &gt; len('MIT')\nTrue\n</code></pre> <p>Like the indexing operator, the <code>len</code> function can be used on any kind of sequence, not just on strings.</p>"},{"location":"4/reading4/#concatenation","title":"Concatenation","text":"<p>A common operation with strings is combining two strings to make a bigger string. In Python, this is done using the <code>+</code> operator, as if you were \"adding\" the two strings together:</p> <pre><code>&gt;&gt;&gt; 'foo' + 'bar'\n'foobar'\n&gt;&gt;&gt; s1 = 'Cal'\n&gt;&gt;&gt; s2 = 'tech'\n&gt;&gt;&gt; s3 = s1 + s2\n&gt;&gt;&gt; s3\n'Caltech'\n</code></pre> <p>The technical name for this is string concatenation. Of course, this isn't really addition, but for convenience we use the <code>+</code> operator anyway. This leads us into the next topic!</p>"},{"location":"4/reading4/#operator-overloading","title":"Operator overloading","text":"<p>Even though we like to use analogies between math and computer programming, there are lots of ways in which computer programs are different from math. One way is that operators like <code>+</code> are sometimes used for things that aren't arithmetic; string concatenation is a good example. We call this operator overloading; we are \"overloading\" the <code>+</code> operator to mean something that it wouldn't usually mean.</p> <p>Every programming language does operator overloading differently. Some don't allow it at all. Python overloads operators when it makes code easier to understand and more concise. We'll see other examples of this as we go along.</p>"},{"location":"4/reading4/#pitfalls","title":"Pitfalls","text":"<p>A pitfall is something that's easy to get wrong or easy to get confused about. We will talk a lot about pitfalls in this course.</p> <p>Here's a potential pitfall with string concatenation:</p> <pre><code>&gt;&gt;&gt; s1 = '12'\n&gt;&gt;&gt; s2 = '34'\n&gt;&gt;&gt; s1 + s2\n'1234'\n</code></pre> <p>Were you expecting <code>'46'</code>? When Python concatenates strings, it doesn't try to interpret the strings; it doesn't \"know\" that <code>'12'</code> is the string representation of a number.</p> <p>This doesn't work either:</p> <pre><code>&gt;&gt;&gt; s1 = 12\n&gt;&gt;&gt; s2 = '34'\n&gt;&gt;&gt; s1 + s2\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n</code></pre> <p>Python won't auto-convert the string <code>s2</code> to an integer to make the addition work, nor will it auto-convert the integer <code>s1</code> to a string to make string concatenation work. In general, Python won't \"guess\" what you want; if it's not totally explicit, it will just fail. This may annoy you but it's actually a good thing.<sup>1</sup></p>"},{"location":"4/reading4/#string-multiplication","title":"String \"multiplication\"","text":"<p>Python also overloads the multiplication (<code>*</code>) operator when used with an integer \"multiplied\" by a string or vice-versa. In this case, it means string replication: the string is copied that number of times to make a new string.</p> <pre><code>&gt;&gt;&gt; s = 'foo'\n&gt;&gt;&gt; s\n'foo'\n&gt;&gt;&gt; s * 3\n'foofoofoo'\n&gt;&gt;&gt; 3 * s\n'foofoofoo'\n&gt;&gt;&gt; s * s   # oops! can't multiply strings!\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't multiply sequence by non-int of type 'str'\n</code></pre> <p>The error message is telling us that we can only multiply a string by an integer, not by another string.</p> <pre><code>&gt;&gt;&gt; s = 'foo'\n&gt;&gt;&gt; s * 0    # multiply string x 0 = empty string\n''\n&gt;&gt;&gt; 0 * s\n''\n&gt;&gt;&gt; -1 * s   # this doesn't reverse strings, sorry!\n''\n&gt;&gt;&gt; 0.5 * s  # half-characters not supported, sorry!\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't multiply sequence by non-int of type 'float'\n</code></pre>"},{"location":"4/reading4/#convert-to-string","title":"Convert to string","text":"<p>If you need to explicitly convert something to a string, use the built in function <code>str</code>:</p> <pre><code>&gt;&gt;&gt; str(12)\n'12'\n&gt;&gt;&gt; str(1.234)\n'1.234'\n&gt;&gt;&gt; str('foo')\n'foo'\n</code></pre> <p>Converting a string to a string doesn't change the string, as you might expect. But converting an integer or a float to a string creates a completely different kind of value.</p>"},{"location":"4/reading4/#printing-to-the-terminal","title":"Printing to the terminal","text":"<p>If you want to print a string to the terminal, you use the built-in <code>print</code> function, which we've seen already:</p> <pre><code>&gt;&gt;&gt; print(42)\n42\n&gt;&gt;&gt; print(3.1415926)\n3.1415926\n&gt;&gt;&gt; print('foobar')\nfoobar\n</code></pre> <p>A few things to notice here:</p> <ul> <li> <p><code>print</code> works on any Python value, not just strings. You don't have to use the <code>str</code> function to convert values to strings inside the <code>print</code> call; the <code>print</code> function takes care of that.</p> </li> <li> <p><code>print</code> advances to the next line after printing. Technically, what it does is print a newline character after printing the Python value. There is a way to suppress the newline character, which we'll see below.</p> </li> <li> <p>Printing to the terminal is not the same as returning a value from a function. This is an easy thing to get confused about (a pitfall!). Look at this:</p> </li> </ul> <pre><code>&gt;&gt;&gt; print(42)\n42\n&gt;&gt;&gt; 42\n42\n</code></pre> <p>It looks the same, right? But what's happening is totally different. Let's say you had this Python code in a file:</p> <pre><code>print(42)\n42\n</code></pre> <p>When you ran this file though Python, only the first line would print anything. The second line wouldn't do anything at all. But in the Python interactive interpreter, Python automatically prints any expression entered, which makes it look like these are the same thing, which isn't the case.</p> <p>The difference is more obvious with strings:</p> <pre><code>&gt;&gt;&gt; print('foobar')\nfoobar\n&gt;&gt;&gt; 'foobar'\n'foobar'\n</code></pre> <p>When the interactive interpreter prints the value of a string without using the <code>print</code> function, it adds the quotes so that you know the value is a string. Again, this won't happen if you wrote the Python code in a file; when you ran the file through Python you would just see:</p> <pre><code>foobar\n</code></pre>"},{"location":"4/reading4/#suppressing-the-newline-character","title":"Suppressing the newline character","text":"<p>As mentioned above, you can change the default behavior of printing a newline character after printing the value by adding an extra argument.</p> <p>Consider this code (we'll assume it's in a file):</p> <pre><code># Normal use of print:\nprint(10)\nprint(20)\nprint(30)\n</code></pre> <p>which results in this when run:</p> <pre><code>10\n20\n30\n</code></pre> <p>Notice that each number is printed on a separate line. Now look at this:</p> <pre><code># Print without printing a newline at the end:\nprint(10, end='')\nprint(20, end='')\nprint(30, end='')\n</code></pre> <p>which results in:</p> <pre><code>102030\n</code></pre> <p>The <code>end=''</code> argument is called a keyword argument. We'll talk more about keyword arguments later in the course, but just take it on faith that this is what you need to do if you don't want to print a newline character after printing a value using the <code>print</code> function.</p> <p>Conversely, if you just want to print a newline character, just do this:</p> <pre><code>print()\n</code></pre> <p>Writing e.g. <code>print('')</code> will also work, but it's bad style since it's more complicated than it needs to be.</p> <p>Coding style</p> <p>There are many ways of writing code that work, but that are still \"bad\" in various ways. Some of these ways are referred to as being \"bad coding style\". Writing a longer expression (like <code>print('')</code>) where a shorter expression (like <code>print()</code>) will do is an example of poor style, because the <code>''</code> in the argument to <code>print</code> is unnecessary. Don't worry too much about this now; the assignments will contain exercises to help you work on your coding style.</p>"},{"location":"4/reading4/#multiline-strings","title":"Multiline strings","text":""},{"location":"4/reading4/#single-line-strings-are-the-default","title":"Single-line strings are the default","text":"<p>By default, a string in Python spans a single line only. If you try to extend the string to the next line, you get a syntax error:</p> <pre><code>&gt;&gt;&gt; 'this is a string'\n'this is a string'\n&gt;&gt;&gt; 'I want to write a multiline string\n  File \"&lt;stdin&gt;\", line 1\n    'I want to write a multiline string\n                                       ^\nSyntaxError: EOL while scanning string literal\n</code></pre> <p>This error message says \"while trying to read a string literal, I encountered a newline (End Of Line or EOL) character, which is a syntax error\". So that doesn't work.</p>"},{"location":"4/reading4/#manually-creating-multiline-strings","title":"Manually creating multiline strings","text":""},{"location":"4/reading4/#putting-in-newlines","title":"Putting in newlines","text":"<p>You can create a multiline string manually by putting in newline characters:</p> <pre><code>&gt;&gt;&gt; s = 'I want to write a multiline string\\nlike this.'\n&gt;&gt;&gt; s\n'I want to write a multiline string\\nlike this.'\n&gt;&gt;&gt; print(s)\nI want to write a multiline string\nlike this.\n</code></pre> <p>However, in this case the string you type still has to be all on one physical line, which is often not what you want.</p>"},{"location":"4/reading4/#concatenating-strings-and-the-line-continuation-character","title":"Concatenating strings and the line continuation character","text":"<p>You could fix that by using string concatenation:</p> <pre><code>&gt;&gt;&gt; s = 'I want to write a multiline string\\n' + \\\n'like this.'\n&gt;&gt;&gt; print(s)\nI want to write a multiline string\nlike this.\n</code></pre> <p>Since Python executes code a line at a time, and the string concatenation spans multiple lines, you have to write the line continuation character at the end of the line, which you type with a backslash followed by the return key.<sup>2</sup> If you don't, then this happens:</p> <pre><code>&gt;&gt;&gt; s = 'I want to write a multiline string\\n' +\n  File \"&lt;stdin&gt;\", line 1\n    s = 'I want to write a multiline string\\n' +\n                                                ^\nSyntaxError: invalid syntax\n</code></pre> <p>This is not Python's finest error message, but it's telling you that the <code>+</code> expression isn't finished.</p> <p>The point of all this is that you can manually create multiline strings, but it's a pain. You have to remember to put in the newline characters and the line continuation characters. You also have to type <code>+</code> characters between the strings. There should be a better way.</p> <p>Line continuation character</p> <p>The line continuation character can be used for any long Python expression that won't fit on a single line, not just for concatenating strings. For instance:</p> <pre><code>first_20_ints = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + \\\n16 + 17 + 18 + 19 + 20\n</code></pre> <p>Try not to use it, though, because it's ugly and hard to read. On the other hand, very long lines are also hard to read, so use it when necessary to prevent lines from getting too long.</p>"},{"location":"4/reading4/#a-better-way-triple-quoted-strings","title":"A better way: triple-quoted strings","text":"<p>The better way is to use triple-quoted strings. To do this you use not one, not two, but three (3) quote characters to both begin and end a string. You can use either kind of quote character (single quote (<code>'</code>) or double quote (<code>\"</code>)) as long as all three of the quote characters are the same, and the same kind of quote characters are used at the beginning and end of the string.</p> <p>Triple-quoted strings can span multiple lines, though they don't have to.</p> <pre><code>&gt;&gt;&gt; '''I am a triple-quoted string!'''\n'I am a triple-quoted string!'\n&gt;&gt;&gt; '''As a triple-quoted string,\nI can span\nmultiple\nlines!\n'''\n'As a triple-quoted string,\\nI can span\\nmultiple\\nlines!\\n'\n</code></pre> <p>Notice that the Python interpreter converts triple-quoted strings to single-line strings before printing them back out. But if you use the <code>print</code> function:</p> <pre><code>&gt;&gt;&gt; print('''As a triple-quoted string,\nI can span\nmultiple\nlines!\n''')\nAs a triple-quoted string,\nI can span\nmultiple\nlines!\n</code></pre> <p>then you see the multiline-ness of the output string. Or we could bind a multiline string to a variable:</p> <pre><code>&gt;&gt;&gt; msg = '''\nThis is\na\nmultiline\nstring.'''\n&gt;&gt;&gt; print(msg)\n\nThis is\na\nmultiline\nstring.\n</code></pre> <p>Question</p> <p>Why is there a blank line before the <code>This is</code> when using the <code>print</code> function in this particular case? What would the call to <code>print</code> have to look like if you didn't want the blank line?</p> <p>Fun fact: inside a triple-quoted string, you can put any other kind of string:</p> <ol> <li>single-line strings surrounded by the <code>'</code> character</li> <li>single-line strings surrounded by the <code>\"</code> character</li> <li>the other kind of triple-quoted string (<code>\"\"\"</code> if your string uses <code>'''</code> or vice-versa).</li> </ol> <p>Also, escape sequences still work inside triple-quoted strings.</p>"},{"location":"4/reading4/#an-application","title":"An application","text":"<p>A web page can be written as a single multiline string:</p> <pre><code>'''&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;My home page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Welcome to my home page!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;'''\n</code></pre> <p>Don't worry if you don't understand the syntax. It's HTML (HyperText Markup Language), which is a formatting language used for writing web pages. Python doesn't understand HTML either; as far as Python is concerned, it's just a string.</p> <p>Compare this to how we would write it without multiline strings:</p> <pre><code>'&lt;html&gt;\\n' + \\\n'&lt;head&gt;\\n' + \\\n'&lt;title&gt;My home page&lt;/title&gt;\\n' + \\\n'&lt;/head&gt;\\n' + \\\n'&lt;body&gt;\\n' + \\\n'&lt;p&gt;Welcome to my home page!&lt;/p&gt;\\n' + \\\n'&lt;/body&gt;\\n' + \\\n'&lt;/html&gt;'\n</code></pre> <p>Ouch!  Now you see why multiline strings are useful!</p>"},{"location":"4/reading4/#string-formatting","title":"String formatting","text":"<p>It's often the case that we want to print out a string which contains Python values embedded inside it. For instance, you might want to print the value of a Python expression while debugging, or maybe you're writing a report and you need to print out some data that the report summarizes. You can always convert a Python value to a string using the <code>str</code> method and combine that with actual strings using string concatenation:</p> <pre><code>&gt;&gt;&gt; rainfall = 100\n&gt;&gt;&gt; print('The rainfall was ' + str(rainfall) + ' inches.'))\nThe rainfall was 100 inches.\n</code></pre> <p>However, this is not very pleasant to write.</p>"},{"location":"4/reading4/#the-format-method","title":"The <code>format</code> method","text":"<p>A much more flexible way to do this is to use string formatting. String formatting works by creating a template string, which contains everything you want to print except for some placeholders where Python values should go. You supply those values later, and they are converted into strings and put into the template string, returning a new string. (Note that this has nothing to do with printing, though we usually do it right before printing the string.)</p> <pre><code>&gt;&gt;&gt; rainfall = 100\n&gt;&gt;&gt; s = 'The rainfall was {} inches.'.format(rainfall)\n&gt;&gt;&gt; print(s)\nThe rainfall was 100 inches.\n</code></pre> <p>Here, the template string is <code>'The rainfall was {} inches.'</code>. Inside the template string, the placeholder characters are <code>{}</code>.</p> <p>The important part is the <code>.format(rainfall)</code> part of the second line. This is a method call on the string <code>'The rainfall was {} inches'</code>. We will talk more about method calls in the next reading (they're part of object-oriented programming), but for now just take it on faith that this works. What it does is to convert the Python value <code>rainfall</code> to a string and put it into the template string where the <code>{}</code> placeholder characters are. Then it returns the new string (the template string itself isn't changed).</p> <p>Note</p> <p>A template string is just a regular Python string; there's nothing special about it. However, the contents of the template string are processed by the <code>format</code> method call, which creates a new string with the placeholder characters replaced by whatever is supposed to go there.</p> <p>Normally we do everything inside a <code>print</code> call:</p> <pre><code>&gt;&gt;&gt; rainfall = 100\n&gt;&gt;&gt; print('The rainfall was {} inches.'.format(rainfall))\nThe rainfall was 100 inches.\n</code></pre> <p>There's also a shortcut way of writing this that is more concise:</p> <pre><code>&gt;&gt;&gt; rainfall = 100\n&gt;&gt;&gt; print(f'The rainfall was {rainfall} inches.')\nThe rainfall was 100 inches.\n</code></pre> <p>We will talk more about this syntax in later readings.</p>"},{"location":"4/reading4/#format-specifiers","title":"Format specifiers","text":"<p>Tip</p> <p>You may want to skip this section for now, and come back to it later. Most of the time you won't need to use format specifiers, but if you need to do very specific kinds of string formatting, the information in this section will be helpful.</p> <p>We will not give all the details here; instead, we'll present a simplified version of what you can do with format specifiers. If you do need the full details, the Python documentation on the string formatting \"mini-language\" is located here.</p> <p>There are many, many things you can do with string formatting. If you are formatting a floating-point number, you can specify the number of decimal places it has. You can specify a maximum width for the string which replaces the placeholder, or whether it's padded to the left or the right or centered. These specifiers go inside the <code>{}</code> placeholder characters. Most of the time, we just use <code>{}</code> because it's good enough for our needs. However, there are a few format specifiers that are generally useful, so we'll discuss those now.</p> <p>There are two parts to format specifiers:</p> <ol> <li>argument numbers</li> <li>formatting directives</li> </ol> <p>Both parts are optional. If you don't need either part, use <code>{}</code>.</p> <p>The first part is the argument number of the <code>format</code> method call, which is an integer (<code>0</code> or greater). So <code>{0}</code> means \"the first argument in the <code>format</code> call\", <code>{1}</code> means \"the second argument in the <code>format</code> call, etc.  If you don't specify this, it chooses the next argument that hasn't already been used, so the first <code>{}</code> would get the first argument of the <code>format</code> method call, the second <code>{}</code> would get the second, etc.</p> <p>The second part of the format specifier starts with the colon (<code>:</code>) character and contains formatting directives.<sup>3</sup> If you don't need the argument number, then the format specifier as a whole starts with the colon.</p> <p>Strings use the <code>'s'</code> directive. You can specify a string as having a particular field width, and it can be left-justified, centered, or right-justified within that width. If the string argument is smaller than the field width, spaces are used for padding.</p> <pre><code>&gt;&gt;&gt; '{:s}'.format('foo')\n'foo'\n&gt;&gt;&gt; '{:10s}'.format('foo')    # field width 10\n'foo       '\n&gt;&gt;&gt; '{:&lt;10s}'.format('foo')   # field width 10, left (&lt;) justified\n'foo       '\n&gt;&gt;&gt; '{:^10s}'.format('foo')   # field width 10, center (^) justified\n'   foo    '\n&gt;&gt;&gt; '{:&gt;10s}'.format('foo')   # field width 10, right (&gt;) justified\n'       foo'\n</code></pre> <p>Integers use the <code>'d'</code> directive. You can specify an integer has having a particular field width, and again it can be left-, center-, or right-justified.</p> <pre><code>&gt;&gt;&gt; '{:d}'.format(42)\n'42'\n&gt;&gt;&gt; '{:10d}'.format(42)\n'        42'\n&gt;&gt;&gt; '{:&lt;10d}'.format(42)\n'42        '\n&gt;&gt;&gt; '{:^10d}'.format(42)\n'    42    '\n&gt;&gt;&gt; '{:&gt;10d}'.format(42)\n'        42'\n</code></pre> <p>Floating-point numbers use either the <code>'f'</code> or the <code>'g'</code> directives.<sup>4</sup> In addition to the field width and left-, center-, or right-justification specifiers already described, you can specify the number of decimal places to print using a decimal point followed by an integer:</p> <pre><code>&gt;&gt;&gt; '{:f}'.format(3.14159265358979)\n'3.141593'\n&gt;&gt;&gt; '{:.2f}'.format(3.14159265358979)\n'3.14'\n&gt;&gt;&gt; '{:10.2f}'.format(3.14159265358979)\n'      3.14'\n&gt;&gt;&gt; '{:&lt;10.2f}'.format(3.14159265358979)\n'3.14      '\n&gt;&gt;&gt; '{:^10.2f}'.format(3.14159265358979)\n'   3.14   '\n&gt;&gt;&gt; '{:&gt;10.2f}'.format(3.14159265358979)\n'      3.14'\n&gt;&gt;&gt; '{:10.6f}'.format(3.14159265358979)\n'  3.141593'\n&gt;&gt;&gt; '{:10.6f}'.format(3.1)\n'  3.100000'\n</code></pre> <p>The <code>f</code> directive will always use the specified number of decimal places, even if it means adding extra (\"trailing\") zeros. To suppress trailing zeros, use the <code>g</code> directive instead.</p> <pre><code>&gt;&gt;&gt; '{:g}'.format(3.14159265358979)\n'3.14159'\n&gt;&gt;&gt; '{:.2g}'.format(3.14159265358979)\n'3.1'\n&gt;&gt;&gt; '{:10.2g}'.format(3.14159265358979)\n'       3.1'\n&gt;&gt;&gt; '{:&lt;10.2g}'.format(3.14159265358979)\n'3.1       '\n&gt;&gt;&gt; '{:^10.2g}'.format(3.14159265358979)\n'   3.1    '\n&gt;&gt;&gt; '{:&gt;10.2g}'.format(3.14159265358979)\n'       3.1'\n&gt;&gt;&gt; '{:10.6g}'.format(3.14159265358979)\n'   3.14159'\n&gt;&gt;&gt; '{:10.6g}'.format(3.1)\n'       3.1'\n</code></pre> <p>Notice also that the <code>g</code> directive uses the number after the decimal point to specify the total number of significant figures, not the number of decimal places.</p> <p>If you actually need to put curly braces inside format strings, you have to double them up:</p> <pre><code>&gt;&gt;&gt; '{{}}'.format()\n'{}'\n&gt;&gt;&gt; '{{'.format()\n'{'\n&gt;&gt;&gt; '}}'.format()\n'}'\n</code></pre> <p>There are a lot more things you can do with format strings, and we encourage you to consult the Python documentation if you need to do something more complicated than what we've described here.</p>"},{"location":"4/reading4/#the-application-revisited","title":"The application revisited","text":"<p>One problem with the multiline version of the web page given above is that it's totally static; it only represents a particular web page. Often you would like to create a template for a web page with things that can be added in later. A simple example would be to add the name of the user whose home page it is. Since the same code could be used for multiple users, it makes sense to write a template string with placeholders where the name should go. This leads to this kind of code:</p> <pre><code>template = '''&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{}'s home page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Welcome to {}'s home page!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;'''\n\nprint(template.format('Mike', 'Mike'))\n</code></pre> <p>When run, this will print out:</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Mike's home page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Welcome to Mike's home page!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Things to notice:</p> <ul> <li> <p>You can use the <code>format</code> method on a literal string or on a string variable (here, the variable is called <code>template</code>).</p> </li> <li> <p>You can have more than one placeholder (<code>{}</code>); here there are two. They are filled in with arguments to the <code>format</code> method in order. Here, both of them are the string <code>'Mike'</code>.</p> </li> </ul> <p>Now the multiline string is much more useful; you can use it to generate a whole family of similar web pages. (There are much more sophisticated web templating systems available in Python, but the idea is basically the same.)</p> <p>If you don't want to repeat the name <code>Mike</code> in the arguments to <code>format</code>, there is a way to do it:</p> <pre><code>template = '''&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;{0}'s home page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Welcome to {0}'s home page!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;'''\n\nprint(template.format('Mike'))\n</code></pre> <p>The <code>{0}</code> formatting directive says to use \"argument 0\" which means the first argument of the <code>format</code> method.<sup>5</sup></p> <ol> <li> <p>The \"Zen of Python\" states that \"explicit is better than implicit\" and this is one example of that. To see the full Zen of Python, start up the Python interpreter and type <code>import this</code>.\u00a0\u21a9</p> </li> <li> <p>This is not a string escape because it's in source code, not inside a string, but if you do it inside a string then the newline will simply be ignored. There are some situations where you don't have to use a backslash-return to continue a line, but it's never wrong to use it if the statement doesn't all fit on one line.\u00a0\u21a9</p> </li> <li> <p>This is not standard terminology; the Python documentation also calls these format specifiers. I didn't want \"format specifier\" to mean two different things.\u00a0\u21a9</p> </li> <li> <p>There is also an <code>e</code> directive for exponent notation, but you probably don't need it.\u00a0\u21a9</p> </li> <li> <p>Programming languages almost always start counting from 0, not 1.\u00a0\u21a9</p> </li> </ol>"},{"location":"5/reading5/","title":"Reading 5: Objects and Methods","text":"<p>A graphic representation of data abstracted from banks of every computer in the human system. Unthinkable complexity. Lines of light ranged in the nonspace of the mind, clusters and constellations of data. Like city lights, receding. - William Gibson, Neuromancer</p>"},{"location":"5/reading5/#overview","title":"Overview","text":"<p>We've covered many of the essential aspects of Python programming, but we still have a way to go! In this reading we'll talk about what an \"object\" is, what \"methods\" do and how they are related to functions, and how Python is an \"object-oriented language\". We will use strings as a simple example of an object, but we will see many more kinds of objects later on.</p> <p>Info</p> <p>In fact, in Python all data are represented as objects. Even functions are objects.</p>"},{"location":"5/reading5/#topics","title":"Topics","text":"<ul> <li> <p>Terminal input using the <code>input</code> function</p> </li> <li> <p>Objects and methods</p> </li> </ul>"},{"location":"5/reading5/#terminal-input","title":"Terminal input","text":"<p>This is not really about objects and methods, but we have to put it somewhere, so we're putting it here .</p> <p>We'd like to be able to write interactive programs, where you (the user) and the program have a \"dialogue\". You do something, the program responds, you respond to the program, and so forth. There are many ways to do this, but the most basic way is to allow the program to read a line of input typed at the terminal. When the program wants a response from you, it asks you for a line of input. You type it in and hit the return key, then the program does something with that line of input, and so on. In Python, we do this using the <code>input</code> function:</p> <pre><code>&gt;&gt;&gt; input()\n*This is what you type.*\n'This is what you type.'\n</code></pre> <p>Note</p> <p>We've put asterisks around the text that you would type into the terminal for the <code>input()</code> function call. You wouldn't actually type the asterisks.</p> <p>The line under the <code>input()</code> call is what you type literally at the keyboard (try it!). When you're done, hit the return key and Python prints the string it received.</p> <p>This isn't how you actually use <code>input</code>, of course. You almost always store the line read into a variable:</p> <pre><code>&gt;&gt;&gt; answer = input()\n*This is my answer.*\n&gt;&gt;&gt; answer\n'This is my answer.'\n</code></pre> <p>Now you can use the value of <code>answer</code> to do something in your program. One other thing that would be nice is if <code>input</code> could print a prompt, which is a string that indicates what it is expecting of you. To use a prompt, add a string argument to <code>input</code>:</p> <pre><code>&gt;&gt;&gt; answer = input('Please answer \"yes\" or \"no\": ')\nPlease answer \"yes\" or \"no\": *yes*\n&gt;&gt;&gt; answer\n'yes'\n</code></pre> <p>The only thing that the user entered in this example was the word <code>yes</code>, which becomes the value of the <code>answer</code> variable.</p> <p>Question</p> <ol> <li> <p>Why are the words <code>\"yes\"</code> and <code>\"no\"</code> in the prompt string written with double quotes?</p> </li> <li> <p>Why is there a blank space at the end of the prompt string?</p> </li> </ol> <p>Type this example into Python yourself, and play around with it to get familiar with how the <code>input</code> function works.</p>"},{"location":"5/reading5/#using-input-to-input-integers-and-other-non-strings","title":"Using <code>input</code> to input integers and other non-strings","text":"<p>One thing to be careful about is that <code>input</code> always returns a string, even if you intended it to return e.g. an integer. For instance, look at this code:</p> <pre><code>i = input('Enter an integer: ')\nj = input('Enter another integer: ')\nprint('The sum of the two integers is {}'.format(i + j))\n</code></pre> <p>Here's a sample run:</p> <pre><code>Enter an integer: *42*\nEnter another integer: *101*\nThe sum of the two integers is 42101\n</code></pre> <p>What went wrong?</p> <p>Remember, computer languages are dumb and they don't know what you want them to do unless you spell it out exactly. Here, the <code>input</code> function always returns a string, so the variables <code>i</code> and <code>j</code> contain the strings <code>'42'</code> and <code>'101'</code>, respectively. When you \"add\" two strings, you actually concatenate them, so you get the result <code>'42101'</code>. To avoid this, you have to tell Python to convert the result of the <code>input</code> call to an integer using the <code>int</code> conversion function. Here's the right way to do this:</p> <pre><code>i = int(input('Enter an integer: '))\nj = int(input('Enter another integer: '))\nprint('The sum of the two integers is {}'.format(i + j))\n</code></pre> <p>Now look at what happens when we run it:</p> <pre><code>Enter an integer: *42*\nEnter another integer: *101*\nThe sum of the two integers is 143\n</code></pre> <p>This time it works, because of the calls to the <code>int</code> function which converts the string output from <code>input</code> to integers. Again, please play around with this in the interpreter so you understand exactly how it works.</p> <p>You can convert strings to more than just integers. You can also convert strings to floating-point numbers with the <code>float</code> function:</p> <pre><code>&gt;&gt;&gt; pi = float('3.1415926')\n&gt;&gt;&gt; pi\n3.1415926\n&gt;&gt;&gt; 4.0 * pi\n12.5663704\n</code></pre> <p>Exceptions</p> <p>You might wonder what happens if you try to convert a string to a float (or an integer) which is not the string representation of a valid float (or integer). For example:</p> <pre><code>&gt;&gt;&gt; pi = float('foobar')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: could not convert string to float: 'foobar'\n</code></pre> <p>In this case, Python handles the error by raising an exception and printing a traceback. We will talk a lot more about exceptions and traceback in future readings.</p> <p>OK, that's enough about <code>input</code>.  On to objects!</p>"},{"location":"5/reading5/#objects-and-methods","title":"Objects and methods","text":"<p>You've probably heard the term \"object-oriented\" as in \"Python (or Java, or C++) is an object-oriented programming language\". What does that mean?</p> <p>The exact meaning of \"object-oriented\" differs between languages, but for Python, it means that all data values are represented as objects. OK, great, so what is an object?</p> <p>An object is some kind of Python data along with some associated functions that act on the data. (You can think of the data and the functions as begin \"bound together\" to create an object.) The functions that act on the object are called methods to distinguish them from regular functions. Unlike a function, a method \"belongs\" to a particular object and has access to the object's internal components.<sup>1</sup></p> <p>Let's look at the syntax of method calls.</p>"},{"location":"5/reading5/#method-call-syntax-dot-syntax","title":"Method call syntax (\"dot syntax\")","text":"<p>We know that function calls have a very specific syntax: the name of the function, followed by a list of arguments in parentheses. Multiple arguments to a function are separated by commas. So function calls looks like this:</p> <pre><code>func1()        # no arguments\nfunc2(x)       # one argument\nfunc3(x, y, z) # three arguments\n</code></pre> <p>and so on. Method calls are almost exactly the same, except that instead of the name of the function, we have the name of the object, a dot (<code>.</code>) and the name of the method. Here are some hypothetical method calls on a hypothetical object called <code>obj</code>:</p> <pre><code>obj.method1()\nobj.method2(x)\nobj.method3(x, y, z)\n</code></pre> <p>Method calls are like function calls on an object. If you like, you can think of the object as an extra argument to the method that happens to be placed in a weird location (before the dot).</p> <p>I call the <code>obj.method</code> kind of syntax for method calls the \"dot syntax\". As we'll see in later readings, this syntax is used for more than just method calls, though the other uses are similar.</p>"},{"location":"5/reading5/#strings-are-objects","title":"Strings are objects","text":"<p>We've actually been working with Python objects already. Since all Python values are objects, even things like integers are objects (but we don't usually use methods on integers). Strings are also objects, and there are a number of useful methods defined for strings. For instance:</p> <pre><code>&gt;&gt;&gt; 'spam'.upper()\n'SPAM'\n&gt;&gt;&gt; s = 'spam'\n&gt;&gt;&gt; s.upper()\n'SPAM'\n</code></pre> <p>The <code>upper</code> method on strings converts a string to its uppercase version. (Note that it doesn't change the string, because strings are immutable; it simply creates a new string with the same characters but uppercased).</p> <p>Notice that you can call a method on a literal value (like <code>'spam'</code>) or on a variable that stands for that value (like <code>s</code>). Most of the time, we use methods on variables, but in this reading we'll often use methods on literal strings for convenience.</p> <p>Since methods are like functions, they have an argument list. In this case, the argument list is empty, so we have to put the open/close parentheses <code>()</code> after the name of the method. It's pretty common to have methods that take no arguments; what that means is that the method only needs the name of the object to do what it's doing. In this case, all the <code>upper</code> method needs to know about is the string object itself.</p> <p>You might think that it's dumb that you have to include an empty pair of open/close parentheses to call a method with no arguments. But if you leave them off, the method never gets called:</p> <pre><code>&gt;&gt;&gt; 'spam'.upper\n&lt;built-in method upper of str object at 0x109d3ee30&gt;\n</code></pre> <p>Python is basically saying here \"yup, that's a method all right\". If you want it to do something, you need the parentheses.<sup>2</sup></p> <p>Here are some other methods on strings:</p> <pre><code>&gt;&gt;&gt; 'SPAM'.lower()\n'spam'\n&gt;&gt;&gt; 'spam'.islower()\nTrue\n&gt;&gt;&gt; '   string with spaces on each end    '.strip()\n'string with spaces on each end'\n&gt;&gt;&gt; 'Caltech'.endswith('tech')\nTrue\n</code></pre> <p>Info</p> <p>Python uses the special names <code>True</code> and <code>False</code> to stand for boolean (true/false) values.</p> <p>Notice in particular the call to the <code>endswith</code> method. This is the first method call we've seen that has an argument in its argument list.</p> <p>A full list of Python's string methods can be found here. You're not expected to memorize them! Some of the more useful ones include:</p> <ul> <li><code>capitalize</code></li> <li><code>startswith</code> and <code>endswith</code></li> <li><code>find</code></li> <li><code>format</code> (we've seen this already)</li> <li><code>index</code></li> <li><code>join</code></li> <li><code>lower</code> and <code>upper</code></li> <li><code>strip</code></li> </ul> <p>Exercise</p> <p>Pick three methods from the above list and look up their definitions. Don't memorize them; just remember enough so that when you come across a situation where they might be useful, you'll know where to look.</p>"},{"location":"5/reading5/#methods-vs-functions","title":"Methods vs. functions","text":"<p>Let's take a closer look at the <code>endswith</code> method:</p> <pre><code>&gt;&gt;&gt; 'Caltech'.endswith('tech')\nTrue\n</code></pre> <p>You might wonder why this wasn't written as a regular function, e.g. something like this:</p> <pre><code>&gt;&gt;&gt; endswith('Caltech', 'tech') # Doesn't work!\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'endswith' is not defined\n</code></pre> <p>Python is telling you that there is no <code>endswith</code> function.</p> <p>In fact, <code>endswith</code> could have been written that way. Or you could define it that way if you really wanted to:</p> <pre><code>&gt;&gt;&gt; def endswith(s, suffix):\n...     return s.endswith(suffix)\n...\n&gt;&gt;&gt; endswith('Caltech', 'tech')\nTrue\n</code></pre> <p>There's no reason to do this, though. One benefit of using methods instead of functions is that you can use the same method name on different objects and have it mean different things for each object. Usually, though, it's better if the meaning is similar (even if it's not identical), because otherwise it's likely to be confusing. Not having to define new names for similar (but not identical) functionality means that code reads better and is more intuitive.</p>"},{"location":"5/reading5/#defining-methods","title":"Defining methods","text":"<p>We will not go into the syntax for defining methods at this time. In fact, it's almost identical to function definition syntax. For now, and for most of this course, we will use pre-written methods. Python's extensive code libraries (called modules) and many built-in data structures mean that there are a lot of pre-written methods we can use right away.</p>"},{"location":"5/reading5/#the-len-function","title":"The <code>len</code> function","text":"<p>As we mentioned above, there are many function-like things that can be written either as methods or as functions, at least in principle. Python is not always totally consistent in this regard.<sup>3</sup> Some things are written as functions, and others as methods, and sometimes you find the same functionality is provided by both a function and a method. Usually, though, a particular behavior is implemented as one or the other.</p> <p>As if this wasn't confusing enough, consider the very useful built-in <code>len</code> function. (Notice that I said function, not method.) <code>len</code> takes a single argument and returns its \"length\", whatever \"length\" means for that kind of data. We can use <code>len</code> on a lot of different kinds of Python objects. For instance, strings have a length:</p> <pre><code>&gt;&gt;&gt; len('foobar')\n6\n</code></pre> <p>For a string, its <code>len</code> is the number of characters in the string.</p> <p>On the other hand, integers and boolean values don't have a <code>len</code>:</p> <pre><code>&gt;&gt;&gt; len(1)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: object of type 'int' has no len()\n&gt;&gt;&gt; len(True)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: object of type 'bool' has no len()\n</code></pre> <p>Lists (which are another data type that we'll meet shortly) also have a length:</p> <pre><code>&gt;&gt;&gt; len([1, 2, 3])\n3\n</code></pre> <p>(Here, <code>[1, 2, 3]</code> is Python's syntax for a list of three integers: <code>1</code>, <code>2</code>, and <code>3</code>.) So <code>len</code> works on both strings and lists, but it should be clear that finding the length of a string is a different kind of operation than finding the length of a list. You might think, therefore, that Python should have made <code>len</code> a method on strings and lists, not a function. Why didn't it?</p> <p>Well, actually, it did but it pretends that it didn't. When you say <code>len(x)</code> in Python, it internally calls a method called <code>__len__</code> on the object. Observe:</p> <pre><code>&gt;&gt;&gt; len('foobar')\n6\n&gt;&gt;&gt; 'foobar'.__len__()\n6\n&gt;&gt;&gt; len([1, 2, 3])\n3\n&gt;&gt;&gt; [1, 2, 3].__len__()\n3\n</code></pre> <p>The only reason <code>len</code> is a function is that it's used so often that the Python designer (Guido van Rossum) figured that it would be more pleasant to write it like a function than like a method. You can agree with this or not, but that's how it is.<sup>4</sup></p> <p>What's more interesting is that this is a good example of a method (<code>__len__</code>) which has the same name for two different kinds of objects (strings and lists) but which does different things in each case. Both things are conceptually \"lengths\" but the details are different. This is common with methods: each object can use the same method names as other objects, but the meaning of these methods is specific to the object.</p> <p>Special methods</p> <p>One last thing: the <code>__len__</code> method uses a naming convention that we'll see again. Names of methods that are used internally by Python for some important purpose are, by convention, written with two leading and two trailing underscores. There are a bunch of \"special methods\" like this that do a number of things, and we'll meet some more of them very soon. Be aware, though, that this is only a convention. You could write your own methods with names like this, and Python would still accept it. However, please don't do that! If you redefined a method like <code>__len__</code>, your program will probably fail, and it might be very hard for you to figure out why.</p> <ol> <li> <p>That is, assuming the object has any internals. Some very simple objects, like integers, don't have any internal components.\u00a0\u21a9</p> </li> <li> <p>Some object-oriented languages, like Ruby, don't require you to use parentheses for methods with no arguments. You can waste an incredible amount of time arguing over whether this is a good or a bad thing.\u00a0\u21a9</p> </li> <li> <p>Some languages, like Java or Ruby, try hard to be \"pure\" object-oriented languages. Python is more pragmatic; Python programmers use whatever seems best for the application at hand.\u00a0\u21a9</p> </li> <li> <p>Every programming language has some features in it that some people don't like. Most have features that almost everyone doesn't like. Python is very good, but it isn't perfect. Features in a programming languages that most programmers dislike are commonly referred to as warts. Compared to most languages, Python has very few warts.\u00a0\u21a9</p> </li> </ol>"},{"location":"6/reading6/","title":"Reading 6: Modules","text":"<p>It would appear that we have reached the limits of what it is possible to achieve with computer technology, although one should be careful with such statements, as they tend to sound pretty silly in 5 years. - John von Neumann</p>"},{"location":"6/reading6/#overview","title":"Overview","text":"<p>In this reading we'll introduce Python modules. A module is a term we use for a reusable chunk of Python code, which means code that is intended to be used in multiple programs.</p>"},{"location":"6/reading6/#topics","title":"Topics","text":"<ul> <li>Modules</li> <li>The <code>import</code> keyword</li> <li>Writing your own modules</li> <li>Some useful modules</li> </ul>"},{"location":"6/reading6/#modules","title":"Modules","text":"<p>Some programs are meant to be stand-alone i.e. the code in the program is intended to be used only for that program. But it's not uncommon to write Python functions (and, as we'll see later, Python classes) that are more generally useful and can be used in multiple programs. In order to make it easy to use the same code in multiple programs, programming languages have developed the idea of a \"module\". A module is like a code \"library\" that you can \"check out\" and use in any program that needs it. (Modules are often informally called \"libraries\".)</p> <p>Modules are important because the best code is code you don't have to write! If someone has already written the code that you need, tested it, debugged it, and put it into a module, it's usually better to use the module than rewrite the code yourself.</p>"},{"location":"6/reading6/#module-contents","title":"Module contents","text":"<p>A module can contain any kind of Python code whatsoever. Most of the time, though, a module will contain</p> <ul> <li>functions</li> <li>values (generally intended to be constants)</li> <li>classes</li> </ul> <p>We'll talk about classes later in the course. For now, we're mainly interested in modules that contain functions we might want to use.</p>"},{"location":"6/reading6/#using-modules","title":"Using modules","text":"<p>When you think of code that is likely to be re-used in multiple programs, one thing you might think of is common math functions, like square root, sine, cosine, etc. In this section, let's assume that we want to use these functions. If there is a module that contains these functions, we have to import the module, which means to load the module into the computer's memory so that we can use its functions. In Python, there is a predefined module called <code>math</code> which contains all the standard mathematical functions; that's the module we'll be importing.</p>"},{"location":"6/reading6/#the-import-keyword-and-qualified-names","title":"The <code>import</code> keyword and qualified names","text":"<p>The standard way to import a module is to use the <code>import</code> keyword:</p> <pre><code>import math\n</code></pre> <p>Once you've done this, you get access to all the functions in the <code>math</code> module. One of these is the square root function, called <code>sqrt</code> in Python. However, in order to use this function we have to include the name of the module in the function call:</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.sqrt(4)\n2.0\n&gt;&gt;&gt; math.sqrt(2)\n1.4142135623730951\n</code></pre> <p>The <code>sqrt</code> function always returns a floating-point (approximate real number) value, which is why <code>math.sqrt(4)</code> returns <code>2.0</code> and not <code>2</code>.<sup>1</sup></p> <p>One thing to be aware of is that if you use <code>import</code> this way, you have to put the name of the module before the name of the function, separated by a dot. (This is exactly the \"dot syntax\" already described for objects, but here instead of <code>&lt;object&gt;.&lt;method&gt;</code> it means <code>&lt;module&gt;.&lt;function&gt;</code>.) If you try to leave it out, you get an error:</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; sqrt(2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'sqrt' is not defined\n</code></pre> <p>What the error message is really telling you is that you need to write <code>math.sqrt</code>, not just <code>sqrt</code>.</p> <p>Note</p> <p>If you write <code>math.sqrt</code> but forget the <code>import</code> line it also fails:</p> <pre><code>&gt;&gt;&gt; math.sqrt(2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'math' is not defined\n</code></pre> <p>The error message lets us know that Python doesn't recognize the name <code>math</code> until it's been imported.</p> <p>Names like <code>math.sqrt</code> are called qualified names; here, it means \"the <code>sqrt</code> function that is defined in the <code>math</code> module\". The reason Python's <code>import</code> statement works this way is that it's nice to have imported names \"compartmentalized\" inside their modules. This matters because other modules may define different <code>sqrt</code> functions. For instance, there is a module called <code>cmath</code> which provides math functions that work on complex numbers.</p> <p>Note</p> <p>A complex number is a kind of number that contains a real and an imaginary part. The real part is just a real number. The imaginary part is a real number multiplied by the square root of -1, which is usually called <code>i</code> or <code>j</code> (Python calls it <code>j</code>). Python allows you to write literal complex numbers:<sup>2</sup></p> <pre><code>&gt;&gt;&gt; c = 1.0+2.0j\n&gt;&gt;&gt; c * c\n(-3+4j)\n</code></pre> <p>We can <code>import</code> both modules at the same time and use both <code>sqrt</code> functions, because we have to qualify the names:</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.sqrt(-1)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: math domain error\n&gt;&gt;&gt; import cmath\n&gt;&gt;&gt; cmath.sqrt(-1)\n1j\n</code></pre> <p>The <code>math.sqrt</code> function doesn't work on negative inputs (hence the error message) but the <code>cmath.sqrt</code> function works fine on negative inputs.</p> <p>We can even import both modules on the same line:</p> <pre><code>import math, cmath\n</code></pre> <p>More generally, you can import as many modules as you like on one line by separating them with commas. On the other hand, if you have a lot of modules to import, it's more readable to have each <code>import</code> on a separate line:</p> <pre><code>import math\nimport cmath\n</code></pre> <p>In fact, importing multiple modules on one line is considered poor Python style.<sup>3</sup></p>"},{"location":"6/reading6/#the-from-x-import-y-syntax","title":"The <code>from X import Y</code> syntax","text":"<p>Sometimes it's annoying to have to qualify names. Maybe you are going to be using the <code>sqrt</code> function over and over again, and having to write <code>math.sqrt</code> each time seems too verbose (and maybe also too hard to read). There is a way to import a function that doesn't require that the function's name be qualified: you use the <code>from X import Y</code> syntax.</p> <pre><code>&gt;&gt;&gt; from math import sqrt\n&gt;&gt;&gt; sqrt(2.0)\n1.4142135623730951\n</code></pre> <p>You can even import multiple names:</p> <pre><code>&gt;&gt;&gt; from math import sin, cos, pi\n&gt;&gt;&gt; sin(pi/2) + cos(pi/2)\n1.0\n</code></pre> <p>Or you can go nuts and import every name in a module:</p> <pre><code>&gt;&gt;&gt; from math import *\n&gt;&gt;&gt; sqrt(sin(pi/3))\n0.9306048591020996\n</code></pre> <p>The asterisk character (<code>*</code>) is called \"star\" in this context (it's not multiplication) and means \"everything\", so this will import every name in the module, which you can then use without having to write the module name as a qualifier (so <code>sqrt</code> and not <code>math.sqrt</code>).</p> <p>Beginning Python programmers love this form, because it's very convenient to use. However, most of the time it's also bad programming practice. The problem is that different modules will sometimes define the same name to mean different things:</p> <pre><code>&gt;&gt;&gt; from math import sin\n&gt;&gt;&gt; sin(1.0)\n0.8414709848078965\n&gt;&gt;&gt; from evil import sin\n&gt;&gt;&gt; sin('bear false witness')\n'The check is in the mail!'\n</code></pre> <p>(The second example is made-up, of course.) If we use the <code>from X import *</code> syntax routinely, we can get name clashes, where you import the same name multiple times. In this case, Python will only allow you to use the last name that was imported.</p> <pre><code>&gt;&gt;&gt; from math import *\n&gt;&gt;&gt; from evil import *\n</code></pre> <p>Now <code>sin</code> means <code>evil.sin</code>, and <code>math.sin</code> can't be used.</p> <p>Name clashes can lead to difficult-to-find bugs. Our advice is therefore:</p> <p>Tip</p> <p>Don't use the <code>from X import *</code> syntax unless there is a really good reason to.</p> <p>If you think you want to use this form, try using <code>from X import Y</code> i.e. specify exactly which name(s) you want to import. That's much less likely to cause problems, and if a name clash happens, it will probably be easier to spot.</p>"},{"location":"6/reading6/#the-import-x-as-y-syntax","title":"The <code>import X as Y</code> syntax","text":"<p>OK, so hopefully you're convinced that indiscriminate use of the <code>from X import *</code> syntax is a bad idea. Still, if a module has a long name it's really annoying to have to write it over and over as the first part of qualified names. Fortunately, Python provides another way to do this: you can rename a module when you import it using the <code>import X as Y</code> syntax. Most of the time, you rename a module to a much shorter name:</p> <pre><code>&gt;&gt;&gt; import math as m\n&gt;&gt;&gt; m.sqrt(2.0)\n1.4142135623730951\n</code></pre> <p>The benefit of this is that you're protected from name clashes as long as you choose module names that are different. The downside of this is that <code>m.sqrt</code> is perhaps less readable than either <code>math.sqrt</code> or <code>sqrt</code>. Nevertheless, we think that it's a good compromise.</p> <p>Note</p> <p>Many popular Python libraries, such as NumPy and Pandas (for multidimensional data analysis), and matplotlib (for plotting and visualization) are normally used with the <code>import X as Y</code> syntax:</p> <pre><code>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n</code></pre>"},{"location":"6/reading6/#modules-are-first-class","title":"Modules are first-class","text":"<p>It might surprise you to know that modules are actually also Python objects! The technical way of saying this is that modules are \"first-class\" objects, but all that means is that they are objects like any other object.<sup>4</sup> Because of this, you can store modules in variables, you can pass them as arguments to functions, etc.</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; m = math\n&gt;&gt;&gt; m.sqrt(2.0)\n1.4142135623730951\n</code></pre> <p>So the <code>import math as m</code> syntax is exactly equivalent to <code>import math</code> followed by <code>m = math</code>.</p>"},{"location":"6/reading6/#module-documentation-and-the-help-function","title":"Module documentation and the <code>help</code> function","text":"<p>Modules can contain a lot of different functions, values, etc. How do we learn about what's in a module?</p> <p>One way is to go to the Python web site and look in the library documentation. The place to go is https://docs.python.org/library. This is the preferred approach if the module is part of Python's standard libraries, which will be the case for most of the modules we'll use in this course.</p> <p>Another way is to use the <code>help</code> function built in to Python. The help function can take a module, a function, or a class as its argument and will print out the documentation associated with that thing.</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; help(math.sqrt)\nHelp on built-in function sqrt in module math:\n\nsqrt(x, /)\n    Return the square root of x.\n</code></pre> <p>Note</p> <p>Don't worry about the <code>/</code> in the <code>sqrt(x, /)</code> line. It means that the argument <code>x</code> is \"positional only\". This will mean more to you when we talk about \"keyword arguments\" in later readings.</p> <p>You can get documentation for entire modules, too:</p> <pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; help(math)\nHelp on module math:\n\nNAME\n    math\n\nMODULE REFERENCE\n    https://docs.python.org/3.12/library/math.html\n...\n</code></pre> <p>(This goes on for many pages.)</p> <p>One thing that's interesting is that the <code>help</code> function is not \"magical\" in any way; it's just a regular Python function. The reason it can take a function or a module as its argument follows from the fact that functions and modules are themselves Python objects. On the other hand, if you wanted help on (say) the <code>def</code> keyword in Python, this won't work:</p> <pre><code>&gt;&gt;&gt; help(def)\n  File \"&lt;stdin&gt;\", line 1\n    help(def)\n         ^\nSyntaxError: invalid syntax\n</code></pre> <p>Since <code>def</code> is a keyword and not a Python object, this doesn't work. You have to go to the online documentation to learn everything about how <code>def</code> works.</p> <p>The <code>help</code> function only works if the function or module argument is known to Python:</p> <pre><code>&gt;&gt;&gt; help(math.sqrt)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'math' is not defined\n&gt;&gt;&gt; import math\n&gt;&gt;&gt; help(math.sqrt)\nHelp on built-in function sqrt in module math:\n\nsqrt(x, /)\n    Return the square root of x.\n</code></pre> <p>You can also write documentation for your own functions so that the <code>help</code> function will work on them. We'll see how to do that in the next reading.</p> <p>Note</p> <p>The <code>help</code> function can also be called with no arguments:</p> <pre><code>&gt;&gt;&gt; help()\n... [long welcome message] ...\nhelp&gt;\n</code></pre> <p>When invoked this way, <code>help</code> puts you into an interpreted environment which runs on top of the interactive Python interpreter (as is suggested by the <code>help&gt;</code> prompt, which is distinct from the usual Python <code>&gt;&gt;&gt;</code> prompt). Inside this prompt, you can enter anything you want help on: a module, a function, a value, etc. This even works if you haven't loaded a module. Imagine you start the Python interpreter and don't import any modules. This still works:</p> <pre><code>&gt;&gt;&gt; help()\n... [long welcome message] ...\nhelp&gt; math.sqrt\nHelp on built-in function sqrt in math:\n\nmath.sqrt = sqrt(x, /)\n    Return the square root of x.\n</code></pre> <p>If you need help on multiple topics, calling <code>help</code> this way is often useful. To get out of the <code>help</code> system, type <code>quit</code> at the prompt.</p>"},{"location":"6/reading6/#writing-your-own-modules","title":"Writing your own modules","text":"<p>Writing a Python module is very easy. You just need to do two things:</p> <ol> <li>Write your code in a file.  (Make sure it's a plain text file.)</li> <li>Make sure that the name of the file ends in <code>.py</code>.</li> </ol> <p>Also, by convention, module names should be short and consist of all lowercase letters and (if necessary) underscores.<sup>5</sup></p> <p>Let's write a simple module called <code>greetings</code> which provides functions to print out greeting messages. The module's file will be named <code>greetings.py</code>. Here's our first attempt:</p> <pre><code># Module: greetings\n# Filename: greetings.py\n\ndef greet(name):\n    print('Hi there, {}!'.format(name))\n\ndef insult(name):\n    print('Get lost, {}!'.format(name))\n</code></pre> <p>Once this code is saved into the file <code>greetings.py</code>, you can import it like any other module.</p> <pre><code>&gt;&gt;&gt; import greetings\n&gt;&gt;&gt; greetings.greet('Adam')\nHi there, Adam!\n&gt;&gt;&gt; greetings.insult('Mike')\nGet lost, Mike!\n</code></pre> <p>Or, if you like, you can import it the other way:</p> <pre><code>&gt;&gt;&gt; from greetings import *\n&gt;&gt;&gt; greet('Adam')\nHi there, Adam!\n</code></pre> <p>Or even:</p> <pre><code>&gt;&gt;&gt; import greetings as g\n&gt;&gt;&gt; g.greet('Adam')\nHi there, Adam!\n</code></pre> <p>The point of all this is that writing normal Python code in a file is exactly the same as writing a Python module. So Python modules are incredibly easy to create and use.</p> <p>Note</p> <p>In the next reading, we will see how to add documentation to our modules so that the <code>help</code> function can print it out when requested.</p>"},{"location":"6/reading6/#some-useful-modules","title":"Some useful modules","text":"<p>There are lots of useful modules included with Python. Some commonly-used ones include:</p> <ul> <li><code>math</code>   (math functions)</li> <li><code>cmath</code>  (complex number math functions)</li> <li><code>string</code> (functions on strings)</li> <li><code>random</code> (random number functions)</li> <li><code>sys</code>    (system functions)</li> <li><code>os</code>     (operating system specific functions)</li> <li><code>re</code>     (regular expressions)</li> </ul> <p>There are many, many more useful modules besides these. Go to the Python module documentation for a full list. There are also many important and useful modules that aren't included with Python. Some of these include:</p> <ul> <li><code>numpy</code>   (numerical programming with multidimensional arrays)</li> <li><code>scipy</code>  (scientific functions)</li> <li><code>pandas</code> (data frames and data analysis)</li> <li><code>matplotlib</code>   (plotting and visualization tools)</li> </ul> <p>These modules are used extensively by data scientists and are one of the main reasons that Python is so popular.<sup>6</sup></p> <ol> <li> <p>In programming languages, the integer <code>2</code> and the floating-point number <code>2.0</code> are different, because the way they are represented internally is different.\u00a0\u21a9</p> </li> <li> <p>To be completely accurate, Python allows you to write literal imaginary numbers, which means a regular number with the suffix <code>j</code>. When you write <code>1.0+2.0j</code>, it's actually a Python addition expression: the real number <code>1.0</code> added to the imaginary number <code>2.0j</code>.\u00a0\u21a9</p> </li> <li> <p>According to PEP8, which is a set of standard coding style conventions for Python.\u00a0\u21a9</p> </li> <li> <p>Functions are also first-class Python objects, and you can pass functions as arguments to other functions. This turns out to be very powerful and leads to a style of programming called \"functional programming\". Functional programming is the topic of CS 4 and CS 115.\u00a0\u21a9</p> </li> <li> <p>This is also part of the PEP8 style guidelines. We will see PEP8 again.\u00a0\u21a9</p> </li> <li> <p>They are also very easy to install using the <code>pip</code> tool. For instance, to install <code>numpy</code> all you need to do is type <code>pip install numpy</code> at a terminal prompt.\u00a0\u21a9</p> </li> </ol>"},{"location":"7/reading7/","title":"Reading 7: Documenting your code","text":"<p>The protean nature of the computer is such that it can act like a machine or like a language to be shaped and exploited. - Alan Kay</p>"},{"location":"7/reading7/#overview","title":"Overview","text":"<p>Documenting your code means writing comments and explanations to make your code easier for other programmers to understand. Documentation doesn't affect the way your code runs, but it's still extremely important. Many beginning programmers comment sparsely or not at all, but when you write programs as part of a team (which is what most professional programmers do), good documentation is essential and can't be neglected. Remember: programs are not just written to make the computer understand what to do; they also must be able to communicate to other programmers what you intended. Those other programmers may be in charge of maintaining or extending your code, and you need to make sure that they understand the code they're working on.</p> <p>There are two ways to document code. The first way is using plain old comments. The second way uses Python docstrings, which is the preferred way to add documentation to your Python functions and modules.</p>"},{"location":"7/reading7/#topics","title":"Topics","text":"<ul> <li> <p>Commenting and comment style</p> </li> <li> <p>Docstrings</p> </li> </ul>"},{"location":"7/reading7/#comments","title":"Comments","text":""},{"location":"7/reading7/#syntax-and-style","title":"Syntax and style","text":"<p>We've already seen that in Python, comments begin with a pound sign (<code>#</code>)<sup>1</sup> and go to the end of the line.</p> <pre><code># This is a comment.\n# So is this.\n</code></pre> <p>When you write a comment, please include at least one space after the <code>#</code> character. This is good:</p> <pre><code># A nice comment.\n</code></pre> <p>and this is bad:</p> <pre><code>#A bad comment.\n</code></pre> <p>This last comment is perfectly legal in Python, but it's hard to read.</p> <p>Note</p> <p>There are a lot of \"style guidelines\" like this that will help you write more readable code. The definitive set of style guidelines for Python is \"PEP8\", which you can read here. However, PEP8 is a bit overwhelming for new programmers, so we'll try to point out the most important style guidelines as we come to them.<sup>2</sup> If you're ever confused about how to format your code, you can consult PEP8.</p> <p>You can put comments after a line of code on the same line:</p> <pre><code>a = 42  # this is a comment\n</code></pre> <p>This is OK as long as the line doesn't get too long. Lines shouldn't be longer than about 80 characters, because otherwise they are hard to read.<sup>3</sup> If a comment can't easily fit on the end of a line, put it on the line before the line being commented on, not after. So this is good:<sup>4</sup></p> <pre><code># Set the variable `a` to an interesting value.\na = 42\n</code></pre> <p>and this is bad:</p> <pre><code>a = 42\n# Set the variable `a` to an interesting value.\n</code></pre>"},{"location":"7/reading7/#multiline-comments","title":"Multiline comments?","text":"<p>Many computer languages (like Java and C++) also have special symbols for multiline comments (comments that span multiple lines), but Python does not. The closest Python comes to multiline comments are docstrings, which we discuss in the next section, but technically docstrings are not comments.</p> <p>If you do want a multiline comment, what you need to do is to make a bunch of single-line comments one after the other, like this:</p> <pre><code># This is what Python\n# considers to be a\n# \"multi-line\"\n# comment.\n</code></pre> <p>Most text editors with Python support have some way of selecting multiple lines and commenting them all out.</p>"},{"location":"7/reading7/#when-to-use-comments","title":"When to use comments","text":"<p>Comments are mainly used inside of functions to explain what some code does if its meaning isn't obvious. Don't use a comment to restate something obvious about the code. However, if you are doing something clever or tricky, or even something you think that someone reading the code might not understand, adding a comment is a good idea.</p> <p>Here's an example of bad and good comments stolen from PEP8. This is bad:</p> <pre><code>x = x + 1   # Increment x.\n</code></pre> <p>Here, you are restating something obvious about the code, so the comment is completely unnecessary.</p> <p>This is good:</p> <pre><code>x = x + 1   # Compensate for border.\n</code></pre> <p>Not knowing what the context of the program is, I don't know what \"Compensate for border\" might mean, but at least it isn't something that is obvious from the code.</p> <p>An example of tricky code that might deserve a comment is this:</p> <pre><code>n += n * (n % 2) * 4   # Multiply `n` by 5 only if `n` is odd.\n</code></pre> <p>Hopefully you won't be writing much code like this.</p> <p>Note that if you never comment your code, or if you comment poorly, we will take marks off of your assignments.</p>"},{"location":"7/reading7/#docstrings","title":"Docstrings","text":"<p>Traditionally, one of the most common places to put a comment is right before a function, so you can tell the reader what the function does:</p> <pre><code># Print out a hearty greeting.\ndef greet(name):\n    print('Hi there, {}!'.format(name))\n</code></pre> <p>The only problem with this kind of comment is that Python's <code>help</code> function can't use them. Once Python reads the comment, it discards it and it's gone. It would be great if there were a way to write a \"comment\" that would somehow be usable by Python's <code>help</code> function. And there is such a way! It's called a docstring, which is short for \"documentation string\".</p>"},{"location":"7/reading7/#docstring-syntax","title":"Docstring syntax","text":"<p>A docsting is just a regular Python string which happens to be the first thing inside:</p> <ul> <li>a function body</li> <li>a module</li> <li>a class (covered later in the course)</li> </ul> <p>When you execute a docstring, the docstring itself doesn't do anything. However, Python \"knows\" about docstrings, so when it sees a string in one of those places it stores it as part of the function (or module, or class). Then it can use it later, as we'll see.</p> <p>Docstrings are normally written as triple-quoted strings, because very often the information you want to write spans more than one string. Python does not require docstrings to be triple-quoted, but the PEP8 style guidelines do.</p>"},{"location":"7/reading7/#function-docstrings","title":"Function docstrings","text":"<p>Here's our previous example with a docstring instead of a comment:</p> <pre><code>def greet(name):\n    \"\"\"Print out a hearty greeting.\"\"\"\n    print('Hi there, {}!'.format(name))\n</code></pre> <p>Notice that even though this is a one-line docstring, we wrote it with triple quotes. That way, if we ever want to add more information and it needs to span more lines we don't have to change the quotes. We strongly recommend that you use triple-quoted strings for all docstrings. We also recommend that you use three double-quote characters (<code>\"\"\"</code>) not three single-quote characters (<code>'''</code>), since this is the PEP8 convention.</p> <p>Let's assume we wrote the <code>greet</code> function in a file called <code>greetings.py</code>. That makes it a Python module, so inside the Python interpreter, we can <code>import</code> it and run it:</p> <pre><code>&gt;&gt;&gt; import greetings\n&gt;&gt;&gt; greetings.greet('Mike')\nHi there, Mike!\n</code></pre> <p>as expected. Here's the good part: we can also get <code>help</code> on the function:</p> <pre><code>&gt;&gt;&gt; help(greetings.greet)\nHelp on function greet in module greetings:\n\ngreet(name)\n    Print out a hearty greeting.\n</code></pre> <p>Note</p> <p>Python actually uses what's called a \"pager\" to print out the help message. This allows you to read very long help messages a page at a time. Hit the space bar to advance to the next page if there is one, and type <code>q</code> to dismiss the help message.</p> <p>Notice that the help message for the <code>greet</code> function is exactly the docstring that you wrote. Whatever you write in the docstring immediately becomes available to the <code>help</code> function.</p>"},{"location":"7/reading7/#module-docstrings","title":"Module docstrings","text":"<p>Let's look at the entire module (in the file <code>greetings.py</code>), with docstrings for each function:</p> <pre><code># Module: greetings\n# Filename: greetings.py\n\n\ndef greet(name):\n    \"\"\"Print out a hearty greeting.\"\"\"\n    print('Hi there, {}!'.format(name))\n\n\ndef insult(name):\n    \"\"\"Print out a nasty insult.\"\"\"\n    print('Get lost, {}!'.format(name))\n</code></pre> <p>It looks good, but the comments at the beginning of the module seem out of place. In addition, they are completely unnecessary, so we'll start by fixing that:</p> <pre><code># This module contains functions to print out various kinds of\n# greeting messages.\n\n\ndef greet(name):\n    \"\"\"Print out a hearty greeting.\"\"\"\n    print('Hi there, {}!'.format(name))\n\n\ndef insult(name):\n    \"\"\"Print out a nasty insult.\"\"\"\n    print('Get lost, {}!'.format(name))\n</code></pre> <p>That's a better comment, but the <code>help</code> function can't use it. So now we'll turn the comment into a module docstring:</p> <pre><code>\"\"\"\nThis module contains functions to print out various kinds of\ngreeting messages.\n\"\"\"\n\n\ndef greet(name):\n    \"\"\"Print out a hearty greeting.\"\"\"\n    print('Hi there, {}!'.format(name))\n\n\ndef insult(name):\n    \"\"\"Print out a nasty insult.\"\"\"\n    print('Get lost, {}!'.format(name))\n</code></pre> <p>Now it's looking professional. Let's fire up the interpreter:</p> <pre><code>&gt;&gt;&gt; import greetings\n&gt;&gt;&gt; help(greetings)\nHelp on module greetings:\n\nNAME\n    greetings\n\nDESCRIPTION\n    This module contains functions to print out various kinds of\n    greeting messages.\n\nFUNCTIONS\n    greet(name)\n        Print out a hearty greeting.\n\n    insult(name)\n        Print out a nasty insult.\n\nFILE\n    /home/mvanier/cs1/greetings.py\n</code></pre> <p>This gives us all the information about the module we might want (assuming we've written good docstrings).</p>"},{"location":"7/reading7/#what-to-put-in-docstrings","title":"What to put in docstrings","text":"<p>OK, that's the \"how\" of docstrings. More interesting is the \"what\" of docstrings i.e. \"what should I write in a docstring?\"</p> <p>The first rule is write docstrings for every function and every module you create. Don't skip writing a docstring because you think the function is obvious; that may be true, but docstrings can also be used to generate external documentation for a module (like a web page), and in that case, you want somebody reading the documentation to know about all the functions in the module.<sup>5</sup></p> <p>Docstrings are good documentation</p> <ul> <li>for you</li> <li>for you in the future (when you've forgotten what your code does)</li> <li>for anyone else reading or using your code</li> </ul> <p>The most important thing that needs to be in docstrings is information that will let people understand how to correctly use the code.</p> <p>In a function docstring, you should describe:</p> <ul> <li>what the function does (not how it does it)</li> <li>what the function arguments mean (ideally one line per argument)</li> <li>what the function returns</li> <li>any other effect that the function has when run (e.g. printing to the terminal, writing to a file, etc.)</li> </ul> <p>What you shouldn't put in the docstring is a description of how the function works. That should go inside the function body in comments, and may be omitted entirely if the code is simple or \"obvious\". I generally want to write comments in a function when the code is tricky or is doing something unintuitive. Of course, that's a judgment call.</p> <p>Warning</p> <p>Another thing you should never do is copy the problem description verbatim into a docstring. This is sometimes done by students who are told to write docstrings but are too lazy or rushed to write a real one. If you do this, expect to get no credit for the docstring.</p> <p>If we use these guidelines ultra-strictly, our docstrings for our functions might look like this:</p> <pre><code>\"\"\"\nThis module contains functions to print out various kinds of\ngreeting messages.\n\"\"\"\n\n\ndef greet(name):\n    \"\"\"Print out a hearty greeting.\n\n    Arguments:\n      name : the name to print with the greeting\n\n    Return value: none\n\n    Side effects: the greeting gets printed to the terminal.\n    \"\"\"\n    print('Hi there, {}!'.format(name))\n\n\ndef insult(name):\n    \"\"\"Print out a nasty insult.\n\n    Arguments:\n      name : the name to print with the insult\n\n    Return value: none\n\n    Side effects: the insult gets printed to the terminal.\n    \"\"\"\n    print('Get lost, {}!'.format(name))\n</code></pre> <p>However, not every function needs this level of detail. Very simple functions (like these) can get by with simpler docstrings, as long as they explain what the function does.</p> <p>Note</p> <p>In fact, for functions this simple, docstrings that are this detailed are overkill. It's possible to get obsessive about documentation; try to resist this tendency. Too much documentation is better than too little, but try to find the right level of detail.</p> <p>In a module docstring, you should describe:</p> <ul> <li>the purpose of the module</li> <li>a general description of the kinds of functions in the module</li> </ul> <p>What you shouldn't put in the docstring is a detailed description of any of the functions. That should go into the function docstrings, and there is no need to repeat that information.</p>"},{"location":"7/reading7/#the-__main__-module","title":"The <code>__main__</code> module","text":"<p>Let's try a dumb experiment: writing a function with a docstring in the Python interpreter. (It's dumb because functions written directly in the interpreter are throwaway functions because they disappear when you quit the interpreter.)</p> <pre><code>&gt;&gt;&gt; def double(x):\n...     \"\"\"This function returns twice the value of the argument `x`.\"\"\"\n...     return 2 * x\n</code></pre> <p>Now let's get some <code>help</code> on it:</p> <pre><code>&gt;&gt;&gt; help(double)\nHelp on function double in module __main__:\n\ndouble(x)\n    This function returns twice the value of the argument `x`.\n</code></pre> <p>What does this <code>module __main__</code> thing referred to mean?</p> <p><code>module __main__</code> is the name that Python gives to a module which is either</p> <ul> <li>the interactive interpreter</li> <li>the module that was directly invoked by Python   (if you're running Python on a file)</li> </ul> <p>All other modules are referred to by their own names.</p> <p>Here, <code>module __main__</code> refers to the interactive interpreter. But if we ran Python on a file of code, it would refer to the file's module. Consider a file <code>test.py</code> containing this code:</p> <pre><code>\"\"\"\nTest module.\n\"\"\"\n\n\ndef double(x):\n    \"\"\"This function returns twice the value of the argument `x`.\"\"\"\n    return 2 * x\n\n\nhelp(double)\n</code></pre> <p>When you run this from the terminal, you get this output:</p> <pre><code>$ python test.py\nHelp on function double in module __main__:\n\ndouble(x)\n    This function returns twice the value of the argument `x`.\n</code></pre> <p>Notice that it says <code>module __main__</code>, not <code>module test</code>.</p>"},{"location":"7/reading7/#the-__name__-special-variable","title":"The <code>__name__</code> special variable","text":"<p>Python stores the name of the currently-executing module in a special variable called <code>__name__</code>. Let's change the file <code>test.py</code> just a bit:</p> <pre><code>\"\"\"\nTest module.\n\"\"\"\n\n\ndef double(x):\n    \"\"\"This function returns twice the value of the argument `x`.\"\"\"\n    return 2 * x\n\n\nprint('My name is: {}'.format(__name__))\n</code></pre> <p>Let's run it as a standalone file from the terminal:</p> <pre><code>$ python test.py\nMy name is: __main__\n</code></pre> <p>Now let's <code>import</code> it from the interactive interpreter:</p> <pre><code>&gt;&gt;&gt; import test\nMy name is: test\n</code></pre> <p>We'll see a good use for the <code>__name__</code> variable in a future reading.</p> <p>Note</p> <p>We haven't mentioned this before, but Python can run arbitrary code when you import a module. Most of the time, the only code in a module are function definitions (or maybe class or variable definitions) which don't produce any output when run. But if there is e.g. a <code>print</code> statement in the module at the top level, it gets run when the module is imported and you will see the result. (But if you try to import it a second time, Python doesn't reload it and you don't see the result. Importing is not the same as reloading.<sup>6</sup>)</p>"},{"location":"7/reading7/#improving-our-docstrings","title":"Improving our docstrings","text":"<p>The docstrings we've written above are pretty uninspiring. We should take our own advice! So let's improve the <code>test.py</code> file by writing better docstrings.</p> <pre><code>\"\"\"\nThis module is a test of Python's docstring functionality.\n\"\"\"\n\n\ndef double(x):\n    \"\"\"\n    This function returns twice the value of the argument `x`.\n\n    Arguments:\n      x : an integer\n    Return value: an integer\n    \"\"\"\n    return 2 * x\n</code></pre> <p>Here, we've split up the function docstring into multiple lines and given a general statement about what the function does, followed by a description of the argument and the return value.</p> <p>We aren't going to insist on this format for every single function you write, but it's definitely appropriate for longer functions (say, more than ten lines).</p> <ol> <li> <p><code>#</code> is also sometimes called a \"hash sign\".\u00a0\u21a9</p> </li> <li> <p>The \"PEP\" in \"PEP8\" means \"Python Enhancement Proposal\" and is mainly used for proposing and discussing possible improvements to the language.\u00a0\u21a9</p> </li> <li> <p>PEP8 says they should be no more than 79 characters.\u00a0\u21a9</p> </li> <li> <p>When referring to a Python variable name in a comment, we surround it with backticks, so we write <code>`a`</code> and not just <code>a</code>. You don't have to do this, but it helps to make it clear that this is a Python name and not a regular word. This convention comes from Markdown, which is a syntax used for writing documents that get converted into web pages.\u00a0\u21a9</p> </li> <li> <p>The only exception might be for a function which is never intended to be used outside of the module. But for this course, write docstrings for all functions.\u00a0\u21a9</p> </li> <li> <p>There is a way to reload a module, but you don't need to know about it yet, or probably ever.\u00a0\u21a9</p> </li> </ol>"},{"location":"8/reading8/","title":"Reading 8: Lists","text":"<p>Once you have a computer that can do a few things - strictly speaking, one that has a certain 'sufficient set' of basic procedures - it can do basically anything any other computer can do. This, loosely, is the basis of the great principle of 'Universality'. - Richard Feynman</p> <p>In this reading, we're going to talk about Python's lists. As is typical for programming jargon, the word \"list\" means something very different in programming than it does in everyday life. In everyday life, a \"list\" is something we use to write down an ordered sequence of entries. (For instance, on a \"to-do list\" we might write down all the things we have to do this week.) So you might write down this to-do list:</p> <ol> <li>Work on CS 1 homework.</li> <li>Work on Math homework.</li> <li>Work on Phys homework.</li> <li>Work on Chem homework.</li> <li>Binge watch Netflix for 10 hours.</li> </ol> <p>In a programming language, a list is a kind of data object that can store a group of other data objects in a sequence. The data objects that are stored inside the list are called the elements of the list, or alternatively the list items. Here's an example of a Python list:</p> <pre><code>courses = ['CS 1', 'Ma 1', 'Ph 1', 'Chem 1']\n</code></pre> <p>The list is the collection of items inside the square brackets, separated by commas.</p> <p>The items in the list can be retrieved if you know their position in the list, and you can change the item at a particular position. You can also make a list bigger by adding more items to the end.</p> <p>Many programming languages restrict lists so that any particular list can only hold one kind of data object (for instance, a \"list of integers\"). Python is more flexible: you can have a list containing many different kinds of data (including other lists). Nevertheless, most of the time, Python lists only contain a single kind of data.</p> <p>Often we will be using a list as a single Python object. Python objects that contain other Python objects, like lists, are referred to as data structures. There are a number of other data structures that we'll meet soon, including tuples, dictionaries, and sets. One nice thing about Python is that working with these data structures is much more convenient than in many other languages, which makes programming easier.</p>"},{"location":"8/reading8/#a-simple-example","title":"A simple example","text":"<p>It's very common when programming to have many related values that you'd like to store in a single object. For instance, you might be doing weather research and need to store the average temperature for each day of the week. You could define variables for each day...</p> <pre><code>temp_sunday    = 59.6\ntemp_monday    = 72.4\ntemp_tuesday   = 68.5\ntemp_wednesday = 79.0\ntemp_thursday  = 66.4\ntemp_friday    = 77.1\ntemp_saturday  = -126.0  # Whoa, what happened here?\n</code></pre> <p>...but this would quickly become tedious. Even something as simple as finding the average temperature for these days would be difficult:</p> <pre><code>avg_temp = (temp_sunday + temp_monday + temp_tuesday + temp_wednesday + \\\n            temp_thursday + temp_friday + temp_saturday) / 7\n</code></pre> <p>A better way would be to collect all the temperatures in a single data structure (a list):</p> <pre><code>temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n</code></pre> <p>Now, finding the average is easy:</p> <pre><code>avg_temp = sum(temps) / 7\n</code></pre> <p>(We cheated a bit by using the built-in <code>sum</code> function. Once we learn about loops we'll be able to write <code>sum</code> ourselves.)</p> <p>The point of lists is to make it as easy to work with groups of values as it is to work with single values. Lists are used everywhere in Python code, and there are lots of predefined functions and methods for working with them, some of which we'll learn about below.<sup>1</sup></p>"},{"location":"8/reading8/#creating-lists","title":"Creating lists","text":"<p>A literal list is a list that you write directly by giving the values of all the elements. The <code>temps</code> list we defined above is an example of a literal list. A literal list is surrounded by square brackets, and the list elements are separated by commas.</p> <p>You don't have to have literal values in a list, however. You can make a list of any kind of Python expressions, which will be evaluated when the list is created. Examples:</p> <pre><code>temp_sunday    = 59.6\ntemp_monday    = 72.4\ntemp_tuesday   = 68.5\ntemp_wednesday = 79.0\ntemp_thursday  = 66.4\ntemp_friday    = 77.1\ntemp_saturday  = -126.0\n\n# Make a list from variables.\ntemps = [temp_sunday, temp_monday, temp_tuesday, temp_wednesday, \\\n         temp_thursday, temp_friday, temp_saturday]\n\n# Make a list of powers of a number.\nx = 42.8\nx_list = [x, x * x, x * x * x, x * x * x * x, x ** 5]\n\n# Make a list of trigonometric functions applied to pi.\nfrom math import sin, cos, tan, pi\nvals = [sin(pi), cos(pi), tan(pi)]\n\n# Make a list from other lists.\nlol = [[1, 2], [3, 4], [5, 6]]\nnested_lists = [[1], [[2, 3], [[4, 5, 6], [7, 8, 9, 10]]]]\n\n# Make a list with different types of data.\nhlist = [1, 2.5, True, 'foobar', [3, 4, 5]]\n</code></pre> <p>There are other ways to create lists, which we'll see below.</p>"},{"location":"8/reading8/#empty-list","title":"Empty list","text":"<p>An empty list is written as open/close square brackets:</p> <pre><code>empty = []\n</code></pre> <p>We'll see uses for this shortly.</p>"},{"location":"8/reading8/#accessing-list-elements","title":"Accessing list elements","text":"<p>Once you've created a list, you need to be able to extract (access) the elements of the list. Python also uses square brackets with a particular syntax to get the list elements:</p> <pre><code>temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\nt0 = temps[0]   # 59.6\n</code></pre> <p>The syntax to access a list element is:</p> <ul> <li>the name of the list (here, <code>temps</code>)</li> <li>the location (or index) of the element,   as an integer in square brackets (here, <code>[0]</code>)</li> </ul> <p>One peculiarity of list indexing is that the first element is \"element 0\". In computer programming, unlike in math, we almost always start counting from 0, not 1.<sup>2</sup></p> <p>The index doesn't have to be a literal integer; it can also be a Python expression which evaluates to an integer.</p> <pre><code>temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\nt3 = temps[3]  # 79.0\nt3a = temps[2 + 1]  # same\nt3b = temps[2 ** 8 - 253]  # same\n</code></pre> <p>In this case, Python evaluates the index expression to an integer before doing the list access.</p>"},{"location":"8/reading8/#index-errors","title":"Index errors","text":"<p>If a list index is too large, Python signals an error:</p> <pre><code>&gt;&gt;&gt; temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n&gt;&gt;&gt; temps[6]\n-126.0\n&gt;&gt;&gt; temps[7]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre> <p>Note</p> <p>Most errors in Python give rise to exceptions. We will discuss exceptions and exception handling in detail later in the course. When an error situation arises which leads to an exception, we say that Python \"raises an exception\". We'll use that terminology from now on. The <code>IndexError</code> in the error message is an example of a Python exception that is raised when you try to access a value off the end of a list. The <code>Traceback</code> stuff is also related to exception handling; for now, you can ignore it.</p> <p>Note, though, that not all exceptions represent errors. We'll see examples of this in later readings too. And, of course, not all errors end up raising exceptions.<sup>3</sup></p>"},{"location":"8/reading8/#negative-indices","title":"Negative indices","text":"<p>Python has a neat feature not found in most programming languages: you can use negative numbers as list indices. If you do, Python will access elements starting from the end of the list. So an index of <code>-1</code> means the last element of the list, an index of <code>-2</code> means the second-last, etc.</p> <pre><code>temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\ntlast = temps[-1]   # -126.0\nt2last = temps[-2]  # 77.1\n</code></pre> <p>Note, though, that you can't go too far back, or Python raises an <code>IndexError</code> exception:</p> <pre><code>&gt;&gt;&gt; temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n&gt;&gt;&gt; temps[0]\n59.6\n&gt;&gt;&gt; temps[-7]\n59.6\n&gt;&gt;&gt; temps[-8]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nIndexError: list index out of range\n</code></pre> <p>Python will not \"wrap around\" negative list indices if they go past the first element.</p>"},{"location":"8/reading8/#modifying-list-elements","title":"Modifying list elements","text":"<p>When we talked about strings, we pointed out that in Python strings are immutable: you can't change the characters inside a string once it's been created. In contrast, lists are always mutable: you can change (modify) a list element at any time. To modify a list element, just put the list element on the left-hand side of an assignment:</p> <pre><code>&gt;&gt;&gt; temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n&gt;&gt;&gt; temps[0]\n59.6\n&gt;&gt;&gt; temps[0] = 75.0\n&gt;&gt;&gt; temps[0]\n75.0\n</code></pre> <p>You can even change a list element to an element of a different type:</p> <pre><code>&gt;&gt;&gt; temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n&gt;&gt;&gt; temps[6] = 'really cold'\n&gt;&gt;&gt; temps\n[59.6, 72.4, 68.5, 79.0, 66.4, 77.1, 'really cold']\n</code></pre> <p>This is very rarely a good idea. When it happens, it's usually because of a bug in your code.</p>"},{"location":"8/reading8/#list-operators-and","title":"List operators: <code>+</code> and <code>*</code>","text":"<p>Much like strings, lists have operators that you can use on them. Many of these operators behave like their string counterparts. For instance, you can concatenate lists using the <code>+</code> operator:</p> <pre><code>&gt;&gt;&gt; temps1 = [59.6, 72.4, 68.5]\n&gt;&gt;&gt; temps2 = [79.0, 66.4, 77.1, -126.0]\n&gt;&gt;&gt; temps = temps1 + temps2\n&gt;&gt;&gt; temps\n[59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n&gt;&gt;&gt; temps + []\n[59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n&gt;&gt;&gt; [] + temps\n[59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\n</code></pre> <p>You can use the <code>*</code> operator with an integer on either side to create multiples of a list, all concatenated together:</p> <pre><code>&gt;&gt;&gt; [0] * 10\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n&gt;&gt;&gt; 5 * [42]\n[42, 42, 42, 42, 42]\n&gt;&gt;&gt; 0 * [100]\n[]\n&gt;&gt;&gt; 100 * []\n[]\n&gt;&gt;&gt; [1, 2, 3] * 3\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n</code></pre> <p>Notice that both the <code>+</code> and <code>*</code> operators do the same kind of thing for both strings and lists. That's because strings and lists are both Python sequences, and Python tries hard to make sequences behave in similar ways as much as possible.</p> <p>There is another important list operator called <code>in</code> that we will meet in a later reading.</p>"},{"location":"8/reading8/#list-functions","title":"List functions","text":""},{"location":"8/reading8/#len","title":"<code>len</code>","text":"<p>The <code>len</code> function applied to a list argument returns the length of the list:</p> <pre><code>&gt;&gt;&gt; lst = [1, 2, 3, 4, 5]\n&gt;&gt;&gt; len(lst)\n5\n&gt;&gt;&gt; len([])\n0\n</code></pre>"},{"location":"8/reading8/#list","title":"<code>list</code>","text":"<p>The <code>list</code> function converts other kinds of sequences to lists. The only other sequence type we know about is strings; let's see what <code>list</code> does to a string:</p> <pre><code>&gt;&gt;&gt; s = 'Monty Python'\n&gt;&gt;&gt; list(s)\n['M', 'o', 'n', 't', 'y', ' ', 'P', 'y', 't', 'h', 'o', 'n']\n</code></pre> <p>This is the easiest way to split a string into letters. It's also useful for something else: a string is immutable but a list is mutable. So if you really want to change a letter in a string, you can convert it to a list, change the list, and then convert the list back to a string using the <code>join</code> method on strings.<sup>4</sup> That might look like this:</p> <pre><code>&gt;&gt;&gt; s = 'Monty Python'\n&gt;&gt;&gt; lst = list(s)\n['M', 'o', 'n', 't', 'y', ' ', 'P', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; lst[6] = 'B'\n&gt;&gt;&gt; lst\n['M', 'o', 'n', 't', 'y', ' ', 'B', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; ''.join(lst)  # trust us, this works\n'Monty Bython'\n</code></pre>"},{"location":"8/reading8/#list-methods","title":"List methods","text":"<p>Lists are Python objects, so they can have methods like any other object. There are a lot of list methods; some of the most useful ones are briefly described here. (We won't describe every aspect of these methods; see the official Python documentation for that.)</p>"},{"location":"8/reading8/#append","title":"<code>append</code>","text":"<p>To add an element to the end of a list, use the <code>append</code> method:</p> <pre><code>&gt;&gt;&gt; lst = []\n&gt;&gt;&gt; lst.append(1)\n&gt;&gt;&gt; lst\n[1]\n&gt;&gt;&gt; lst.append(2)\n&gt;&gt;&gt; lst\n[1, 2]\n&gt;&gt;&gt; lst.append(3)\n&gt;&gt;&gt; lst\n[1, 2, 3]\n</code></pre> <p>This is probably the most-used list method. It's very common to use it the way we've used it above: start with an empty list and add elements to it until you end up with the desired list. Notice that the <code>append</code> method doesn't return anything; it just changes the list.</p>"},{"location":"8/reading8/#pop","title":"<code>pop</code>","text":"<p>To remove elements from the end of a list, use the <code>pop</code> method:</p> <pre><code>&gt;&gt;&gt; lst = [1, 2, 3]\n&gt;&gt;&gt; lst.pop()\n3\n&gt;&gt;&gt; lst\n[1, 2]\n</code></pre> <p>The <code>pop</code> method is unusual in that it returns a value (the element \"popped\" off the end of the list) and also changes the list itself (by removing the last element).<sup>5</sup></p>"},{"location":"8/reading8/#index","title":"<code>index</code>","text":"<p>To find an element's location (also called its index) in a list, use the <code>index</code> method:</p> <pre><code>&gt;&gt;&gt; s = 'Monty Python'\n&gt;&gt;&gt; lst = list(s)\n&gt;&gt;&gt; lst\n['M', 'o', 'n', 't', 'y', ' ', 'P', 'y', 't', 'h', 'o', 'n']\n&gt;&gt;&gt; lst.index('y')\n4\n&gt;&gt;&gt; lst.index('z')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: 'z' is not in list\n</code></pre> <p>The first call to <code>lst.index</code> returns 4 because the first <code>'y'</code> character is at index 4 (recall that the first element <code>'M'</code> is at index 0). If there are more than one of a particular element in the list, <code>index</code> returns the index of the first one, which is why it returns 4, not 7. Since there are no <code>'z'</code> characters in the list <code>lst</code>, <code>lst.index('z')</code> raises an exception.</p> <p>Note</p> <p>A <code>ValueError</code> exception is usually raised when a function gets an argument that is of the correct type but isn't valid for some other reason.</p>"},{"location":"8/reading8/#remove","title":"<code>remove</code>","text":"<p>To remove a value from a list, use the <code>remove</code> method. It only removes the first occurrence of the value from the list. It doesn't return anything, but changes the list in place. If the value doesn't exist in the list, a <code>ValueError</code> exception is raised.</p> <pre><code>&gt;&gt;&gt; lst = [1, 2, 3, 1, 2, 3]\n&gt;&gt;&gt; lst.remove(2)\n&gt;&gt;&gt; lst\n[1, 3, 1, 2, 3]\n&gt;&gt;&gt; lst.remove(2)\n&gt;&gt;&gt; lst\n[1, 3, 1, 3]\n&gt;&gt;&gt; lst.remove(2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: list.remove(x): x not in list\n</code></pre>"},{"location":"8/reading8/#count","title":"<code>count</code>","text":"<p>The <code>count</code> method returns the number of times a value is found in a list. The list is not altered.</p> <pre><code>&gt;&gt;&gt; lst = [1, 2, 3, 2, 4, 1, 5, 2, 1]\n&gt;&gt;&gt; lst.count(1)\n3\n&gt;&gt;&gt; lst.count(2)\n3\n&gt;&gt;&gt; lst.count(5)\n1\n&gt;&gt;&gt; lst.count(100)\n0\n</code></pre>"},{"location":"8/reading8/#sort-and-reverse","title":"<code>sort</code> and <code>reverse</code>","text":"<p>These two methods change the list in place; they don't return anything. The <code>sort</code> method sorts the list into ascending order.<sup>6</sup> The <code>reverse</code> method reverses the list.</p> <pre><code>&gt;&gt;&gt; lst = [5, 1, 4, 2, 6, 3, 5, 1, 2]\n&gt;&gt;&gt; lst.sort()\n&gt;&gt;&gt; lst\n[1, 1, 2, 2, 3, 4, 5, 5, 6]\n&gt;&gt;&gt; lst.reverse()\n&gt;&gt;&gt; lst\n[6, 5, 5, 4, 3, 2, 2, 1, 1]\n</code></pre>"},{"location":"8/reading8/#pitfall-aliasing","title":"Pitfall: aliasing","text":"<p>When you assign a variable containing a list to another variable, it looks like you might be copying it. In fact, you aren't \u2014 all you're doing is giving another name to the same list. This can be a shock if you aren't expecting it!</p> <pre><code>&gt;&gt;&gt; nums = [4, 6, 1503, 2, -3]\n&gt;&gt;&gt; nums2 = nums  # copy of nums?\n&gt;&gt;&gt; nums2[0] = 0\n&gt;&gt;&gt; nums2\n[0, 6, 1503, 2, -3]\n&gt;&gt;&gt; nums\n[0, 6, 1503, 2, -3]   # !!!\n</code></pre> <p>When we assign the list <code>nums</code> to <code>nums2</code>, we are not making a copy of <code>nums</code>. We are just giving another name to the same list. So when we change a value in the list using one of the names, the other variable sees the change. This kind of phenomenon is called aliasing and it's a real pain! The best way to avoid it is to make sure you understand what Python assignment really means, and copy a list if you really need two independent lists.</p> <p>We will show you how to copy lists in a few readings.<sup>7</sup></p> <p>Note</p> <p>One reason this may confuse you is that you might think that a Python variable is a \"location in memory\" where you can copy a value. In fact, this isn't true at all! (In some languages, like C, it is true, but not in Python.) In Python, assigning a value to a variable doesn't copy anything; it just creates a name which refers to the value. If you understand this, aliasing will be much less of a problem for you.</p> <p>To avoid confusion in the future, we won't say that a variable \"contains\" a value; instead we'll say that a variable \"is bound to\" a value or \"refers to\" a value.</p>"},{"location":"8/reading8/#nested-lists","title":"Nested lists","text":"<p>You can have lists within lists; these are called \"nested lists\". To get values from one of the inner lists, you have to double-up on the square bracket syntax.</p> <pre><code>&gt;&gt;&gt; lst = [[1, 2], [3, 4]]\n&gt;&gt;&gt; lst[0][0]\n1\n&gt;&gt;&gt; lst[0][1]\n2\n&gt;&gt;&gt; lst[1][0]\n3\n&gt;&gt;&gt; lst[1][1]\n4\n</code></pre> <p>When you read syntax like <code>lst[0][0]</code>, read it like this: <code>(lst[0])[0]</code>. In other words, the <code>lst[0]</code> picks out the sublist <code>[1, 2]</code>, and the final <code>[0]</code> picks out the number <code>1</code> from the sublist.</p> <p>You can use the same syntax on the left-hand side of an assignment statement to change a value in an inner list.</p> <pre><code>&gt;&gt;&gt; lst[0][0] = 100\n&gt;&gt;&gt; lst\n[[100, 2], [3, 4]]\n</code></pre>"},{"location":"8/reading8/#list-puzzles","title":"List puzzles","text":"<p>Because of aliasing, strange things can happen with nested lists. Can you explain why the following code entered into the Python interpreter behaves the way it does? (Feel free to ask a TA or the instructors if you're not sure.)</p> <pre><code>&gt;&gt;&gt; lst1 = [1, 2, 3]\n&gt;&gt;&gt; lst2 = [lst1, lst1]\n&gt;&gt;&gt; lst2\n[[1, 2, 3], [1, 2, 3]]\n&gt;&gt;&gt; lst1[0] = 42\n&gt;&gt;&gt; lst1\n[42, 2, 3]\n</code></pre> <p>Nothing odd so far.  Let's continue the same interpreter session.</p> <pre><code>&gt;&gt;&gt; lst2\n[[42, 2, 3], [42, 2, 3]]  # ?!?\n&gt;&gt;&gt; lst2[0][0] = 1\n&gt;&gt;&gt; lst2\n[[1, 2, 3], [1, 2, 3]]    # ?!?\n&gt;&gt;&gt; lst1\n[1, 2, 3]                 # ?!?\n</code></pre> <p>Here's another puzzle.</p> <pre><code>&gt;&gt;&gt; lst1 = [1, 2, 3]\n&gt;&gt;&gt; lst2 = lst1 * 3\n&gt;&gt;&gt; lst2\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n&gt;&gt;&gt; lst3 = [lst1] * 3\n&gt;&gt;&gt; lst3\n[[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n&gt;&gt;&gt; lst1[0] = 42\n&gt;&gt;&gt; lst1\n[42, 2, 3]\n&gt;&gt;&gt; lst2\n[1, 2, 3, 1, 2, 3, 1, 2, 3]\n&gt;&gt;&gt; lst3\n[[42, 2, 3], [42, 2, 3], [42, 2, 3]]\n</code></pre> <p>Why do all the <code>1</code>s in <code>lst3</code> change to <code>42</code> but the <code>1</code>s in <code>lst2</code> don't?</p> <ol> <li> <p>If you've programmed in other languages, be aware that what Python calls a \"list\" is pretty much the same as what other languages call an \"array\". The main difference is that Python lists can easily be expanded, which is not always true for arrays in other languages.\u00a0\u21a9</p> </li> <li> <p>If you learn the C language, you will find out why this is.\u00a0\u21a9</p> </li> <li> <p>That's kind of a shame. If errors always ended up raising exceptions, we would know that our programs were correct as long as there are no exceptions raised when we run them! Alas, it's not that simple.\u00a0\u21a9</p> </li> <li> <p>We haven't talked about the <code>join</code> method yet, but you can look it up in the Python online documentation.\u00a0\u21a9</p> </li> <li> <p>The word \"pop\" comes from the stack data structure, which you'll learn about in CS 2. Python lists can be used as stacks.\u00a0\u21a9</p> </li> <li> <p>There are other ways to sort using this method. See the Python documentation for details.\u00a0\u21a9</p> </li> <li> <p>There are actually two distinct ways to copy lists. The easy way works for most lists, and the harder way works for all lists. We'll see both of them.\u00a0\u21a9</p> </li> </ol>"},{"location":"9/reading9/","title":"Reading 9: Loops (part 1)","text":"<p>My belt holds my pants up, but the belt loops hold my belt up. I don't really know what's happening down there. Who is the real hero? - Mitch Hedberg</p> <p>We've learned a lot of Python in the readings so far, but there are still a few fundamental programming constructs we haven't seen yet. In this reading we will start exploring loops, and next reading we will cover conditionals. We will complete our discussion of loops in two readings.</p>"},{"location":"9/reading9/#what-a-loop-is","title":"What a loop is","text":"<p>One of the basic things that programs have to be able to do is to repeat a chunk of code over and over. Sometimes there is something that changes every time we execute the chunk of code, and sometimes there isn't. For instance, we might want to print a greeting ten times. In that case, we would be executing the exact same code (print the greeting) ten times. Or we might want to print the numbers from 1 to 20, one per line. In that case, something would change each time (the number to print). Sometimes more than one thing changes each time.</p> <p>In order to allow us to execute chunks of code over and over, programming languages like Python contain loop statements and syntax. Nearly every programming language has loop statements with special syntax, but unfortunately every language seems to choose different syntax for what is basically the same construct. Fortunately, Python's loop syntax is simple and easy to pick up.</p>"},{"location":"9/reading9/#pythons-loop-statements","title":"Python's loop statements","text":"<p>Python has two kinds of loop statements: <code>for</code> loops and <code>while</code> loops. These are named after the keywords <code>for</code> and <code>while</code>. In this reading we'll teach you about <code>for</code> loops, because they are the most common kind of loop in Python programs. We'll teach you about <code>while</code> loops in a couple of readings.<sup>1</sup></p>"},{"location":"9/reading9/#loops-and-lists","title":"Loops and lists","text":"<p>We postponed discussing loops until we learned about lists for a good reason: loops are incredibly useful when used with lists. One common code pattern of a loop used with a list looks like this:</p> <ul> <li>for each element in a list,</li> <li>do the following with the element,</li> <li>and repeat until all the elements in the list have been processed.</li> </ul> <p>Pseudocode</p> <p>What we've just written is an example of what is called pseudocode. It's like code, but written for the benefit of humans, not computers. It describes a computation in English with enough detail that it could in principle be converted to a programming language like Python. Writing pseudocode can be a powerful design technique for working out a solution to a programming problem before you start the actual coding.</p> <p>An example of this might be the following: for each element of the following list, print the element.</p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words:\n    print(word)\n</code></pre> <p>When run, this will print out:</p> <pre><code>Monty\nPython\nand\nthe\nHoly\nGrail\n</code></pre> <p>(one word per line).</p>"},{"location":"9/reading9/#for-loop-syntax","title":"<code>for</code> loop syntax","text":"<p>The syntax of the <code>for</code> loop is basically the following:</p> <pre><code>for &lt;item&gt; in &lt;list&gt;:\n    &lt;chunk of code&gt;\n</code></pre> <p>Both <code>for</code> and <code>in</code> are keywords (reserved words). The <code>&lt;item&gt;</code> is a variable that will refer to a particular element in the list <code>&lt;list&gt;</code>. The <code>&lt;list&gt;</code> can be either an actual list, a variable which refers to a list, or an expression which evaluates to a list.</p> <p>Note</p> <p>The colon character (<code>:</code>) at the end of the <code>for</code> line is required, much like at the end of a <code>def</code> line in a function definition.</p> <p>The <code>&lt;chunk of code&gt;</code> part is called a block; it consists of one or more lines of Python code, all indented the same.<sup>2</sup></p> <p>The way the loop works is as follows.</p> <ol> <li>The first element of the list <code>&lt;list&gt;</code>    is assigned to the <code>&lt;item&gt;</code> variable.</li> <li>The body of the loop is evaluated.</li> <li>Then the next element of the list    is assigned to the <code>&lt;item&gt;</code> variable and the body is evaluated again.</li> <li>This continues until there are no more elements in the list.</li> <li>After the <code>for</code> loop has completed evaluating,    Python goes on to the next line after the loop.</li> </ol> <p>Lists and iterables</p> <p>The thing that goes in the <code>&lt;list&gt;</code> place in</p> <pre><code>for &lt;item&gt; in &lt;list&gt;:\n    &lt;chunk of code&gt;\n</code></pre> <p>doesn't actually have to be a list. There are many other things that can go there, including strings and other data structures like tuples and dictionaries that we haven't seen yet. Any Python value that is an iterable can go in that place. An iterable basically means \"something that can be looped over in a <code>for</code> loop\". We'll explain this in more detail in later readings, and we'll show you how to use <code>for</code> loops with strings below.</p>"},{"location":"9/reading9/#a-simple-example","title":"A simple example","text":"<p>Let's revisit the simple example above:</p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words:\n    print(word)\n</code></pre> <p>We know that this will print out the words in the list, one per line. But how does it actually work?</p> <p>When the loop starts, the first element of the list, which is <code>'Monty'</code>, gets assigned to the variable <code>word</code>. Then the body prints that word. Then the second element of the list (<code>'Python'</code>) gets assigned to <code>word</code>, the word gets printed, and so on until all the words in the list have been printed. Once there are no more words in the list to bind to <code>word</code>, the <code>for</code> loop has finished executing.</p> <p>So what Python ends up doing when it evaluates the loop is basically the following:</p> <pre><code>word = 'Monty'\nprint(word)\nword = 'Python'\nprint(word)\nword = 'and'\nprint(word)\n...\n</code></pre> <p>but it's much easier and more concise to express this with the <code>for</code> loop.</p> <p>The list <code>title_words</code> isn't altered in the <code>for</code> loop; Python simply fetches its elements one at a time in order and assigns then to the <code>word</code> variable. There is no significance to the variable name <code>word</code> either; we could call it <code>w</code> or <code>xxx</code> if we wanted to (as long as we changed the body of the loop accordingly), but it's a good idea to use meaningful variable names where possible.</p>"},{"location":"9/reading9/#multiline-blocks","title":"Multiline blocks","text":"<p>A <code>for</code> loop block can consist of multiple lines, all indented the same. Let's extend our simple example:</p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words:\n    print(word)\n    print('----')\n</code></pre> <p>This will print:</p> <pre><code>Monty\n----\nPython\n----\nand\n----\nthe\n----\nHoly\n----\nGrail\n----\n</code></pre> <p>After the block, the indentation has to go back to the previous level so Python knows that the block is finished:</p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words:\n    print(word)\n    print('----')\nprint('All done!')\n</code></pre>"},{"location":"9/reading9/#loop-syntax-errors","title":"Loop syntax errors","text":""},{"location":"9/reading9/#forgetting-the-colon","title":"Forgetting the colon","text":"<p>A really, really common error is to forget to put the colon character at the end of the <code>for</code> line:<sup>3</sup></p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words\n    print(word)\n</code></pre> <p>Here's what will happen:</p> <pre><code>for word in title_words\n                      ^\nSyntaxError: invalid syntax\n</code></pre> <p>Like it or not, you have to put that colon in!</p>"},{"location":"9/reading9/#bad-indentation","title":"Bad indentation","text":"<p>If the <code>for</code> loop block has more than one line, the lines have to be indented exactly the same. Failure to do this gives you one of three syntax errors.</p> <p>Too much indentation:</p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words:\n    print(word)\n     print('----')\n</code></pre> <p>gives:</p> <pre><code>    print('----')\n    ^\nIndentationError: unexpected indent\n</code></pre> <p>Too little indentation:</p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words:\n    print(word)\n   print('----')\n</code></pre> <p>gives:</p> <pre><code>    print('----')\n                ^\nIndentationError: unindent does not match any outer indentation level\n</code></pre> <p>Python knows that you are indenting less than the previous line, but this is only legal when there is some other code with that indent level (like the <code>for</code> line); here, there isn't one.</p> <p>These two syntax errors are pretty obvious. But there is one more which can be extremely hard to detect. Sometimes when you're writing code in a text editor, the editor will use tab characters to indent code. Other times it might use spaces, or a combination of the two. If different lines in a block are indented using tabs on some lines and spaces on other lines, you can get syntax errors even if it looks like they're indented exactly the same!</p> <p>It's hard to show you what this would look like, but let's imagine that in your editor, tab characters look like four space characters. We'll write a tab character like this: <code>&lt;tab&gt;</code> so you can see them. Consider this code:</p> <pre><code>title_words = ['Monty', 'Python', 'and', 'the', 'Holy', 'Grail']\nfor word in title_words:\n    print(word)\n&lt;tab&gt;print('----')\n</code></pre> <p>The code will look perfectly indented. But Python will give you a syntax error:</p> <pre><code>    print('----')\n                ^\nTabError: inconsistent use of tabs and spaces in indentation\n</code></pre> <p>The reason this happens is that the line <code>print(word)</code> is indented using four spaces but the line <code>print('----')</code> is indented using a tab character. Even though these may look the same, Python considers them to be different, since Python doesn't know how many characters wide a tab character appears in your editor or terminal (since you can set this to whatever you want).</p> <p>This is one reason why every Python style guide says not to use tab characters for indentation.<sup>4</sup></p> <p>Tabs vs. spaces</p> <p>See this video to get a deeper insight into the tabs vs. spaces controversy.</p>"},{"location":"9/reading9/#application-writing-the-sum-function","title":"Application: writing the <code>sum</code> function","text":"<p>We've already seen the built-in <code>sum</code> function:</p> <pre><code>temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\navg_temp = sum(temps) / 7\nprint(avg_temp)\n</code></pre> <p>This prints:</p> <pre><code>42.42857142857143\n</code></pre> <p>Now that we know how to write loops, we can write <code>sum</code> ourselves. Here's our first attempt.</p> <pre><code>def sum(nums):\n    \"\"\"Sum the elements of a list of numbers.\"\"\"\n    sum_nums = 0\n    for n in nums:\n        sum_nums = sum_nums + n\n    return sum_nums\n</code></pre> <p>Note</p> <p>Built-in functions like <code>sum</code> are not keywords. You can redefine them, or even use the name <code>sum</code> for something completely unrelated. This can lead to some very hard-to-find bugs, though, so we recommend that you don't do this. Here, we are deliberately replacing the built-in <code>sum</code> function with a function which does the same thing, so it's OK.</p> <p>Let's test it:</p> <pre><code>temps = [59.6, 72.4, 68.5, 79.0, 66.4, 77.1, -126.0]\navg_temp = sum(temps) / 7\nprint(avg_temp)\n</code></pre> <p>This prints:</p> <pre><code>42.42857142857143\n</code></pre> <p>so we're good.</p>"},{"location":"9/reading9/#aside-the-operator-and-friends","title":"Aside: the <code>+=</code> operator and friends","text":"<p>Look at the <code>sum</code> function we wrote above, and in particular this line:</p> <pre><code>sum_nums = sum_nums + n\n</code></pre> <p>Lines of the form <code>x = x + y</code> are extremely common in programming. The meaning of this line is \"add <code>y</code> to the number <code>x</code>\". Since this is so common, there is a shortcut operator that does the same thing, but more concisely. The operator is called <code>+=</code> and looks like this:</p> <pre><code>sum_nums += n\n</code></pre> <p>Similarly, there are other <code>&lt;op&gt;=</code> operators such as <code>-=</code>, <code>*=</code>, <code>/=</code> and so on which work the same way. So <code>x -= y</code> is the same as <code>x = x - y</code>; <code>x *= y</code> is the same as <code>x = x * y</code> etc.</p> <p>We recommend that you use these operators instead of the longer forms for two reasons:</p> <ol> <li>It's shorter.</li> <li>It's easier to read once you get used to it.</li> </ol>"},{"location":"9/reading9/#sum-again","title":"<code>sum</code> again","text":"<p>Let's update our <code>sum</code> function with this spiffy new operator:</p> <pre><code>def sum(nums):\n   \"\"\"Sum the elements of a list of numbers.\"\"\"\n   sum_nums = 0\n   for n in nums:\n       sum_nums += n\n   return sum_nums\n</code></pre> <p>And that's all we'll say about this function!</p>"},{"location":"9/reading9/#loop-terminology","title":"Loop terminology","text":"<p>At this time, it's appropriate to define some terms that are commonly used with loops:</p> loop body <p>The indented block of code that is executed multiple times in a loop.</p> iteration <p>A single pass through the loop body.</p> iterate over <p>Go through a data structure (e.g. a list) element-by-element, executing the loop body on each element.</p> iterable <p>A Python data structure (such as a list) that can be iterated over in a loop.</p> <p>Don't worry if these definitions don't seem crystal clear to you at this point. As we learn more about what kinds of data can be used in a <code>for</code> loop it will all become clear.</p>"},{"location":"9/reading9/#loop-pitfall","title":"Loop pitfall","text":"<p>In a <code>for</code> loop body, it's not a good idea to manually change either the loop variable or the list being iterated over in the body of the loop. The main reason is that what this does is hard to predict unless you really understand Python well. Python is changing the loop variable for you on every iteration of the loop body, so you shouldn't need to change it yourself. And if you change the list being iterated over, the loop may finish earlier or later than you expected, or behave in other non-intuitive ways.</p> <p>Note</p> <p>There will be problems on the assignments exploring this and other pitfalls.</p>"},{"location":"9/reading9/#loops-and-strings","title":"Loops and strings","text":"<p>We mentioned above that in the <code>for</code> loop syntax, which we wrote as:</p> <pre><code>for &lt;item&gt; in &lt;list&gt;:\n    &lt;chunk of code&gt;\n</code></pre> <p>the <code>&lt;list&gt;</code> part could actually be things other than lists. One such thing is a string. If you loop over a string in a <code>for</code> loop, you are iterating over the characters.</p> <pre><code>for char in 'Python':\n    print(char)\n</code></pre> <p>This will print:</p> <pre><code>P\ny\nt\nh\no\nn\n</code></pre> <p>In each iteration of the <code>for</code> loop, the next character of the string <code>Python</code> is assigned to the variable <code>char</code>.</p> <p>So even though a string is not a list, it can behave like one when iterated over in a <code>for</code> loop. We already know that both lists and strings are what Python calls sequences, so you might think that any Python sequence can be looped over in a <code>for</code> loop. And that is in fact the case. (We will soon see that even some non-sequences can be looped over in a <code>for</code> loop.)</p>"},{"location":"9/reading9/#nested-loops","title":"Nested loops","text":"<p>You are allowed to put one <code>for</code> loop inside another. This is called a nested loop and is actually quite common. Here's a simple example:</p> <pre><code>title = ['Monty', 'Python']\nfor word in title:\n    for char in word:\n        print(char)\n</code></pre> <p>The first <code>for</code> loop starts on line 2. Its loop body consists of lines 3 and 4, which is also a <code>for</code> loop. We say that the <code>for</code> loop starting from line 2 is the \"outer\" <code>for</code> loop and the one starting from line 3 is the \"inner\" <code>for</code> loop. Notice that the loop body of the inner <code>for</code> loop (line 4) is indented twice: once because it's in the loop body of the outer <code>for</code> loop and once because it's also in the loop body of the inner <code>for</code> loop.</p> <p>In the first iteration of the outer <code>for</code> loop, the variable <code>word</code> is <code>'Monty'</code>. Then in the inner <code>for</code> loop, the variable <code>char</code> is <code>'M'</code>, then <code>'o'</code>, etc. Once all the characters in <code>'Monty'</code> have been processed, the variable <code>word</code> in the outer <code>for</code> loop becomes <code>'Python'</code>, and then in the inner <code>for</code> loop the variable <code>char</code> becomes <code>'P'</code>, <code>'y'</code>, etc. Running this code gives this result:</p> <pre><code>M\no\nn\nt\ny\nP\ny\nt\nh\no\nn\n</code></pre> <p>We can write code that is inside the first loop but which comes after the nested loop. That code is executed once the nested loop is finished executing.</p> <pre><code>title = ['Monty', 'Python']\nfor word in title:\n    for char in word:\n        print(char)\n    print('---')  # executed after nested loop finishes\n</code></pre> <p>Running this code gives this result:</p> <pre><code>M\no\nn\nt\ny\n---\nP\ny\nt\nh\no\nn\n---\n</code></pre> <p>You can nest loops as deeply as you like, though it's pretty rare to see loops nested more than two deep.</p>"},{"location":"9/reading9/#coming-up","title":"Coming up","text":"<p>We have more to say about loops, and in particular, Python's other loop construct, the <code>while</code> loop. We'll get to that shortly, but in the next reading we will talk about conditionals (<code>if</code> statements), another fundamental building block of computer programs.</p> <ol> <li> <p>If you know other programming languages like C, C++ or Java, be aware that Python's <code>for</code> loop is quite different from the <code>for</code> loop construct in those languages.\u00a0\u21a9</p> </li> <li> <p>Blocks are found in many other places in Python besides loops. The body of a function, for instance, is a block.\u00a0\u21a9</p> </li> <li> <p>I've been programming in Python for years and I still make this mistake from time to time.\u00a0\u21a9</p> </li> <li> <p>Any decent text editor will allow you to configure it so that when you hit the tab key, four spaces are inserted. We strongly recommend that you figure out how to do this, and do it. It will save you a lot of time chasing down dumb syntax errors. If you're using Visual Studio Code, don't worry: it converts tabs to spaces automatically when editing Python code (assuming you installed the ms-python Python extension or something equivalent).\u00a0\u21a9</p> </li> </ol>"}]}