{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The CS 128 book: Winter 2024","text":"<p>This book is the official document repository for the Caltech CS 128 course (Interactive Theorem Proving) for the Winter 2024 term.</p> <p>The course instructor is Mike Vanier. See the syllabus for administrative information.</p> <p>Please read this page for an overview of the course.</p>"},{"location":"admin/collab/","title":"Collaboration policies","text":""},{"location":"admin/collab/#overview","title":"Overview","text":"<p>The CS128 collaboration policies determine if, and how much, you are allowed to collaborate with other students while working on your assignments.</p> <p>Please read this document to the very end, because you are responsible for abiding by all the rules set forth here. Failure to abide by these rules may cause you to get sent to the Board of Control (BoC), and that is not pleasant for anyone concerned. Therefore, we want to be extra clear on what constitutes fair collaboration in this course.</p> <p>Note</p> <p>In some places in this document, you will read that some kind of behavior is strictly forbidden. We are not trying to scare you or intimidate you, and we're not trying to be jerks. We just want to make absolutely sure that you know what the rules are, and saying that something is strictly forbidden is pretty unambiguous. (We apologize in advance if you find this annoying.)</p>"},{"location":"admin/collab/#basic-policy","title":"Basic policy","text":"<p>In what follows, we will use the word \"code\" to refer to the Coq scripts that you submit as your homework.</p> <p>You are welcome to collaborate informally on your assignments with other individuals who are taking the course, but you must write all of your own code and you must not look at other students' code, except to help them as described below. Copying another student's code verbatim or nearly verbatim (from a file, a whiteboard, a screen share or anywhere else) is not acceptable and is an Honor Code violation. Taking another student's file and modifying it to make it look different is definitely not acceptable and is an Honor Code violation. Consulting a printed or electronically displayed version of another student's code and referring to it while you write your own code is not acceptable either, and is also an Honor Code violation. Having someone dictate code while you type isn't acceptable either. Basically, you have to do your own work.</p> <p>All of the above also applies to student work from previous years. We re-use some problems in assignments, and copying answers from an assignment that was submitted in previous years is an Honor Code violation just as much as copying from a student who is currently taking the course.</p>"},{"location":"admin/collab/#helping-others-and-the-50-foot-rule","title":"Helping others and the \"50-foot rule\"","text":"<p>It is common for students to want to help other students to write and debug their assignments. While we prefer that you go to one of the course teaching assistants or the instructor when you need help on the assignments, we don't forbid you from seeking help from other students or offering your help to other students. However, we do insist on some guidelines to make the process fair for everyone.</p> <p>When you are helping another student with their homework, you are acting as an unofficial teaching assistant, and thus you must behave like one. A teaching assistant will not just tell you the answer or dictate code to you; they will help you work through the problem so that you understand what you are doing wrong. If you don't have the time or the inclination to do this, do not assist other students. If you just give them your code, you are violating the Honor Code and both you and the people you are giving the code to may be in for some serious consequences.</p> <p>As a way of clarifying the way in which you can help other students (especially when it comes to debugging their code), we want you to obey the \"50 foot rule\". This rule states that if you help another student with their programming problems (including debugging), you must not consult your own code while doing so. Specifically, we ask that your own code be at least 50 feet away i.e. not visible to you or the person you are helping while you are helping them. (It doesn't have to be exactly 50 feet; the point is that you can't see your code while helping the other person and you shouldn't run back and forth between your computer with your code and the computer of the person you're helping.) The slogan of the 50-foot rule is: \"Help them with your brain, not with your code.\" Please do not try to find a loophole kind of way around this e.g. projecting your code on a building 50 feet away; that is clearly not what we mean. Posting your code on a pastebin-like internet site, emailing your code to other people, sharing your screen with your code on it, printing it out, or even referring to it on your laptop while helping someone else, are all clear violations of the collaboration policy for this course. Also, we don't want you to put your code up on a computer in a room 50 feet away from where you're helping someone and run back and forth, dictating a line at a time. If you can't help them without consulting your code, don't help them. Refer them to a teaching assistant.</p> <p>Note</p> <p>The 50-foot rule only applies when helping another student in person.</p> <p>Helping another student using teleconferencing software like Zoom, Skype, Discord etc. is covered below, but one aspect of it is that screen sharing is not permitted.</p> <p>We realize that it's more convenient to ask someone in your house for help than to walk all the way to the Annenberg building. A possible solution is to get to know a TA and meet with them in their dorm room (if they are willing). Another is to meet with a TA on Zoom.</p>"},{"location":"admin/collab/#teleconferencing-software-eg-zoom","title":"Teleconferencing software (e.g. Zoom)","text":"<p>If you use teleconferencing software (like Zoom) or software with teleconferencing capabilities (like Discord with VOIP), you may not share your screen with other students, whether to help them or to get help from them. This also applies to non-students (with the obvious exception of the course instructor or TAs).</p> <p>Also, it is strictly forbidden to dictate code over teleconferencing software. This is consistent with the rules in the other sections of this document.</p>"},{"location":"admin/collab/#discussion-boards-and-chat-programs","title":"Discussion boards and chat programs","text":"<p>You are strictly forbidden from posting code from your assignments to a discussion board (such as Piazza) unless it's a private message to one or more instructors/TAs. If this happens you may lose the ability to use the discussion board for any purpose.</p> <p>This also applies to programs with chat features that are not used in the course (like Slack or Discord), or email for that matter.</p>"},{"location":"admin/collab/#use-of-websites","title":"Use of websites","text":"<p>It is strictly forbidden to post any of the problems from the assignments onto websites (for instance, Stack Overflow), and anyone caught doing this will be charged with an Honor Code violation. This includes problems that are similar to assignment problems even if not identical. If you find a discussion of course-related material on internet websites, you may read it as long as the discussion is not about a problem that is identical to or very similar to a problem on one of the course assignments. However, do not transcribe code from the internet into your homework submissions.</p> <p>It is strictly forbidden to look at any solutions to any previous years' {course} work posted on internet code repository sites (including but not limited to GitHub, GitLab, BitBucket, etc.). It is also strictly forbidden to put your own code on such a repository unless (a) it is a private repository, and (b) you do not allow anyone else access to this private repository. You may also not fork any such repositories that you might happen to find; we will consider this as clear evidence of intent to plagiarize.</p>"},{"location":"admin/collab/#use-of-code-hinting-software-eg-github-copilot-or-chatgpt","title":"Use of code hinting software (e.g. Github Copilot or ChatGPT)","text":"<p>You are strictly forbidden to use code hinting software such as Github Copilot or ChatGPT for any part of this course.  (This should be obvious.)</p>"},{"location":"admin/collab/#summary","title":"Summary","text":"<p>These are resources that you may or may not be allowed to consult while working on your assignments and exams.</p> Item Status Course book OK Course textbook (Software Foundations) OK Official Coq documentation OK Other Coq documentation OK Other Coq books OK Your notes OK Notes of other students Not allowed Your graded assignments OK Other students' graded assignments Not allowed Other students' ungraded assignments Not allowed Other code written by anyone else that answers an assigned problem Not allowed Solutions to assignment problems from a previous year Not allowed Material posted on internet forums that answers specific problems Not allowed Material in non-course code repositories (Github, Bitbucket, Gitlab etc.) Code hinting software (e.g. Github Copilot, ChatGPT) Not allowed"},{"location":"admin/collab/#consequences-for-violating-these-policies","title":"Consequences for violating these policies","text":"<p>Be aware that letting another student copy from you is just as bad as copying from another student, and can get you into just as much trouble.</p>"},{"location":"admin/collab/#finally","title":"Finally...","text":"<p>If you have any questions about the course collaboration policies, please contact the instructor.  Do not ask the teaching assistants; they may not give you the best answer.</p> <p>We realize that the vast majority of you (hopefully all of you) have no intention of cheating or overcollaboration in any way, and we hope that this collaboration policy won't get in the way of your enjoyment of the course.</p>"},{"location":"admin/syllabus/","title":"Syllabus","text":"<p>This is the syllabus for CS 128 (Interactive Theorem Proving) for the Winter 2024 term.</p>"},{"location":"admin/syllabus/#overview","title":"Overview","text":"<p>This course is an introduction to the field of interactive theorem proving using the Coq theorem prover. Material covered will include:</p> <ul> <li> <p>Dependently-typed functional programming</p> </li> <li> <p>Proving theorems using tactics</p> </li> <li> <p>Logic, and in particular intuitionistic logic</p> </li> <li> <p>Induction</p> </li> <li> <p>The Curry-Howard isomorphism</p> </li> <li> <p>Proving programs correct</p> </li> </ul> <p>It is very difficult to describe the process of working with a theorem prover; the experience will be unlike anything you\u2019ve ever done before. We hope you enjoy it as much as we enjoy teaching it! <sup>1</sup></p>"},{"location":"admin/syllabus/#prerequisites","title":"Prerequisites","text":"<p>The prerequisite for the course is either of the following:</p> <ul> <li>You have taken and passed CS 4.</li> <li>You get special permission from the instructor.</li> </ul> <p>The CS 4 requirement is important because we don\u2019t have time to teach basic functional programming in this course, and programming in Coq is very similar in some ways to programming in functional languages like OCaml.  Despite this, you won\u2019t be doing OCaml programming in this course.</p> <p>We are very interested in getting math majors to take this course, so please pass the word on to any math majors you know, even if they haven\u2019t taken CS 4!</p>"},{"location":"admin/syllabus/#people","title":"People","text":""},{"location":"admin/syllabus/#instructor","title":"Instructor","text":"<p>The instructor/lecturer for the course is Mike Vanier (mvanier@cms.caltech.edu).  Mike's pronouns are he/him.</p> <p>Mike's office hours will be announced on the course Piazza page. His office hours will be held on Zoom, and the times will be posted on the course Piazza page.</p>"},{"location":"admin/syllabus/#teaching-assistants","title":"Teaching assistants","text":"<p>The teaching assistant is Emeka Nkurumeh.</p> <p>Teaching assistant office hours will take place either in-person, on Zoom, or both, depending on the preference of the TA.</p> <p>TA office hours will be announced on the course Piazza page.</p>"},{"location":"admin/syllabus/#lectures","title":"Lectures","text":"<p>Lectures will be held in room 106 of the Annenberg building on Mondays, Wednesdays, and Fridays from 11 AM to noon.</p> <p>Unlike many CS classes, this one will be highly interactive. (The course is Interactive Theorem Proving, after all!) Lectures are not optional; lecture participation is worth marks (see below). Students will be asked to help prove theorems in class.</p>"},{"location":"admin/syllabus/#software","title":"Software","text":"<p>We will be using the Coq theorem prover exclusively in this course.  Here are some useful links:</p> <ul> <li> <p>The Coq home page.</p> </li> <li> <p>The Coq reference manual</p> </li> <li> <p>The CoqIDE (integrated development environment)   documentation</p> </li> </ul> <p>CoqIDE is part of the Coq Platform (which comes bundled with the entire Coq toolchain). There are other ways to set up Coq, but this is by far the easiest and the most reliable.</p> <p>The Coq setup document will walk you through the installation process.</p>"},{"location":"admin/syllabus/#assignments","title":"Assignments","text":"<p>There will be weekly assignments. Each assignment will normally consist of one or more Coq scripts with parts missing (typically, theorems stated but not proved). You will be expected to complete the theorems and submit the completed script(s) to CodePost.</p> <p>Assignments will be due on Wednesday at 2 AM.</p> <p>Each assignment will be given a grade out of a maximum of 10 points. The typical breakdown of points is as follow:</p> <ul> <li> <p>2 points for completing the in-class problems (this should be easy if you\u2019ve attended classes)</p> </li> <li> <p>5 points for independent problems (not covered in class)</p> </li> <li> <p>2 points for coming up with a novel problem using the tactics provided (not all assignments have this)</p> </li> <li> <p>1 point for feedback</p> </li> </ul> <p>Some scripts will be graded differently; notes will be included in the script indicating what the grading scheme is in those cases.</p>"},{"location":"admin/syllabus/#late-penalties","title":"Late penalties","text":"<p>Late assignments are penalized at the rate of 1 mark per day late.</p>"},{"location":"admin/syllabus/#rework","title":"Rework","text":"<p>Assignments can be reworked for up to 1 week. However, a reworked section<sup>2</sup> can only give you extra marks up to half the value of the section. So if you've already got half marks or more in a section, you can rework up to full marks, but if (say) you did no work at all for the section and submit a perfect rework, that will be worth half marks for that section. This is to encourage you to get your work done on time.</p> <p>Note</p> <p>When we say \"half the value of the section\" we mean \"half of a section\u2019s marks, rounded up to the nearest integer\", so that half of a 1-mark section is still 1, and half of a 5-mark section is 3.</p> <p>Reworks that are submitted after the one week rework period do not count.</p>"},{"location":"admin/syllabus/#grading","title":"Grading","text":"<p>Grades are assigned as follows:</p> <ul> <li>7 assignments, each worth 10 marks</li> <li>10 marks for in-class participation</li> </ul> <p>This adds up to a maximum grade of 80. Multiply by 100/80 to get your percentage grade (used for the grading scheme below).</p> <p>Note</p> <p>To get a good participation grade, you should attend the majority of lectures and participate when called upon (you'll see what we mean by this).</p> <p>The course is on grades.  We will assign letter grades as follows:</p> Numerical grade (out of 100%) Letter grade 95-100% A+ 90-95% A 85-90% A- 80-85% B+ 75-80% B 70-75% B- 68-70% C+ 65-68% C 60-65% C- 55-60% D &lt; 55% F <p>Note</p> <p>If you are taking the course P/F, the pass threshold is the same as the requirement for a D grade.</p>"},{"location":"admin/syllabus/#collaboration","title":"Collaboration","text":"<p>We expect that you will do your work by yourself and not collaborate on homework.  However, we do encourage you to post questions on the course Piazza site, as long as your posts don\u2019t give away a solution to a problem.  Please send a direct message to the instructors if you think your question would give away a solution.</p> <p>We will be providing a lot of help on Piazza and in office hours. The nature of this material is that it\u2019s extremely easy to get stuck on particular theorems and spend a lot of time pursuing an incorrect path.  In this case, please let us know before you get completely frustrated. Even when a particular approach to proving a theorem doesn\u2019t pay off, the experience of working through a problem with the theorem prover is very valuable.</p> <p>The collaboration policies document has more details on which kinds of collaboration are allowed, and which are not.  Please read that page!</p>"},{"location":"admin/syllabus/#references","title":"References","text":"<p>The course materials are adapted from the Software Foundations series of online textbooks, particularly book 1, Logical Foundations. We owe a great debt to Benjamin Pierce and his collaborators for making this material freely-available and of such high quality.</p> <p>If you want to explore Coq further, book 2 of Software Foundations, Programming Language Foundations, is a natural follow-up to the material in the course.  The other volumes in the SF series may also be of interest.</p> <p>If you are interested in using Coq to write provably-correct software, take a look at Adam Chlipala\u2019s book Certified Programming with Dependent Types, also available for free online (though you can buy a print copy if you like, and this would be a great way to express your appreciation to the author).</p>"},{"location":"admin/syllabus/#diversity-and-inclusion","title":"Diversity and Inclusion","text":"<p>You all belong in this class, and as such should expect to be treated by your classmates and the course staff with respect.  It is our goal, as the course staff, to provide an interesting and challenging environment that is conducive to your learning.  If any incident occurs that challenges this commitment to a supportive and inclusive environment, please let the instructors know so the issue can be addressed.</p>"},{"location":"admin/syllabus/#student-wellness","title":"Student Wellness","text":"<p>It is very important to us that you take care of your mental wellness throughout the course. Everyone on the course staff is available to chat, and you can always attend office hours for a non-academic conversation if necessary, or email the course instructor with any concerns you may have.</p>"},{"location":"admin/syllabus/#students-with-documented-disabilities","title":"Students with Documented Disabilities","text":"<p>Students who may need an academic accommodation based on the impact of a disability must initiate the request with Caltech Accessibility Services for Students (CASS). Professional staff will evaluate the request with required documentation, recommend reasonable accommodations, and prepare an Accommodation Letter for faculty dated in the current quarter in which the request is being made.  Students should contact CASS as soon as possible, since timely notice is needed to coordinate accommodations. The CASS web site is here.</p> <p>Undergraduate students should contact Dr. Lesley Nye, Associate Dean of Undergraduate Students (administrative contact: Beth Larranaga) and graduate students should contact Darrell Peterson, Associate Dean of Graduate Studies (administrative contact: Georgine Okura).</p> <ol> <li> <p>Working with a theorem prover has often been compared to playing a video game. You\u2019ll soon find out why.\u00a0\u21a9</p> </li> <li> <p>A \"section\" is (for instance) in-class problems, independent problems, etc. \u21a9</p> </li> </ol>"},{"location":"assignments/assignment1/","title":"Assignment 1: Introduction","text":""},{"location":"assignments/assignment1/#due-date","title":"Due date","text":"<p>This assignment is due on Wednesday, January 17 at 2 AM.</p>"},{"location":"assignments/assignment1/#source-files","title":"Source files","text":"<p>Assignment code is posted in the course Canvas page, in the Modules section.</p> <p>This assignment consists of the Coq scripts <code>Basics.v</code> and <code>Induction.v</code>.</p> <p>Note</p> <p>You will also need to create a <code>_CoqProject</code> file (in the same directory as the <code>.v</code> files) to be able to compile files. It should contain a single line:</p> <pre><code>-Q . LF\n</code></pre> <p>You should only need to create this file for this assignment, assuming that the <code>.v</code> files for all future assignments will be in the same directory.</p> <p>Problems include:</p> <ul> <li>problems worked in class (that you have to reproduce)</li> <li>new problems (not worked in class)</li> <li>writing a new theorem from scratch and proving it   (or doing one of the optional problems)</li> <li>feedback on the course</li> </ul>"},{"location":"assignments/assignment1/#grading","title":"Grading","text":"<p>The assignment will get a maximum of 10 points. The marking scheme is described in the syllabus and in the comments in the script. Note that different scripts may have slightly different grading schemes.</p>"},{"location":"assignments/assignment1/#what-to-hand-in","title":"What to hand in","text":"<p>Submit your completed files as the CodePost assignment <code>Assignment 1</code>.</p>"},{"location":"assignments/assignment1/#getting-help","title":"Getting help","text":"<p>If you get stuck on a problem, you can discuss it with the TA or the instructor during their office hours, or post questions on Piazza.</p> <p>Note</p> <p>If you are posting a question will give away part of an answer, please direct it to the instructors only!</p>"},{"location":"assignments/assignment2/","title":"Assignment 2: Lists and polymorphism","text":""},{"location":"assignments/assignment2/#due-date","title":"Due date","text":"<p>This assignment is due on Wednesday, January 24 at 2 AM.</p>"},{"location":"assignments/assignment2/#source-files","title":"Source files","text":"<p>Assignment code is posted in the course Canvas page, in the Modules section.</p> <p>This assignment consists of the Coq scripts <code>Lists.v</code> and <code>Poly.v</code>. You will also need the <code>_CoqProject</code> file to be able to compile files.</p>"},{"location":"assignments/assignment2/#grading","title":"Grading","text":"<p>The assignment will get a maximum of 10 points. The marking scheme is described in the syllabus. Note that the novel problems are collectively worth 2 marks and the feedback is collectively worth 1 mark for this set. (In other words, you are expected to write a novel problem and give feedback for each script.)</p>"},{"location":"assignments/assignment2/#what-to-hand-in","title":"What to hand in","text":"<p>Submit your completed files as the CodePost assignment <code>Assignment 2</code>.</p>"},{"location":"assignments/assignment2/#getting-help","title":"Getting help","text":"<p>If you get stuck on a problem, you can discuss it with the TA or the instructor during their office hours, or post questions on Piazza.</p> <p>Note</p> <p>If you are posting a question will give away part of an answer, please direct it to the instructors only!</p>"},{"location":"assignments/assignment3/","title":"Assignment 3: Tactics","text":""},{"location":"assignments/assignment3/#due-date","title":"Due date","text":"<p>This assignment is due on Wednesday, January 31 at 2 AM.</p>"},{"location":"assignments/assignment3/#source-files","title":"Source files","text":"<p>This assignment consists of the Coq script <code>Tactics.v</code>.</p>"},{"location":"assignments/assignment3/#grading","title":"Grading","text":"<p>The assignment will get a maximum of 10 points.  The marking scheme is described in the syllabus.</p>"},{"location":"assignments/assignment3/#what-to-hand-in","title":"What to hand in","text":"<p>Submit your completed files as the CodePost assignment <code>Assignment 3</code>.</p>"},{"location":"assignments/assignment3/#getting-help","title":"Getting help","text":"<p>If you get stuck on a problem, you can discuss it with the TA or the instructor during their office hours, or post questions on Piazza.</p> <p>Note</p> <p>If you are posting a question will give away part of an answer, please direct it to the instructors only!</p>"},{"location":"assignments/assignment4/","title":"Assignment 4: Logic","text":""},{"location":"assignments/assignment4/#due-date","title":"Due date","text":"<p>This assignment is due on Wednesday, Febuary 14 at 2 AM.</p>"},{"location":"assignments/assignment4/#source-files","title":"Source files","text":"<p>This assignment consists of the Coq script <code>Logic.v</code>.</p>"},{"location":"assignments/assignment4/#grading","title":"Grading","text":"<p>The assignment will get a maximum of 10 points.  The marking scheme is described in the syllabus.</p>"},{"location":"assignments/assignment4/#what-to-hand-in","title":"What to hand in","text":"<p>Submit your completed files as the CodePost assignment <code>Assignment 4</code>.</p>"},{"location":"assignments/assignment4/#getting-help","title":"Getting help","text":"<p>If you get stuck on a problem, you can discuss it with the TA or the instructor during their office hours, or post questions on Piazza.</p> <p>Note</p> <p>If you are posting a question will give away part of an answer, please direct it to the instructors only!</p>"},{"location":"assignments/assignment5/","title":"Assignment 5: Inductively Defined Propositions, part 1","text":""},{"location":"assignments/assignment5/#due-date","title":"Due date","text":"<p>This assignment is due on Thursday, Febuary 22 at 2 AM.</p>"},{"location":"assignments/assignment5/#source-files","title":"Source files","text":"<p>This assignment consists of the Coq script <code>IndProp1.v</code>.</p>"},{"location":"assignments/assignment5/#grading","title":"Grading","text":"<p>The assignment will get a maximum of 10 points.  The marking scheme is described in the syllabus.</p>"},{"location":"assignments/assignment5/#what-to-hand-in","title":"What to hand in","text":"<p>Submit your completed files as the CodePost assignment <code>Assignment 5</code>.</p>"},{"location":"assignments/assignment5/#getting-help","title":"Getting help","text":"<p>If you get stuck on a problem, you can discuss it with the TA or the instructor during their office hours, or post questions on Piazza.</p> <p>Note</p> <p>If you are posting a question will give away part of an answer, please direct it to the instructors only!</p>"},{"location":"assignments/setup/","title":"Setting up Coq on your computer","text":""},{"location":"assignments/setup/#installing-coqide","title":"Installing CoqIDE","text":"<p>The theorem proving software we are using for this course is called Coq.<sup>1</sup> Coq is developed at the INRIA group in France which also develops OCaml.<sup>2</sup> We will use Coq version 8.17.1. (Slightly earlier or even later versions should also work.)</p> <p>In most CS/programming courses, all you need to do to use the course\u2019s programming language is to use the language compiler/interpreter and a text editor. It is possible to use Coq this way as well; the compiler is called <code>coqc</code> and the interpreter is called <code>coqtop</code>. However, Coq is much more pleasant to use if you have a proper integrated development environment (IDE) for the system. IDEs for Coq include editors, but also include facilities for stepping through a proof, checking to see if a proof is actually valid, and printing informative messages.</p> <p>Note</p> <p>I (Mike) generally hate using IDEs for programming. But even I have to admit that using a theorem prover like Coq without an IDE is basically unbearable. If you are really hard-core, you can try using just <code>coqtop</code> instead of an IDE, but I confidently predict that you will go back to using an IDE within minutes.</p> <p>In our opinion, at the present time there are only three decent Coq IDEs:</p> <ul> <li> <p>the CoqIDE program<sup>3</sup>,</p> </li> <li> <p>the Visual Studio Code editor   extended with the Coq plugin,</p> </li> <li> <p>and the Emacs editor extended with the   Proof General package.</p> </li> </ul> <p>In class, we will primarily be using the CoqIDE program. However, you are encouraged to try the other IDEs if you like. In particular, both Visual Studio Code and Emacs offer far superior editing facilities than CoqIDE.</p> <p>CoqIDE can be installed in several ways. By far the best way is to download and install the Coq Platform. This bundles together all necessary software in a known-working configuration for all major operating systems.</p> <p>A different way to install Coq is using OCaml and its package manager <code>opam</code>; this can be done from the terminal:</p> <pre><code>$ opam update\n$ opam install coqide\n</code></pre> <p>However, this may not work, particularly on Windows systems. In addition, sometimes CoqIDE compiled this way doesn't work (e.g. it crashes when used). Therefore, we do not recommend this method unless nothing else works.</p> <p>Once you have installed CoqIDE, you are all set! The documentation for CoqIDE is here.</p>"},{"location":"assignments/setup/#optional-setting-up-visual-studio-code-for-coq","title":"OPTIONAL: Setting up Visual Studio Code for Coq","text":"<p>If you want to try the Visual Studio Coq interface (which we will refer to henceforth as \"VSCoq\"), here are the steps:</p> <ol> <li> <p>Install Visual Studio Code from this site. Spend some time getting familiar with it.</p> </li> <li> <p>In a terminal, enter these commands:</p> <pre><code>$ opam update\n$ opam install coq\n</code></pre> <p>(Note that we are not installing <code>coqide</code>, because you don\u2019t need it if you are using Visual Studio Code).</p> </li> <li> <p>Install the <code>vscoq</code> plugin for VS Code from the VSCoq Github page. Follow the setup instructions given on that page. In particular, you have to tell VS Code where to find the <code>coqtop</code> program. In a terminal, enter this command:</p> <pre><code>$ which coqtop\n</code></pre> <p>to find out. NOTE: This assumes a Unix-like system, like Linux, MacOS, or Windows with WSL (Windows Subsystem for Linux).</p> </li> <li> <p>Load a Coq script file (like <code>Basics.v</code>) into VS Code. Type <code>F1</code> and enter <code>coq</code> in the dialog box at the top to list all VSCoq commands along with their keyboard shortcuts. Step through the file for practice.</p> </li> </ol> <p>The main downside to using the VS Code interface is that it lacks the \"compile buffer\" feature.  This means that you will have to compile files manually.  For the Software Foundations files, this isn\u2019t hard; usually you just have to do this (for the example of <code>Basics.v</code>:</p> <pre><code>$ coqc -Q . LF Basics.v\n</code></pre> <p>Some examples may be more complicated, though.</p> <p>Another minor issue with VSCoq is that some of the informative messages printed by CoqIDE aren\u2019t printed by VSCoq, though the important ones are.</p>"},{"location":"assignments/setup/#testing-your-installation","title":"Testing your installation","text":"<p>Test your installation by stepping through the <code>Basics.v</code> script, which is part of the first homework assignment.</p>"},{"location":"assignments/setup/#reference","title":"Reference","text":"<p>You should check out the Coq reference manual and bookmark it \u2014 you'll be using it a lot!</p> <ol> <li> <p>\"Coq\" is the French word for \"rooster\" (which explains the logo), and is also a double pun: one of the principal developers of Coq is Thierry Coquand. One of Thierry\u2019s contributions to Coq was to specify the original type theory of the system, which was called the \"Calculus of Constructions\" or \"Coc\". We will try to avoid making crude jokes about the name.\u00a0\u21a9</p> </li> <li> <p>There is a long relationship between OCaml and Coq. It\u2019s not an overstatement to say that the principal reason OCaml was developed in the first place was so that there was a language in which Coq could be written. Historically, languages of the ML family (including OCaml) have largely been used as the \"meta-languages\" of theorem provers (hence the name \"ML\").\u00a0\u21a9</p> </li> <li> <p>There\u2019s a pun here too; it\u2019s the \"cockeyed\" IDE. *sigh*\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/welcome/","title":"Welcome to CS 128!","text":"<p>This book serves as the official course notes, so that lectures are less of a brain dump of details and more an opportunity to interactively go through course topics, answer questions, and get you thinking about the material. In addition, we will be posting most of the course-related content in these pages, including:</p> <ul> <li>the course syllabus   (which you should read as soon as possible!)</li> <li>administrative details</li> <li>instructions on how to set up your computer with the course software</li> <li>assignments</li> </ul> <p>and anything else we consider useful. Your feedback on these notes will be very helpful to us in improving them, so please let us know if anything is hard to understand or if something that should be here isn't.</p> <p>Course-related material we won't post here includes:</p> <ul> <li>lecture slides</li> <li>code supplied to students for assignments</li> <li>some administrative information e.g. TA contact information</li> </ul> <p>These will be posted on the course Canvas page in the Modules section.</p>"}]}