{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The CS 128 book: Winter 2024","text":"<p>This book is the official document repository for the Caltech CS 128 course (Interactive Theorem Proving) for the Winter 2024 term.</p> <p>The course instructor is Mike Vanier. See the syllabus for administrative information.</p> <p>Please read this page for an overview of the course.</p>"},{"location":"admin/collab/","title":"Collaboration policies","text":""},{"location":"admin/collab/#overview","title":"Overview","text":"<p>The CS 4 collaboration policies determine if, and how much, you are allowed to collaborate with other students while working on your assignments.</p> <p>Please read this document to the very end, because you are responsible for abiding by all the rules set forth here. Failure to abide by these rules may cause you to get sent to the Board of Control (BoC), and that is not pleasant for anyone concerned. Therefore, we want to be extra clear on what constitutes fair collaboration in this course.</p> <p>Note</p> <p>In some places in this document, you will read that some kind of behavior is strictly forbidden. We are not trying to scare or intimidate you, and we're not trying to be jerks. We just want to make absolutely sure that you know what the rules are, and saying that something is strictly forbidden is pretty unambiguous. (We apologize in advance if you find this annoying.)</p>"},{"location":"admin/collab/#basic-policy","title":"Basic policy","text":"<p>You are welcome to collaborate informally on your assignments (but not on exams!) with other individuals who are taking the course, but you must write all of your own code and you must not look at other students' code, except to help them as described below. Copying another student's code verbatim or nearly verbatim (from a file, a whiteboard, a screen share or anywhere else) is not acceptable and is an Honor Code violation. Taking another student's file and modifying it to make it look different is definitely not acceptable and is an Honor Code violation. Consulting a printed or electronically displayed version of another student's code and referring to it while you write your own code is not acceptable either, and is also an Honor Code violation. Having someone dictate code while you type isn't acceptable either. Basically, you have to do your own work.</p> <p>Getting advice on algorithms or syntactic details of the language, or suggestions on how to debug a part of your program that isn't working, is fine.</p> <p>All of the above also applies if you are getting tutored for the course, officially or unofficially.</p> <p>All of the above also applies to student work from previous years. We re-use some problems in assignments, and copying answers from an assignment that was submitted in previous years is an Honor Code violation just as much as copying from a student who is currently taking the course.</p>"},{"location":"admin/collab/#in-class-exercises","title":"In-class exercises","text":"<p>Some lectures will feature in-class exercises (programming problems that will be solved during the lecture by students). These exercises will also be on the assignments. While in the lecture where the exercise is presented, students may collaborate with other students as well as take notes on the solution given by the instructor (if there is one). However, on the assignment, these in-class exercise problems are no collaboration; you are only allowed to consult notes that you personally took during the lecture where the exercise was done.</p> <p>Note</p> <p>If you did not attend the lecture where a particular in-class exercise was presented, you must do the problem without any additional help (no collaboration). (Among other objectives, in-class exercises are an incentive for you to come to lectures.)</p> <p>Note that if you missed a lecture, you may not get notes on an in-class exercise from other students at any time, including in a subsequent lecture.</p> <p>If you attended a lecture where an in-class exercise was presented, but didn't take notes, you may not borrow the notes from another student, whether you collaborated with them in class or not.</p>"},{"location":"admin/collab/#exams-midterm-final","title":"Exams (midterm, final)","text":"<p>Exams are strictly no-collaboration under all circumstances. The only exception is that you can ask the instructor (Mike) for clarification on anything in the exam that is confusing (for example, when you don't know exactly what a problem is asking you to do). Don't ask a teaching assistant; clarifying exam questions is not their responsibility.</p>"},{"location":"admin/collab/#helping-others-and-the-50-foot-rule","title":"Helping others and the \"50-foot rule\"","text":"<p>It is common for students to want to help other students to write and debug their assignments. While we prefer that you go to one of the course teaching assistants when you need help on the assignments (it doesn't matter which one), we don't forbid you from seeking help from other students or offering your help to other students. However, we do insist on some guidelines to make the process fair for everyone.</p> <p>When you are helping another student with their homework, you are acting as an unofficial teaching assistant, and thus you must behave like one. A teaching assistant will not just tell you the answer or dictate code to you; they will help you work through the problem so that you understand what you are doing wrong. If you don't have the time or the inclination to do this, do not assist other students. If you just give them your code, you are violating the Honor Code and both you and the people you are giving the code to may be in for some serious consequences.</p> <p>As a way of clarifying the way in which you can help other students (especially when it comes to debugging their code), we want you to obey the \"50 foot rule\". This rule states that if you help another student with their programming problems (including debugging), you must not consult your own code while doing so. Specifically, we ask that your own code be at least 50 feet away i.e. not visible to you or the person you are helping while you are helping them. (It doesn't have to be exactly 50 feet; the point is that you can't see your code while helping the other person and you shouldn't run back and forth between your computer with your code and the computer of the person you're helping.) The slogan of the 50-foot rule is: \"Help them with your brain, not with your code.\" Please do not try to find a loophole kind of way around this e.g. projecting your code on a building 50 feet away; that is clearly not what we mean. Posting your code on a pastebin-like internet site, emailing your code to other people, sharing your screen with your code on it, printing it out, or even referring to it on your laptop while helping someone else, are all clear violations of the collaboration policy for this course. Also, we don't want you to put your code up on a computer in a room 50 feet away from where you're helping someone and run back and forth, dictating a line at a time. If you can't help them without consulting your code, don't help them. Refer them to a teaching assistant.</p> <p>Note</p> <p>The 50-foot rule only applies when helping another student in person.</p> <p>Helping another student using teleconferencing software like Zoom, Skype, Discord etc. is covered below, but one aspect of it is that screen sharing is not permitted.</p> <p>We realize that it's more convenient to ask someone in your house for help than to walk all the way to the Annenberg building. A possible solution is to get to know a TA and meet with them in their dorm room (if they are willing). Another possibility is to meet with a TA on Zoom (if they are OK with this).</p>"},{"location":"admin/collab/#use-and-abuse-of-pseudocode","title":"Use and abuse of pseudocode","text":"<p>In the past, some students have been called in to the BoC because of very similar code that was ultimately traced to pseudocode written on a whiteboard which was almost exactly like the final code. Pseudocode is supposed to be an informal, non-executable description of an algorithm. If you write or consult pseudocode which is (say) 80% or more of the way to being actual runnable code as a way to do an end run around the collaboration policies, be advised that we and the BoC are well aware of this problem and you will not get away with it. On the other hand, if you (or a TA) write out or read pseudocode which is a human-readable description of an algorithm without any actual code in it, you are fine. If in doubt, ask the instructor.</p>"},{"location":"admin/collab/#teleconferencing-software-eg-zoom","title":"Teleconferencing software (e.g. Zoom)","text":"<p>If you use teleconferencing software (like Zoom) or software with teleconferencing capabilities (like Discord with VOIP), you may not share your screen with other students, whether to help them or to get help from them. This also applies to non-students (with the obvious exception of the course instructor or TAs).</p> <p>Also, it is strictly forbidden to dictate code over teleconferencing software. This is consistent with the rules in the other sections of this document.</p>"},{"location":"admin/collab/#discussion-boards-and-chat-programs","title":"Discussion boards and chat programs","text":"<p>You are strictly forbidden from posting code from your assignments to a discussion board (such as Piazza) unless it's a private message to one or more instructors/TAs. If this happens you may lose the ability to use the discussion board for any purpose.</p> <p>This also applies to programs with chat features that are not used in the course (like Slack or Discord), or email for that matter.</p>"},{"location":"admin/collab/#use-of-websites","title":"Use of websites","text":"<p>It is strictly forbidden to post any of the problems from the assignments onto websites (for instance, Stack Overflow), and anyone caught doing this will be charged with an Honor Code violation. This includes problems that are similar to assignment problems even if not identical. If you find a discussion of course-related material on internet websites, you may read it as long as the discussion is not about a problem that is identical to or very similar to a problem on one of the course assignments. However, do not transcribe code from the internet into your homework submissions.</p> <p>It is strictly forbidden to look at any solutions to any previous years' CS128 work posted on internet code repository sites (including but not limited to GitHub, GitLab, BitBucket, etc.). It is also strictly forbidden to put your own code on such a repository unless (a) it is a private repository, and (b) you do not allow anyone else access to this private repository. You may also not fork any such repositories that you might happen to find; we will consider this prima facie evidence of intent to plagiarize.</p>"},{"location":"admin/collab/#use-of-code-hinting-software-eg-github-copilot-chatgpt","title":"Use of code hinting software (e.g. Github Copilot, ChatGPT)","text":"<p>You are strictly forbidden to use code hinting software such as Github Copilot, ChatGPT, or similar software for any part of this course. (This should be obvious.)</p>"},{"location":"admin/collab/#summary","title":"Summary","text":"<p>These are resources that you may or may not be allowed to consult while working on your assignments and exams.</p> Item Status Course book OK Course textbook OK Official OCaml documentation OK Other OCaml documentation OK Other OCaml books OK Your notes OK Notes of other students Not allowed Your graded assignments OK Other students' graded assignments Not allowed Other students' ungraded assignments Not allowed Other code written by anyone else that answers an assigned problem Not allowed Solutions to assignment/exam problems from a previous year Not allowed Material posted on internet forums that answers specific problems Not allowed Material in non-course code repositories (Github, Bitbucket, Gitlab etc.) Not allowed Code hinting software (e.g. Github Copilot, ChatGPT) Not allowed"},{"location":"admin/collab/#consequences-for-violating-these-policies","title":"Consequences for violating these policies","text":"<p>Be aware that letting another student copy from you is just as bad as copying from another student, and can get you into just as much trouble.</p>"},{"location":"admin/collab/#finally","title":"Finally...","text":"<p>If you have any questions about the course collaboration policies, please contact the instructor (Mike). Do not ask the teaching assistants; they may not give you the best answer.</p> <p>We realize that the vast majority of you (hopefully all of you) have no intention of cheating or overcollaboration in any way, and we hope that this collaboration policy won't get in the way of your enjoyment of the course.</p>"},{"location":"admin/syllabus/","title":"Syllabus","text":"<p>This is the course syllabus for CS 4 (Fundamentals of Computer Programming) for the Winter 2024 term.</p>"},{"location":"admin/syllabus/#instructor","title":"Instructor","text":"<p>The instructor/lecturer for the course is Mike Vanier (mvanier@cms.caltech.edu). Mike's pronouns are he/him.</p>"},{"location":"admin/syllabus/#lectures","title":"Lectures","text":"<p>Lectures will be held in Beckman Institute Auditorium (Beckman Institute, room 134) on Mondays, Wednesdays, and Fridays from 3 PM to 4 PM.</p> <p>If attendance drops significantly, lectures may be moved to Annenberg room 105. You will be informed before this happens.</p>"},{"location":"admin/syllabus/#teaching-assistants","title":"Teaching assistants","text":"<p>Here are the teaching assistants for the course. Contact information and office hours for teaching assistants will be posted on the course Canvas page.</p> <p>Teaching assistants are TBA.</p>"},{"location":"admin/syllabus/#office-hours","title":"Office hours","text":"<p>Times and locations of office hours for teaching assistants and the instructor will be posted on the course Piazza page (see below).</p> <p>TA office hours are normally held in-person, but may be held on Zoom in certain situations.</p> <p>The instructor (Mike) will hold office hours on Zoom.</p>"},{"location":"admin/syllabus/#course-description","title":"Course description","text":"<p>From the Caltech catalog entry for CS 4:</p>  This course gives students the conceptual background necessary to construct and analyze programs, which includes specifying computations, understanding evaluation models, and using major programming language constructs (functions and procedures, conditionals, recursion and looping, scoping and environments, compound data, side effects, higher-order functions and functional programming, and object-oriented programming). It emphasizes key issues that arise in programming and in computation in general, including time and space complexity, choice of data representation, and abstraction management. This course is intended for students with some programming background who want a deeper understanding of the conceptual issues involved in computer programming. Prerequisites: CS 1 or instructor's permission.  <p>A longer (and arguably more accurate) description of the course is given in the Motivation page of this book.</p>"},{"location":"admin/syllabus/#recommended-textbooks","title":"Recommended textbooks","text":"<p>There are two recommended textbooks, both available online in their entirety:</p> <ul> <li> <p>Structure and Interpretation of Computer Programs,   (usually referred to as \"SICP\", and pronounced \"sick pea\"),   by Hal Abelson, Gerry Sussman, and Julie Sussman</p> </li> <li> <p>Real World OCaml, also known as \"RWO\",   by Yaron Minsky, Anil Madhavapeddy and Jason Hickey</p> </li> </ul> <p>Both books are excellent (and we thank their authors for providing them for free online!), but neither is a perfect match for CS 4. The conceptual basis of CS 4 largely derives from SICP, but SICP uses Scheme, not OCaml, as its programming language. RWO is a more recent book which has excellent coverage of OCaml, but uses the <code>Base</code> and <code>Core</code> libraries throughout, which we will not use. Nevertheless, both books are good references for the material covered in this course.</p>"},{"location":"admin/syllabus/#additional-reference-material","title":"Additional reference material","text":"<p>You should definitely bookmark the OCaml manual. Even though this is not the easiest way to learn OCaml, the manual has complete coverage of the language, including obscure topics and language extensions. More important for day-to-day programming are the chapters on the core library and (especially) the standard library, which contains links to the <code>List</code> library, the <code>Array</code> library, and so on. You should have these close by whenever writing any moderately complicated OCaml program.</p> <p>Another great resource is the online textbook for the Cornell CS 3110 course, OCaml Programming: Correct + Efficient + Beautiful, most of which was written by Michael Clarkson. This book contains a lot of excellent explanatory material on OCaml programming, and goes over the material at a slower pace than the manual. It also includes videos!</p>"},{"location":"admin/syllabus/#external-websites","title":"External websites","text":"<p>There will be a Piazza site, which you will be enrolled in if you are registered for this course.</p> <p>For homework submission and grading, we will use CodePost.</p>"},{"location":"admin/syllabus/#grading-scheme","title":"Grading scheme","text":"<p>There will be 7 assignments, one midterm exam, and one final exam. Grades will be calculated as follows:</p> Item Points Assignments (7 x 10 points each) 70 Midterm exam 20 Final exam 30 Total 120 <p>The total out of 120 will be rescaled to give an actual grade out of 100%. Letter grades will be assigned as follows:</p> Numerical grade (out of 100%) Letter grade 95-100% A+ 90-95% A 85-90% A- 80-85% B+ 75-80% B 70-75% B- 65-70% C+ 62-65% C 60-62% C- 58-60% D+ 55-58% D &lt; 55% F"},{"location":"admin/syllabus/#grading-individual-assignments","title":"Grading individual assignments","text":"<p>On CodePost, assignments will be graded out of 100. Each assignment will be divided into sections. On CodePost, each section will get a certain number of points (not necessarily the same for each section). The actual grade of the assignment is the sum of all the section grades. The CodePost grade will be divided by 10 to get the actual recorded grade.</p> <p>Note</p> <p>We refer to the numerical grade on CodePost (out of 100) as the \"CodePost grade\". We divide the CodePost grade by 10 to get the actual grade. Similarly, marks on CodePost are called \"CodePost marks\", in contrast to actual marks. So 10 CodePost marks is 1 actual mark.</p> <p>The reason for this is that CodePost only lets you record grades to a precision of 0.5 marks, and we want to be able to grade in a more fine-grained manner.</p>"},{"location":"admin/syllabus/#redoing-assignments","title":"Redoing assignments","text":"<p>After you receive your initial grade on an assignment, you have one week to submit a redo. Redos will be submitted as a separate CodePost assignment called <code>Assignment N (rework)</code> (for assignment <code>N</code>). Late redos (received after the 1-week redo window) will not be graded and your previous grade will stand. You may not submit more than one redo per assignment.</p>"},{"location":"admin/syllabus/#late-policy-for-assignments","title":"Late policy for assignments","text":"<p>If an assignment is late when first submitted, marks are deducted at the rate of 2.0 marks/day (20 CodePost marks). These marks can't be regained through rework. If a rework is late (i.e. is submitted more than one week after the original grade was submitted), it doesn't count, and the previous grade stands.</p> <p>Note</p> <p>If an assignment is submitted on time, but is missing one or more sections, those sections will be graded as a 0. The assignment can be reworked, of course, but assuming the sections that were missing on the initial submission are submitted with the rework, there is no additional rework for these sections. This means (for instance) if you don't submit a section on the initial submission, but do submit it in the rework, the grade of that section in the rework is final \u2013 you don't get to rework it just because you hadn't submitted it before. So please don't leave out sections!</p> <p>Students may request extensions for assignments due to unusual circumstances. These extensions have to be approved by the course instructor (Mike).</p>"},{"location":"admin/syllabus/#assignment-due-dates","title":"Assignment due dates","text":"<p>Assignments will be due on Friday at 2 PM unless otherwise indicated. Note that a due time of 2 PM means early that morning, so effectively it means very late the previous evening.</p>"},{"location":"admin/syllabus/#attendance-and-participation","title":"Attendance and participation","text":"<p>Attendance and participation currently do not count towards the final grade. However, we strive to make lectures interactive and do a lot of live coding during lectures. Missing out on this will deprive you of many of the benefits of the course (as well as a lot of the fun!). Lectures will not be recorded, but all slides and code will be posted.</p> <p>In addition, many lectures will feature in-class exercises which will also appear on the assignments. These exercises can be (and are expected to be) solved collaboratively in class, but must be solved without collaboration on the assignments. (You may of course take notes on the solution during lectures, but you may not share these notes with other students. Consult the collaboration policies for more details.</p>"},{"location":"admin/syllabus/#academic-integrity","title":"Academic integrity","text":"<p>Caltech\u2019s Honor Code states that: \"No member of the Caltech community shall take unfair advantage of any other member of the Caltech community.\"</p> <p>Understanding and avoiding plagiarism: Plagiarism is the appropriation of another person's ideas, processes, results, or words without giving appropriate credit, and it violates the honor code in a fundamental way. You can find more information at this page.</p>"},{"location":"admin/syllabus/#collaboration-policies","title":"Collaboration policies","text":"<p>The course collaboration policies are listed in the collaboration policies page in this book.</p> <p>Note</p> <p>Please read the collaboration policies! You are responsible for knowing what is and isn't acceptable collaboration, and if you over-collaborate you may be sent to the Board of Control, which is never pleasant.</p>"},{"location":"admin/syllabus/#software","title":"Software","text":"<p>In this course, we will be using the {{ ocaml }} programming language. Assignment 0 (which is not graded) will instruct you on how to set up the OCaml environment on your computer.</p> <p>Other than that, you will only need a terminal program and a plain text editor. There are a variety of choices for these; assignment 0 discusses this further. For in-class live coding demos, we will use either the Neovim text editor or the Visual Studio Code editor.</p> <p>If you want to try out code examples during the lectures, you can also use the online OCaml environment. This environment is sometimes a bit sluggish, so a good alternative is the Try OCaml site.</p>"},{"location":"admin/syllabus/#diversity-and-inclusion","title":"Diversity and inclusion","text":"<p>You all belong in this class and as such should expect to be treated by your classmates and the course staff with respect. It is our goal, as the course staff, to provide an interesting and challenging environment that is conducive to your learning. If any incident occurs that challenges this commitment to a supportive and inclusive environment, please let the instructors know so the issue can be addressed.</p>"},{"location":"admin/syllabus/#accessibility","title":"Accessibility","text":"<p>We consider accessibility to be an extremely important issue. If some aspect of the course is making it more difficult for you to learn the material, we want to hear about it! We want this course to be an enjoyable experience for you, not a burden.</p>"},{"location":"admin/syllabus/#student-wellness","title":"Student Wellness","text":"<p>It is very important to us that you take care of your mental wellness throughout the course. Everyone on the course staff is available to chat, and you can always attend office hours for a non-academic conversation if necessary.</p>"},{"location":"admin/syllabus/#students-with-documented-disabilities","title":"Students with documented disabilities","text":"<p>Students who may need an academic accommodation based on the impact of a disability must initiate the request with Caltech Accessibility Services for Students (CASS). Professional staff will evaluate the request with required documentation,  recommend reasonable accommodations,  and prepare an Accommodation Letter for faculty dated in the current quarter in which the request is being made.  Students should contact CASS as soon as possible, since timely notice is needed to coordinate accommodations. See the CASS website for more information.</p> <p>Undergraduate students should contact Dr. Lesley Nye, interim Dean of Undergraduate Students (administrative contact: Beth Larranaga) and graduate students should contact Darrell Peterson Associate Dean of Graduate Studies (administrative contact: Georgine Okura).</p>"},{"location":"assignments/assignment1/","title":"Assignment 1: Introduction","text":""},{"location":"assignments/assignment1/#due-date","title":"Due date","text":"<p>This assignment is due on |dueday|, |ass1due| at |duetime|.</p>"},{"location":"assignments/assignment1/#source-files","title":"Source files","text":"<p>Assignment code is posted in the course Canvas page, in the Modules section. Each assignment is a single zip file, with all relevant scripts included.</p> <p>This assignment consists of the Coq scripts <code>Basics.v</code> and <code>Induction.v</code>. Problems include:</p> <ul> <li> <p>problems worked in class (that you have to reproduce)</p> </li> <li> <p>new problems (not worked in class)</p> </li> <li> <p>writing a new theorem from scratch and proving it</p> </li> <li> <p>feedback on the course</p> </li> </ul>"},{"location":"assignments/assignment1/#grading","title":"Grading","text":"<p>The assignment will get a maximum of 10 points. The marking scheme is described in the syllabus and in the comments in the script. Note that different scripts may have slightly different grading schemes.</p>"},{"location":"assignments/assignment1/#what-to-hand-in","title":"What to hand in","text":"<p>Submit your completed files as the CodePost assignment <code>Assignment 1</code>.</p>"},{"location":"assignments/assignment1/#getting-help","title":"Getting help","text":"<p>If you get stuck on a problem, you can discuss it with the TA or the instructor during their office hours, or post questions on Piazza.</p> <p>.. note::</p> <p>If you are posting a question will give away part of an answer,   please direct it to the instructors only!</p>"},{"location":"assignments/setup/","title":"Setting up Coq on your computer","text":""},{"location":"assignments/setup/#installing-coqide","title":"Installing CoqIDE","text":"<p>The theorem proving software we are using for this course is called Coq.<sup>1</sup> Coq is developed at the INRIA group in France which also develops OCaml.<sup>2</sup> We will use Coq version 8.17.1. (Slightly earlier or even later versions should also work.)</p> <p>In most CS/programming courses, all you need to do to use the course\u2019s programming language is to use the language compiler/interpreter and a text editor. It is possible to use Coq this way as well; the compiler is called <code>coqc</code> and the interpreter is called <code>coqtop</code>. However, Coq is much more pleasant to use if you have a proper integrated development environment (IDE) for the system. IDEs for Coq include editors, but also include facilities for stepping through a proof, checking to see if a proof is actually valid, and printing informative messages.</p> <p>Note</p> <p>I (Mike) generally hate using IDEs for programming. But even I have to admit that using a theorem prover like Coq without an IDE is basically unbearable. If you are really hard-core, you can try using just <code>coqtop</code> instead of an IDE, but I confidently predict that you will go back to using an IDE within minutes.</p> <p>In our opinion, at the present time there are only three decent Coq IDEs:</p> <ul> <li> <p>the CoqIDE program<sup>3</sup>,</p> </li> <li> <p>the Visual Studio Code editor   extended with the Coq plugin,</p> </li> <li> <p>and the Emacs editor extended with the   Proof General package.</p> </li> </ul> <p>In class, we will primarily be using the CoqIDE program. However, you are encouraged to try the other IDEs if you like. In particular, both Visual Studio Code and Emacs offer far superior editing facilities than CoqIDE.</p> <p>CoqIDE can be installed in several ways. By far the best way is to download and install the Coq Platform. This bundles together all necessary software in a known-working configuration for all major operating systems.</p> <p>A different way to install Coq is using OCaml and its package manager <code>opam</code>; this can be done from the terminal:</p> <pre><code>$ opam update\n$ opam install coqide\n</code></pre> <p>However, this may not work, particularly on Windows systems. In addition, sometimes CoqIDE compiled this way doesn't work (e.g. it crashes when used). Therefore, we do not recommend this method unless nothing else works.</p> <p>Once you have installed CoqIDE, you are all set! The documentation for CoqIDE is here.</p>"},{"location":"assignments/setup/#optional-setting-up-visual-studio-code-for-coq","title":"OPTIONAL: Setting up Visual Studio Code for Coq","text":"<p>If you want to try the Visual Studio Coq interface (which we will refer to henceforth as \"VSCoq\"), here are the steps:</p> <ol> <li> <p>Install Visual Studio Code from this site. Spend some time getting familiar with it.</p> </li> <li> <p>In a terminal, enter these commands:</p> <pre><code>$ opam update\n$ opam install coq\n</code></pre> <p>(Note that we are not installing <code>coqide</code>, because you don\u2019t need it if you are using Visual Studio Code).</p> </li> <li> <p>Install the <code>vscoq</code> plugin for VS Code from the VSCoq Github page. Follow the setup instructions given on that page. In particular, you have to tell VS Code where to find the <code>coqtop</code> program. In a terminal, enter this command:</p> <pre><code>$ which coqtop\n</code></pre> <p>to find out. NOTE: This assumes a Unix-like system, like Linux, MacOS, or Windows with WSL (Windows Subsystem for Linux).</p> </li> <li> <p>Load a Coq script file (like <code>Basics.v</code>) into VS Code. Type <code>F1</code> and enter <code>coq</code> in the dialog box at the top to list all VSCoq commands along with their keyboard shortcuts. Step through the file for practice.</p> </li> </ol> <p>The main downside to using the VS Code interface is that it lacks the \"compile buffer\" feature.  This means that you will have to compile files manually.  For the Software Foundations files, this isn\u2019t hard; usually you just have to do this (for the example of <code>Basics.v</code>:</p> <pre><code>$ coqc -Q . LF Basics.v\n</code></pre> <p>Some examples may be more complicated, though.</p> <p>Another minor issue with VSCoq is that some of the informative messages printed by CoqIDE aren\u2019t printed by VSCoq, though the important ones are.</p>"},{"location":"assignments/setup/#testing-your-installation","title":"Testing your installation","text":"<p>Test your installation by stepping through the <code>Basics.v</code> script, which is part of the first homework assignment.</p>"},{"location":"assignments/setup/#reference","title":"Reference","text":"<p>You should check out the Coq reference manual and bookmark it \u2014 you'll be using it a lot!</p> <ol> <li> <p>\"Coq\" is the French word for \"rooster\" (which explains the logo), and is also a double pun: one of the principal developers of Coq is Thierry Coquand. One of Thierry\u2019s contributions to Coq was to specify the original type theory of the system, which was called the \"Calculus of Constructions\" or \"Coc\". We will try to avoid making crude jokes about the name.\u00a0\u21a9</p> </li> <li> <p>There is a long relationship between OCaml and Coq. It\u2019s not an overstatement to say that the principal reason OCaml was developed in the first place was so that there was a language in which Coq could be written. Historically, languages of the ML family (including OCaml) have largely been used as the \"meta-languages\" of theorem provers (hence the name \"ML\").\u00a0\u21a9</p> </li> <li> <p>There\u2019s a pun here too; it\u2019s the \"cockeyed\" IDE. *sigh*\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/welcome/","title":"Welcome to CS 128!","text":"<p>This book serves as the official course notes, so that lectures are less of a brain dump of details and more an opportunity to interactively go through course topics, answer questions, and get you thinking about the material. In addition, we will be posting most of the course-related content in these pages, including:</p> <ul> <li>the course syllabus   (which you should read as soon as possible!)</li> <li>administrative details</li> <li>instructions on how to set up your computer with the course software</li> <li>assignments</li> </ul> <p>and anything else we consider useful. Your feedback on these notes will be very helpful to us in improving them, so please let us know if anything is hard to understand or if something that should be here isn't.</p> <p>Course-related material we won't post here includes:</p> <ul> <li>lecture slides</li> <li>code supplied to students for assignments</li> <li>some administrative information e.g. TA contact information</li> </ul> <p>These will be posted on the course Canvas page in the Modules section.</p>"}]}