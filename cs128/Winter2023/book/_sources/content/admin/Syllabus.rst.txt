.. _Syllabus:

Syllabus
========

This is the syllabus for CS 128 (Interactive Theorem Proving)
for the Winter 2023 term.


Overview
--------

This course is an introduction to the field of interactive theorem
proving using the Coq_ theorem prover.
Material covered will include:

- Dependently-typed functional programming

- Proving theorems using tactics

- Logic, and in particular intuitionistic logic

- Induction

- The Curry-Howard isomorphism

- Proving programs correct

It is very difficult to describe the process of working with a theorem
prover; the experience will be unlike anything you’ve ever done before.
We hope you enjoy it as much as we enjoy teaching it!  [1]_


Prerequisites
-------------

The prerequisite for the course is either of the following:

- You have taken and passed CS 4.

- You get special permission from the instructor.

The CS 4 requirement is important because we don’t have time to teach
basic functional programming in this course, and programming in Coq is
very similar in some ways to programming in functional languages like
OCaml. Despite this, you won’t be doing OCaml programming in this
course.

We are very interested in getting math majors to take this course, so
please pass the word on to any math majors you know, even if they
haven’t taken CS 4!


People
------

Instructor
^^^^^^^^^^

The instructor/lecturer for the course is Mike Vanier
(mvanier@cms.caltech.edu).  Mike's pronouns are *he/him*.

Mike's office hours will be announced on the course Piazza page.
His office hours will be held on the course Discord server and/or on Zoom.


Teaching assistants
^^^^^^^^^^^^^^^^^^^

Teaching assistants are TBA.

Teaching assistant office hours will take place either in-person, on Zoom, or
on Discord, depending on the preference of the TA.

TA office hours will be announced on the course Piazza page.


Lectures
--------

Lectures will be held in room 106 of the Annenberg building
on Mondays, Wednesdays, and Fridays from 11 AM to noon.

Unlike many CS classes, this one will be *highly* interactive. (The
course is *Interactive* Theorem Proving, after all!) Lectures are not
optional; lecture participation is worth marks (see below). Students
will be asked to help prove theorems in class.



Software
--------

We will be using the Coq_ theorem prover exclusively in this course. Here
are some useful links:

* The Coq_ home page.

* The Coq `reference manual <https://coq.inria.fr/refman/>`_.

* The CoqIDE (integrated development environment)
  `documentation <https://coq.inria.fr/refman/practical-tools/coqide.html>`_.

CoqIDE is part of the `Coq Platform`_
(which comes bundled with the entire Coq toolchain).
There are other ways to set up Coq, but this is by far the
easiest and the most reliable.

The :doc:`Coq setup document </content/assignments/Coq_setup>`
will walk you through the installation process.


Assignments
-----------

There will be weekly assignments.
Each assignment will normally consist of one or more Coq scripts
with parts missing
(typically, theorems stated but not proved).
You will be expected to complete the theorems
and submit the completed script(s) to CodePost_.

Assignments will be due on |dueday| at 2 AM.

Each assignment will be given a grade out of a maximum of 10 points.
The typical breakdown of points is as follow:

* 2 points for completing the in-class problems (this should be easy if
  you’ve attended classes)

* 5 points for independent problems (not covered in class)

* 2 points for coming up with a novel problem using the tactics
  provided (not all assignments have this)

* 1 point for feedback

Some scripts will be graded differently; notes will be included in the
script indicating what the grade scheme is in those cases.


Late penalties
^^^^^^^^^^^^^^

Late assignments are penalized at the rate of 1 mark per day late.


Rework
^^^^^^

Assignments can be reworked for up to 1 week.
However, a reworked section [2]_ can only give you extra marks
up to half the value of the section.
So if you've already got half marks or more in a section,
you can rework up to full marks,
but if (say) you did no work at all for the section
and submit a perfect rework,
that will be worth half marks for that section.
This is to encourage you to get your work done on time.

.. note::

  When we say "half the value of the section" we mean "half of a
  section’s marks, rounded up to the nearest integer", so that half of
  a 1-mark section is still 1, and half of a 5-mark section is 3.

Reworks that are submitted after the one week rework period do not count.


Grading
-------

Grades are assigned as follows:

- 6 assignments, each worth 10 marks

- 10 marks for in-class participation

- 5 marks for completing the end-of-course survey

This adds up to a maximum grade of 75. Multiply by 100/75 to get your
percentage grade (used for the grading scheme below).

The course is on grades. We will assign letter grades as follows:

.. list-table::
   :widths: 25 25
   :header-rows: 1

   * - Numerical grade (out of 100%)
     - Letter grade
   * - 95-100%
     - A+
   * - 90-95%
     - A
   * - 85-90%
     - A-
   * - 80-85%
     - B+
   * - 75-80%
     - B
   * - 70-75%
     - B-
   * - 68-70%
     - C+
   * - 65-68%
     - C
   * - 60-65%
     - C-
   * - 55-60%
     - D
   * - < 55%
     - F

Notes:

* If you are taking the course P/F, the pass threshold is the same as
  the requirement for a D grade.


Collaboration
-------------

We expect that you will do your work by yourself and not collaborate on
homework. However, we do encourage you to post questions on the course
Piazza site and/or the course Discord server, **as long as your posts
don’t give away a solution to a problem**. Please send a direct message
to the instructors if you think your question would give away a
solution.

We will be providing a lot of help on Piazza, Discord and in office
hours. The nature of this material is that it’s extremely easy to get
stuck on particular theorems and spend a lot of time pursuing an
incorrect path. In this case, please let us know before you get
completely frustrated. Even when a particular approach to proving a
theorem doesn’t pay off, the experience of working through a problem
with the theorem prover is very valuable.

The :doc:`collaboration policies </content/admin/Collaboration_policies>`
document has more details on which kinds of collaboration are allowed,
and which are not.  Please read that page!


References
----------

The course materials are adapted from the `Software
Foundations <https://softwarefoundations.cis.upenn.edu/>`__ series of
online textbooks, particularly book 1, `Logical
Foundations <https://softwarefoundations.cis.upenn.edu/lf-current/index.html>`__.
We owe a great debt to Benjamin Pierce and his collaborators for making
this material freely-available and of such high quality.

If you want to explore Coq further, book 2 of Software Foundations,
`Programming Language
Foundations <https://softwarefoundations.cis.upenn.edu/plf-current/index.html>`__,
is a natural follow-up to the material in the course. The other volumes
in the SF series may also be of interest.

If you are interested in using Coq to write provably-correct software,
take a look at Adam Chlipala’s book `Certified Programming with
Dependent Types <http://adam.chlipala.net/cpdt/>`__, also available for
free online (though you can buy a print copy if you like, and this would
be a great way to express your appreciation to the author).


Diversity and Inclusion
-----------------------

You all belong in this class and as such should expect to be treated by
your classmates and the course staff with respect. It is our goal, as
the course staff, to provide an interesting and challenging environment
that is conducive to your learning. If any incident occurs that
challenges this commitment to a supportive and inclusive environment,
please let the instructors know so the issue can be addressed.


Student Wellness
^^^^^^^^^^^^^^^^

It is very important to us that you take care of your mental wellness
throughout the course. Everyone on the course staff is available to
chat, and you can always attend office hours for a non-academic
conversation if necessary, or email the course instructor with any
concerns you may have.


Students with Documented Disabilities
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Students who may need an academic accommodation based on the impact of a
disability must initiate the request with Caltech Accessibility Services
for Students (CASS). Professional staff will evaluate the request with
required documentation, recommend reasonable accommodations, and prepare
an Accommodation Letter for faculty dated in the current quarter in
which the request is being made. Students should contact CASS as soon as
possible, since timely notice is needed to coordinate accommodations.
The CASS web site is `<http://cass.caltech.edu>`_.

Undergraduate students should contact Dr. Lesley Nye, Associate Dean of
Undergraduate Students (administrative contact: Beth Larranaga) and
graduate students should contact Dr. Kate McAnulty, Associate Dean of
Graduate Studies (administrative contact: Jacob Dalton).

----

.. rubric:: Footnotes


.. [1] Working with a theorem prover has often been compared to playing a
       video game. You’ll soon find out why.

.. [2] A "section" is (for instance) in-class problems, independent problems,
   |etc|
