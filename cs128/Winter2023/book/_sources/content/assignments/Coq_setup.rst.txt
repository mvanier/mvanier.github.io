Setting up Coq on your computer
===============================

Installing CoqIDE
-----------------

The theorem proving software we are using for this course is called
Coq_. [1]_ Coq is developed at the INRIA group in France which also develops
OCaml. [2]_ We will use Coq version |CoqVersion|.
(Slightly earlier or even later versions should also work.)

In most CS/programming courses, all you need to do to use the course’s
programming language is to use the language compiler/interpreter and a
text editor. It is possible to use Coq this way as well; the compiler is
called ``coqc`` and the interpreter is called ``coqtop``. However, Coq
is much more pleasant to use if you have a proper integrated development
environment (IDE) for the system. IDEs for Coq include editors, but also
include facilities for stepping through a proof, checking to see if a
proof is actually valid, and printing informative messages. In our
opinion, at the present time there are only three decent Coq IDEs:

* the CoqIDE [3]_ program

* the Visual Studio Code editor extended with the Coq plugin

* the Emacs editor extended with the `Proof
  General <https://proofgeneral.github.io/>`__ package

In class, we will primarily be using the CoqIDE program. However, you
are encouraged to try the other IDEs if you like. In particular, both VS
Code and Emacs offer far superior editing facilities than CoqIDE.

CoqIDE can be installed in several ways. By far the best way is to
download and install the `Coq Platform`_.
This bundles together all necessary software in a
known-working configuration for all major operating systems. [4]_

A different way to install Coq is using OCaml and its package manager
``opam``; this can be done from the terminal:

.. code-block:: text

  $ opam update
  $ opam install coqide

However, this may not work, particularly on Windows systems.
In addition, sometimes CoqIDE compiled this way doesn't work
(|eg| it crashes when used).
If this happens to you, please use the Coq Platform instead.

Once you have installed CoqIDE, you are all set! The documentation for
CoqIDE is
`here <https://coq.inria.fr/refman/practical-tools/coqide.html>`_.


**OPTIONAL**: Setting up Visual Studio Code for Coq
---------------------------------------------------

If you want to try the Visual Studio Coq interface (which we will refer
to henceforth as "VSCoq"), here are the steps:

1. Install Visual Studio Code from `this
   site <https://code.visualstudio.com>`_.
   Spend some time getting familiar with it.

2. In a terminal, enter these commands:

   .. code-block:: text

      $ opam update
      $ opam install coq

  (Note that we are *not* installing ``coqide``, because you don’t need
  it if you are using Visual Studio Code).

3. Install the ``vscoq`` plugin for VS Code
   from `the VSCoq Github page <https://github.com/coq-community/vscoq>`_.
   Follow the setup instructions given on that page.
   In particular, you have to tell VS Code where to find the
   ``coqtop`` program. In a terminal, enter this command:

   .. code-block:: text

      $ which coqtop

   to find out. *NOTE*: This assumes a Unix-like system, like Linux,
   MacOS, or Windows with WSL (Windows Subsystem for Linux).

4. Load a Coq script file (like ``Basics.v``) into VS Code. Type ``F1``
   and enter ``coq`` in the dialog box at the top to list all VSCoq
   commands along with their keyboard shortcuts. Step through the file
   for practice.

The main downside to using the VS Code interface is that it lacks the
"compile buffer" feature. This means that you will have to compile files
manually. For the Software Foundations files, this isn’t hard; usually
you just have to do this (for the example of ``Basics.v``:

.. code-block:: text

   $ coqc -Q . LF Basics.v

Some examples may be more complicated, though.

Another minor issue with VSCoq is that some of the informative messages
printed by CoqIDE aren’t printed by VSCoq, though the important ones
are.


Testing your installation
-------------------------

Test your installation by stepping through the ``Basics.v`` script,
which is part of the first homework assignment.


Reference
---------

You should check out the `Coq reference manual`_ and bookmark it
-- you'll be using it a lot!

----

.. rubric:: Footnotes

.. [1]
   "Coq" is the French word for "rooster" (which explains the logo), and
   is also a double pun: one of the principal developers of Coq is
   Thierry **Coq**\ \ uand. One of Thierry’s contributions to Coq was to
   specify the original type theory of the system, which was called the
   "Calculus of Constructions" or "Coc". We will try to avoid making
   crude jokes about the name.

.. [2]
   There is a long relationship between OCaml and Coq. It’s not an
   overstatement to say that the principal reason OCaml was developed in
   the first place was so that there was a language in which Coq could
   be written. Historically, languages of the ML family (including
   OCaml) have largely been used as the "meta-languages" of theorem
   provers (hence the name "ML").

.. [3]
   There’s a pun here too; it’s the "cockeyed" IDE. \*sigh\*

.. [4]
   Well, almost.  The current version of CoqIDE on the Coq Platform
   will crash if you try to set preferences.  The cause of this bug is known,
   but it won't be fixed until a new version comes out.
   In the meantime, if this bothers you, you can install an earlier version.
