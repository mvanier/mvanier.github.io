{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The CS 1x book: Fall 2023","text":"<p>This book is the official document repository for the Caltech CS 1x course (Intermediate Computer Programming).</p> <p>The course instructor is Mike Vanier. See the syllabus for administrative information.</p>"},{"location":"admin/collab/","title":"Collaboration policies","text":""},{"location":"admin/collab/#overview","title":"Overview","text":"<p>The CS 1x collaboration policies determine if, and how much, you are allowed to collaborate with other students while working on your assignments.</p> <p>Please read this document to the very end, because you are responsible for abiding by all the rules set forth here.  Failure to abide by these rules may cause you to get sent to the Board of Control, and that is not pleasant for anyone concerned.  Therefore, we want to be extra clear on what constitutes fair collaboration in this course.</p> <p>Note</p> <p>In many places in this document, you will read that some kind of behavior is strictly forbidden. We are not trying to scare you or intimidate you, and we're not trying to be jerks. We just want to make absolutely sure that you know what the rules are, and saying that something is strictly forbidden is pretty unambiguous. (We apologize in advance if you find this annoying.)</p>"},{"location":"admin/collab/#basic-policy","title":"Basic policy","text":"<p>You are welcome to collaborate informally on your assignments with other individuals who are taking or have taken the class, but you must write all of your own code and you must not look at other students' code, except to help them as described below. Copying another student's code verbatim or nearly verbatim (from a file, a whiteboard, a screen share or anywhere else) is not acceptable and is an Honor Code violation.  Taking another student's file and modifying it to make it look different is definitely not acceptable and is an Honor Code violation.  Consulting a printed or electronically displayed version of another student's code and referring to it while you write your own code is not acceptable either, and is also an Honor Code violation. Having someone dictate code while you type isn't acceptable either.  Basically, you have to do your own work.</p> <p>Getting advice on algorithms or syntactic details of the language, or suggestions on how to debug a part of your program that isn't working, is fine.</p> <p>All of the above also applies if you are getting tutored for the course, officially or unofficially.</p> <p>All of the above also applies to student work from previous years.  We re-use some problems in assignments, and copying answers from an assignment that was submitted in previous years is an Honor Code violation just as much as copying from a student who is currently taking the course.</p>"},{"location":"admin/collab/#helping-others-and-the-50-foot-rule","title":"Helping others and the \"50-foot rule\"","text":"<p>It is common for students to want to help other students to write and debug their assignments.  While we prefer that you go to one of the course teaching assistants when you need help on the assignments (it doesn't matter which one), we don't forbid you from seeking help from other students or offering your help to other students.  However, we do insist on some guidelines to make the process fair for everyone.</p> <p>When you are helping another student with their homework, you are acting as an unofficial teaching assistant, and thus you must behave like one.  A teaching assistant will not just tell you the answer or dictate code to you; he/she will help you work through the problem so that you understand what you are doing wrong.  If you don't have the time or the inclination to do this, do not assist other students.  If you just give them your code, you are violating the Honor Code and both you and the people you are giving the code to may be in for some serious consequences.</p> <p>As a way of clarifying the way in which you can help other students (especially when it comes to debugging their code), we want you to obey the \"50 foot rule\". This rule states that if you help another student with their programming problems (including debugging), you must not consult your own code while doing so.  Specifically, we ask that your own code be at least 50 feet away i.e. not visible to you or the person you are helping while you are helping them.  (It doesn't have to be exactly 50 feet; the point is that you can't see your code while helping the other person, and you shouldn't run back and forth between your computer with your code and the computer of the person you're helping.) The slogan of the 50-foot rule is: \"Help them with your brain, not with your code.\"  Please do not try to find a loophole kind of way around this e.g. projecting your code on a building 50 feet away; that is clearly not what we mean.  Posting your code on a pastebin-like internet site, emailing your code to other people, sharing your screen with your code on it, printing it out, or even referring to it on your laptop while helping someone else, are all clear violations of the collaboration policy for this course.  Also, we don't want you to put your code up on a computer in a room 50 feet away from where you're helping someone and run back and forth, dictating a line at a time.  If you can't help them without consulting your code, don't help them.  Refer them to a teaching assistant. </p> <p>Note</p> <p>The 50-foot rule only applies when helping another student in person.</p> <p>Helping another student using teleconferencing software like Zoom, Skype, Discord etc. is covered below, but one aspect of it is that screen sharing is not permitted.</p> <p>We realize that it's more convenient to ask someone in your house for help than to walk all the way to the Annenberg building.  A possible solution is to get to know a TA and meet with them in their dorm room (if they are willing).</p>"},{"location":"admin/collab/#use-and-abuse-of-pseudocode","title":"Use and abuse of pseudocode","text":"<p>In the past, some students have been called in to the BoC because of very similar code that was ultimately traced to pseudocode written on a whiteboard which was almost exactly like the final code.  Pseudocode is supposed to be an informal, non-executable description of an algorithm.  If you write or consult pseudocode which is (say) 80% or more of the way to being actual runnable code as a way to do an end run around the collaboration policies, be advised that we and the BoC are well aware of this problem and you will not get away with it.  On the other hand, if you (or a TA) write out or read pseudocode which is a human-readable description of an algorithm without any actual code in it, you are fine.</p>"},{"location":"admin/collab/#teleconferencing-software-eg-zoom-discord","title":"Teleconferencing software (e.g. Zoom, Discord)","text":"<p>If you use teleconferencing software (like Zoom) or software with teleconferencing capabilities (like Discord), you may not share your screen with another student (unless they are a course teaching assistant), whether to help them or to get help from them.  This also applies to non-students (again, with the exception of the course instructor).</p> <p>Also, it is strictly forbidden to dictate code over teleconferencing software.  This is consistent with the rules in the other sections of this document.</p>"},{"location":"admin/collab/#discussion-boards-and-chat-programs-eg-piazza-slack-discord","title":"Discussion boards and chat programs (e.g. Piazza, Slack, Discord)","text":"<p>You are strictly forbidden from posting code which answers or even partially answers a problem to a discussion board (such as Piazza) unless it's a private message to one or more instructors/TAs.  If this happens you may lose the ability to use the discussion board for any purpose.</p> <p>Note</p> <p>This has been a problem for some students in the past. There is nothing wrong with posting code to Piazza as long as it is a private message to the instructors.  Posting a public message containing code is another matter, and we reserve the right to ban you from using Piazza if this happens.</p> <p>This also applies to programs with chat features that are not used in the course (like Slack), or even email for that matter.</p>"},{"location":"admin/collab/#use-of-websites","title":"Use of websites","text":"<p>It is strictly forbidden to post any of the problems from the assignments onto websites (for instance, Stack Overflow), and anyone caught doing this will be charged with an Honor Code violation.  This includes problems that are similar to assignment problems even if not identical.  If you find a discussion of course-related material on internet websites, you may read it as long as the discussion is not about a problem that is identical to or very similar to a problem on one of the course assignments.  However, do not transcribe code from the internet into your homework submissions.</p> <p>It is strictly forbidden to look at any solutions to any previous years' CS 1x work posted on internet code repository sites (including but not limited to GitHub, GitLab, BitBucket, etc.).  It is also strictly forbidden to put your own code on such a repository unless (a) it is a private repository, and (b) you do not allow anyone else access to this private repository.  You may also not fork any such repositories that you might happen to find; we will consider this prima facie evidence of intent to plagiarize.</p>"},{"location":"admin/collab/#use-of-code-hinting-software-eg-github-copilot-chatgpt","title":"Use of code hinting software (e.g. Github Copilot, ChatGPT)","text":"<p>You are strictly forbidden to use code hinting software such as Github Copilot or ChatGPT for any part of this course.</p>"},{"location":"admin/collab/#summary-tables","title":"Summary tables","text":"<p>Here is a summary of what is and is not allowed while working on assignments.</p>"},{"location":"admin/collab/#resources","title":"Resources","text":"<p>These are resources that you may or may not be allowed to consult while working on your assignments.</p> Item Status Course readings OK Course textbooks OK Official Java documentation OK Other Java documentation OK Other Java books OK Your notes OK Notes of other students Not allowed Your graded assignments OK Other students' graded assignments Not allowed Other students' ungraded assignments Not allowed Other code written by anyone else (inside or outside Caltech) that answers an assigned problem Not allowed Solutions to assignment problems from a previous year Not allowed Material posted on internet forums that answers specific problems Not allowed Material in code repositories (Github, Bitbucket, Gitlab etc.) which is not specifically part of the course Not allowed Code hinting software (Github Copilot, ChatGPT, etc.) Not allowed"},{"location":"admin/collab/#activities","title":"Activities","text":"<p>These are activities which you may or may not be allowed to do while working on your assignments.</p> Item Assignments Looking at code written by other people in the class Not allowed Looking at code written by anyone not in the class Not allowed Discussing problems informally with other students OK Discussing problems with a TA or instructor OK Asking clarifying questions to a TA or instructor OK Showing your code to another student in the class to help them with a homework problem Not allowed Emailing your code to another student in the class to help them with a homework problem Not allowed Typing your code into a chat program to help another student with a homework problem Not allowed Sharing a screen on Zoom or other teleconferencing software with anyone who is not a CS 1x TA or a CS 1x instructor Not allowed Showing your code to a TA or instructor Allowed Asking someone (except a TA or instructor) how to write the code for a problem Not allowed Helping other students debug their code, as long as you follow the \"50-foot rule\" (see above) OK Asking a TA or instructor for help debugging your code OK Using an external library, as long as it does not provide a direct solution Need to ask instructor for permission Using/consulting pseudocode written by other students See above section (if you are in doubt, assume it's not allowed, or ask the instructor) Uploading course-related code to a code repository Only if the repository is owned by you, is private and is not shared Forking another person's code repository for course-related purposes Not allowed"},{"location":"admin/collab/#things-you-are-required-to-do","title":"Things you are required to do","text":"<p>These are things which you are required to do while working on your CS 1x assignments.</p> Item Assignments Turn in only your own programs/code Yes Indicate the names of any collaborators on a program Yes"},{"location":"admin/collab/#consequences-for-violating-these-policies","title":"Consequences for violating these policies","text":"<p>Be aware that letting another student copy from you is just as bad as copying from another student, and can get you into just as much trouble.</p> <p>Be aware that we use plagiarism detection software to check for copying, and students with assignments that are suspiciously similar will be referred to the Board of Control (BoC).</p>"},{"location":"admin/collab/#finally","title":"Finally...","text":"<p>If you have any questions about the course collaboration policies, please send an email to the course instructor, Mike Vanier. Do not ask the teaching assistants; they may not give you the best answer.</p> <p>We realize that the vast majority of you (hopefully all of you) have no intention of cheating or overcollaboration in any way, and we hope that this collaboration policy won't get in the way of your enjoyment of the course.</p>"},{"location":"admin/syllabus/","title":"Course syllabus","text":"<p>This is the course syllabus for CS 1x: (Intermediate Computer Programming), Fall 2023.</p>"},{"location":"admin/syllabus/#people","title":"People","text":""},{"location":"admin/syllabus/#course-instructor","title":"Course instructor","text":"<ul> <li>Michael Vanier (he/him)</li> </ul>"},{"location":"admin/syllabus/#teaching-assistants","title":"Teaching assistants","text":"<p>This term we have one excellent teaching assistant.</p> Name Pronouns Email Vansh Tibrewal he/him vansh@caltech.edu"},{"location":"admin/syllabus/#office-hours","title":"Office hours","text":"<p>Office hours are as follows.</p> Name Time Vansh Sunday 8 PM - 10 PM Mike Sunday 10 PM - midnight <p>Office hour locations will be posted on the course Piazza page.</p>"},{"location":"admin/syllabus/#general-information-and-logistics","title":"General information and logistics","text":""},{"location":"admin/syllabus/#external-websites","title":"External websites","text":"<p>For homework submission and grading, we will use CodePost.</p> <p>For course-related discussions, we will use Piazza.</p> <p>Piazza notes:</p> <ul> <li> <p>Please use Piazza instead of emailing the instructor or the TAs.</p> </li> <li> <p>Please make a post private to the instructor and TAs   if it could give away all or part of an answer   to a problem on an assignment   (especially when posting code).</p> </li> </ul>"},{"location":"admin/syllabus/#recommended-textbooks","title":"Recommended textbooks","text":"<p>There is no required text. There may be recommended readings (generally web pages) listed as part of the lectures and assignments, but none of them are required.</p>"},{"location":"admin/syllabus/#course-overview","title":"Course overview","text":"<p>From the Caltech catalog:</p> <p>CS 1x. Intermediate Computer Programming. 6 units (2-2-2): first term. Prerequisites: Enrollment by instructor permission only. Students must be placed into this course via the CS placement test. An intermediate course on computer programming emphasizing the program design process and pragmatic programming skills. It will use the Java programming language and will assume previous programming experience such as an AP CS A course. Material will focus on more advanced topics such as recursion, exception handling and object-oriented programming. Program development and maintenance skills including debugging, testing, and documentation will also be taught. Assignments will include problems drawn from fields such as graphics, numerics, networking, and games. At the end of the course, students will be ready to learn other programming languages in courses such as CS 11, and will also be ready to take more in-depth courses such as CS 2 and CS 4.</p> <p>This course is for students with programming experience. It will be primarily concerned with program design, which is a nebulous term which describes how to write \"good\" code (as opposed to code that just works). There are many different aspects to program design; in this course we will cover the most basic of them, and CS 3 will go deeper into software engineering topics.</p>"},{"location":"admin/syllabus/#topics-covered","title":"Topics covered","text":"<ul> <li>Incremental programming as a development strategy</li> <li>Recursion, and specifically how to correctly write a recursive algorithm</li> <li>Exception handling, and how to use it correctly</li> <li>Separation of concerns, leading to more manageable/scalable code</li> <li>Making code easy to test</li> <li>Refactoring</li> <li>The D.R.Y. principle (Don't Repeat Yourself)</li> <li>Design patterns, especially object-oriented design</li> <li>Antipatterns and how to avoid them</li> </ul>"},{"location":"admin/syllabus/#learning-objectives","title":"Learning objectives","text":"<p>By the end of this course, you should be able to</p> <ul> <li>write and debug Java programs of up to 1000 lines;</li> <li>decompose problems into classes in a reasonable way:</li> <li>have a deeper understanding of what constitutes a well-designed program;</li> <li>write recursive algorithms without fear!</li> </ul> <p>At that point, you will be well-prepared to take CS 2, which will cover fundamental algorithms and data structures.</p>"},{"location":"admin/syllabus/#lectures","title":"Lectures","text":"<p>Lectures will be held once a week, on Wednesdays at 3 PM in Annenberg room 104.</p> <p>In lectures, we will be interactively reviewing code and revising and improving it. Lectures will thus be highly interactive and not passive \"brain-dump\" experiences.</p> <p>Attendance and participation currently do not count towards the final grade. However, we strive to make lectures interactive and do a lot of live coding during lectures.  Missing out on this will deprive you of many of the benefits of the course.  All lecture materials will be posted.</p>"},{"location":"admin/syllabus/#assignments","title":"Assignments","text":""},{"location":"admin/syllabus/#due-dates","title":"Due dates","text":"<p>Assignment due dates are TBA.</p>"},{"location":"admin/syllabus/#submission","title":"Submission","text":"<p>Completed assignments will be submitted to CodePost (https://codepost.io). If you are registered for the course, we will add you to the course CodePost page.</p>"},{"location":"admin/syllabus/#grading-scheme","title":"Grading scheme","text":"<p>CS 1x is graded pass/fail.</p> <p>There will be 7 assignments. There will be no exams.</p> <p>Each assignment will be given an integer grade from 0 to 3. These mean the following:</p> Grade Meaning 3 All good; no serious problems 2 Mostly correct, but some small problems 1 Partially correct, but with some serious problems 0 Not correct at all <p>In addition, there will be an end-of-course \"reflection\" document which will be worth 1 extra mark if you fill it out.</p> <p>With 6 assignments, that makes a maximum of 3x7+1 = 22 marks. The pass threshold will be 13 marks.</p>"},{"location":"admin/syllabus/#code-reviews","title":"Code reviews","text":"<p>In addition to just submitting your assignments and having them graded, we will also be conducting code reviews with each student. These will happen after you have submitted your assignment. A code review might take only a minute (if everything is perfect), or up to 20 minutes (if there is a lot to discuss).</p> <p>In a code review (which will be just you and the instructors), we will concentrate not on debugging (that's for office hours) but on making sure that the overall design of your code is reasonable. You are welcome to disagree with us; maybe you can convince us that your design is better than the one we had in mind!</p> <p>You will not be able to get a 3 on an assignment unless you have participated in a code review for that assignment.</p> <p>Note</p> <p>There will be no code reviews for assignment 1.</p>"},{"location":"admin/syllabus/#reworks","title":"Reworks","text":"<p>All assignments can be reworked for up to one week from the time when you received your grade for the assignment.  If a rework has not been submitted after one week, the original grade will stand.</p>"},{"location":"admin/syllabus/#late-policy","title":"Late policy","text":"<p>If an assignment is late when first submitted, marks are deducted at the rate of 0.5 marks/day.  These marks can't be regained through rework.  If a rework is late (i.e. is submitted more than one week after the original grade was submitted), it doesn't count, and the previous grade stands.</p> <p>Students may request extensions for assignments due to unusual circumstances. These extensions have to be approved by the course instructor (Mike).</p>"},{"location":"admin/syllabus/#software","title":"Software","text":"<p>In this course, we will be using the Java programming language exclusively. Instructions to install Java are included in the first assignment. </p> <p>Other than that, you will only need a terminal program and a plain text editor. You can use any editor you like, but we recommend the Visual Studio Code editor, which also provides access to a terminal.</p>"},{"location":"admin/syllabus/#academic-integrity","title":"Academic integrity","text":"<p>Caltech\u2019s Honor Code states that: \"No member of the Caltech community shall take unfair advantage of any other member of the Caltech community.\"</p> <p>Understanding and Avoiding Plagiarism: Plagiarism is the appropriation of another person's ideas, processes, results, or words without giving appropriate credit, and it violates the Honor Code in a fundamental way. You can find more information at: http://writing.caltech.edu/resources/plagiarism.</p>"},{"location":"admin/syllabus/#collaboration-policies","title":"Collaboration policies","text":"<p>The course collaboration policies are listed on this page.  Please read them! You are responsible for knowing them, and you are liable for any penalties that may occur if you violate any of the policies.</p>"},{"location":"admin/syllabus/#diversity-and-inclusion","title":"Diversity and inclusion","text":"<p>You all belong in this class and as such should expect to be treated by your classmates and the course staff with respect. It is our goal, as the course staff, to provide an interesting and challenging environment that is conducive to your learning. If any incident occurs that challenges this commitment to a supportive and inclusive environment, please let the instructors know so the issue can be addressed!</p>"},{"location":"admin/syllabus/#accessibility","title":"Accessibility","text":"<p>We consider accessibility to be an extremely important issue.  If some aspect of the course is making it more difficult for you to learn the material, we want to hear about it!  We want this course to be an enjoyable experience for you, not a burden.</p>"},{"location":"admin/syllabus/#student-wellness","title":"Student Wellness","text":"<p>It is very important to us that you take care of your mental wellness throughout the course. Everyone on the course staff is available to chat, and you can always attend office hours for a non-academic conversation if necessary.</p>"},{"location":"admin/syllabus/#students-with-documented-disabilities","title":"Students with documented disabilities","text":"<p>Students who may need an academic accommodation based on the impact of a disability must initiate the request with Caltech Accessibility Services for Students (CASS).  Professional staff will evaluate the request with required documentation, recommend reasonable accommodations, and prepare an Accommodation Letter for faculty dated in the current quarter in which the request is being made. Students should contact CASS as soon as possible, since timely notice is needed to coordinate accommodations. http://cass.caltech.edu/.</p> <p>Undergraduate students should contact Dr. Lesley Nye, Associate Dean of Undergraduate Students; graduate students should contact R. Darrell Peterson, Associate Dean of Graduate Studies.</p>"},{"location":"assignments/1/overview/","title":"Assignment 1: Tic-Tac-Toe","text":""},{"location":"assignments/1/overview/#due-date","title":"Due date","text":"<p>This assignment is due on Monday, October 16th at 2 AM.</p>"},{"location":"assignments/1/overview/#course-logistics","title":"Course logistics","text":"<p>In order to be able to submit this assignment (and any of the other assignments in this course), several things must have been done by now.  PLEASE DO NOT SKIP THIS SECTION!</p> <ul> <li> <p>You should have read the course syllabus and the collaboration policies document posted on the course website.  The last one is particularly important, because if you violate the collaboration policies, you may get sent to the Caltech Board of Control, which is never pleasant.</p> </li> <li> <p>You should be enrolled in the course Piazza page.</p> </li> <li> <p>You should be enrolled in the course CodePost page, which is where you will be submitting your assignments.</p> </li> </ul>"},{"location":"assignments/1/overview/#grading-policy","title":"Grading policy","text":"<p>See the course syllabus for the grading policies and the rework policies.</p>"},{"location":"assignments/1/programs/","title":"Project: An interactive Tic-Tac-Toe game","text":"<p>For this project, you will write a program that can play Tic-Tac-Toe against the user from the terminal.</p>"},{"location":"assignments/1/programs/#learning-objectives","title":"Learning objectives","text":"<ul> <li> <p>Learn the process of incremental software development.</p> </li> <li> <p>Learn (or relearn) the basics of Java: classes, methods, and fields.</p> </li> <li> <p>Learn about the <code>private</code> and <code>public</code> modifiers in Java and when to use   them.</p> </li> <li> <p>Start learning about how to use exceptions effectively.  (We will go into   this in much more detail in later assignments.)</p> </li> <li> <p>Learn about terminal-based input and output in Java.</p> </li> </ul>"},{"location":"assignments/1/programs/#template-code","title":"Template code","text":"<p>To get you started, and to provide an implementation of the <code>TicTacToeException</code> class, we are providing a template file called <code>lab1.zip</code>. This can be found in the \"Modules\" section of the course Canvas page in the \"Assignment code\" module. You should download this, uncompress it, and use the <code>tictactoe/TicTacToe1.java</code> file as the starting point for your first program.</p> <p>Note</p> <p>Remove the <code>// TODO</code> comments, which are just placeholders for the code you are supposed to write.</p>"},{"location":"assignments/1/programs/#incremental-software-development","title":"Incremental software development","text":"<p>The main theme of this assignment is incremental software development. This is not a body of knowledge as such; instead, it's an approach to the process of software development which we consider to be valuable.</p> <p>Incremental software development is not complicated, and it's not Java-specific; you can do it in any language. The main aspects of it are as follows:</p> <ol> <li> <p>Write up a document describing what you want your program to do. This doesn't have to be very detailed, but it will give you a place to start.</p> </li> <li> <p>Refine that document into \"milestones\", which are descriptions of a series of working programs which do some subset of the total functionality of the program. The last milestone will be the final version of the program. Each milestone will add more features, and some will modify features implemented in the last milestone.</p> </li> <li> <p>Write the program for milestone 1. Test it (formally or informally). When this is working, add the features of milestone 2, test them, and so on until all the programs are written.</p> </li> </ol> <p>In this assignment, we will be giving you the milestones, so you are only responsible for the last step.</p> <p>For this assignment only, we are going to force you to write and submit separate programs for each milestone. So instead of one program (<code>TicTacToe.java</code>) you will write five programs: (<code>TicTacToe1.java</code>, <code>TicTacToe2.java</code>, etc. We want to see how you write code incrementally! Note, though, that this is no harder than writing just one program, since once you are finished with e.g. <code>TicTacToe1.java</code>, you will simply copy that file to <code>TicTacToe2.java</code> and continue editing. (The only thing you need to be careful of is that you change the name of the class from <code>TicTacToe1</code> to <code>TicTacToe2</code> etc.)</p> <p>Note</p> <p>For each program, only implement the features requested for that program. If you implement too much (e.g. in an extreme case, just writing the final program and copying it to the other programs) you won't get any credit for the over-implemented programs.</p> <p>In the rest of the assignments, you will only be submitting the final version of the program. We still encourage you to develop in the incremental style for those assignments!</p>"},{"location":"assignments/1/programs/#programming-notes","title":"Programming notes","text":"<p>We will be giving you high-level descriptions of the programs we want you to write. We will list all the methods we want you to implement. However, we will leave many aspects of the program up to your own judgment.</p> <p>Usually, it will be obvious what the arguments of the methods should be. In some cases, we will spell this out, and in other cases, we won't. We expect you to make reasonable choices in the latter cases.</p> <p>For now, all methods that we instruct you to write should be <code>public</code> unless we specifically say otherwise. However, you are free to write additional methods, and those should normally be <code>private</code>. Writing an additional method is a good choice when you see you need some functionality in multiple places. (We will talk more about this later; it is the D.R.Y. or \"Don't Repeat Yourself\" design principle).</p> <p>And the most important note of all: Make sure you compile and run all of your programs, and that they do what they are supposed to do! It's easy to get lazy and just assume that your programs work, but in general, there will be small (or sometimes large) errors that need to be fixed. I like to use the motto \"untested code is broken by definition\" i.e. if it hasn't been tested, you can assume that it doesn't work.</p>"},{"location":"assignments/1/programs/#programs-to-write","title":"Programs to write","text":"<p>All programs will be in the Java \"package\" called <code>tictactoe</code>. This means that they should be in a directory called <code>tictactoe</code> and you will compile them from the directory below that e.g.</p> <pre><code>$ javac tictactoe/TicTacToe1.java\n</code></pre> <p>(The <code>$</code> is just the terminal prompt; don't type that.) You will run them from the same directory:</p> <pre><code>$ java tictactoe.TicTacToe1\n</code></pre> <p>Now we will describe what the individual programs will do.</p>"},{"location":"assignments/1/programs/#tictactoe1java","title":"<code>TicTacToe1.java</code>","text":"<p>For this program, first create the <code>TicTacToe1</code> class, with a <code>main</code> method i.e. <code>public static void main(String[] args)</code>.</p> <p>Add a constructor and a board representation, initially empty. You can choose any reasonable board representation.</p> <p>Add a <code>display()</code> method which, when called, will print the board to the terminal. (The display doesn't have to be fancy; you will improve it in later programs.)</p> <p>In <code>main()</code>, create a board and print it by calling the <code>display</code> method.</p>"},{"location":"assignments/1/programs/#tictactoe2java","title":"<code>TicTacToe2.java</code>","text":"<p>Copy your code for <code>TicTacToe1.java</code> to <code>TicTacToe2.java</code>.</p> <p>In <code>TicTacToe2.java</code>, change the name of the class from <code>TicTacToe1</code> to <code>TicTacToe2</code>.</p> <p>Improve the display by printing the lines of the tic-tac-toe board.  Print a blank line before and after the board.  Make it look nice when printed!</p> <p>Add a method called <code>move()</code> that puts an X or an O at a particular position in the tic-tac-toe grid.  The arguments are the row coordinate (an <code>int</code> between 0 to 2, inclusive), the column coordinate (ditto) and the player to move (which you can represent however you see fit).  This method throws a <code>TicTacToeException</code> (with a meaningful error message) if:</p> <ul> <li>the move coordinates are invalid</li> <li>the player is invalid (not X or O)</li> <li>the position is occupied</li> </ul> <p>The main() method should catch <code>TicTacToeException</code> exceptions and print the error message.  You will need a <code>try</code>/<code>catch</code> block for this.</p> <p>Test this program by putting some valid calls to <code>move()</code> in <code>main()</code> and printing the board.  Make moves with both players.</p>"},{"location":"assignments/1/programs/#tictactoe3java","title":"<code>TicTacToe3.java</code>","text":"<p>Warning</p> <p>This program will probably be the biggest \"jump\" from the previous program in the assignment.</p> <p>Copy your code for <code>TicTacToe2.java</code> to <code>TicTacToe3.java</code>.</p> <p>Add a <code>player</code> field which represents the next player to move. Initialize it (in the constructor) to the \"X\" player.</p> <p>Add a method <code>isWin()</code> which returns <code>false</code> if there is no win on the board for the current player, or <code>true</code> if there is a win for the current player. Try to make this reasonably elegant (not just a giant brute force enumeration of all possible wins, which we will not accept).</p> <p>Add a method <code>isFull()</code> which returns <code>true</code> if the board is full, or false otherwise.</p> <p>Add a method <code>play()</code> that allows you to play tic-tac-toe against yourself. (This will probably be the longest method that you will write in the program.) This method works as follows:</p> <ul> <li> <p>Check for draws (board full) before each move. If you find one, print a message indicating the draw and return.</p> </li> <li> <p>Print a message indicating which player is to move (e.g. \"X to move\").</p> </li> <li> <p>Print a prompt (e.g. \"Enter move: \") and read in a line of input.</p> </li> <li> <p>If <code>q</code> is input, quit the game.</p> </li> <li> <p>Otherwise, extract the coordinates of the move (e.g. the line <code>0 2</code> would give <code>0</code> and <code>2</code>).</p> </li> <li> <p>Use the coordinates to call the <code>play()</code> function. Catch any <code>TicTacToeException</code>, print the error message, and continue. (You'll need to use a <code>try</code>/<code>catch</code> form for this.)</p> </li> <li> <p>Display the board after each move.</p> </li> <li> <p>Check for wins after each move. If you find one, print a message indicating the win and return.</p> </li> </ul> <p>Call <code>play()</code> from <code>main()</code>, so when the program runs, you can play the game against yourself.</p>"},{"location":"assignments/1/programs/#programming-notes-for-tictactoe3java","title":"Programming notes for <code>TicTacToe3.java</code>","text":"<p>To read input in a Java program use the <code>Scanner</code> class (technically, <code>java.util.Scanner</code>, though you don't have to use the fully-qualified name).</p> <p>To read a line of text, use the <code>nextLine</code> method of <code>Scanner</code>.</p> <p>To split a string <code>s</code> on whitespace (space characters), do <code>s.split(\"\\\\s+\")</code>. The <code>\\\\s+</code> is a regular expression, which we may have more to say about later in the course.</p> <p>Make sure you have meaningful and specific error messages for all bad inputs. Don't just say e.g. <code>invalid input</code> or you will lose marks.</p> <p>There should be no inputs (other than e.g. control-C) that can crash the program. If any input causes the program to crash, you are not handling errors properly and you will lose marks.</p> <p>Note</p> <p>When we say \"crash the program\" we mean \"cause the program to exit with an uncaught exception traceback\".</p>"},{"location":"assignments/1/programs/#tictactoe4java","title":"<code>TicTacToe4.java</code>","text":"<p>Add a computer player by writing a method called <code>makeComputerMove()</code>. It will generate a random legal move when called and make that move. (Note: it should be a random move, not just the first move available. All possible moves should be equally likely.) It can assume that it will only be called when the computer player is about to play (so the <code>player</code> field will contain the computer player's symbol).</p> <p>Rewrite <code>play()</code> so it uses the computer player. The human player will randomly be assigned to either X or O. Print a line stating which player is X e.g.  \"Human player is X\" or \"Computer player is X\" before the game starts. Also, change the win message to report \"Computer player wins!\" or \"Human player wins!\" as appropriate.</p>"},{"location":"assignments/1/programs/#programming-notes-for-tictactoe4java","title":"Programming notes for <code>TicTacToe4.java</code>","text":"<p><code>ArrayList</code>s are useful for storing the possible legal moves (ones where the player can move because the position is unoccupied). You can have two of them (one for rows and one for columns). You should use <code>ArrayList&lt;Integer&gt;</code> if you do this; <code>ArrayList</code> is an example of a Java \"generic\" type (a type which is parameterized over another type). Do not use <code>ArrayList&lt;Object&gt;</code>.</p> <p>The <code>Random</code> class provides random number generators. The <code>nextInt</code> and <code>nextBoolean</code> methods of this class will be useful.</p>"},{"location":"assignments/1/programs/#tictactoe5java","title":"<code>TicTacToe5.java</code>","text":"<p>Improve the computer player (i.e. the <code>makeComputerMove</code> method) in these ways:</p> <ul> <li> <p>If there is a win for the computer, the computer will always make that move.</p> </li> <li> <p>If not, and if there is a win for the human opponent, it will always move to block that win.</p> </li> </ul> <p>Add Javadoc comments before all your methods. (You can do this in the other programs too, but it isn't required.) A good reference for writing Javadoc comments is here. You don't have to include every possible tag; the <code>@param</code>, <code>@return</code>, and <code>@throws</code> should be enough for now. In addition, each method's Javadoc comment should state what the method does (but not the implementation details).</p> <p>Note</p> <p>Methods that take no arguments don't need <code>@param</code> tags. Methods that return <code>void</code> don't need a <code>@return</code> tag. Methods that don't throw exceptions don't need <code>@throws</code> tags. Use your judgment.</p> <p>Test your completed program by running it several times, checking to see that it does exactly what you expect. Allow the computer to win a few times to see if it selects the winning move. Try to trap it into a loss to see if it blocks a move that would allow you to win.</p>"},{"location":"assignments/1/programs/#to-hand-in","title":"To hand in","text":"<p>Submit all your programs (<code>TicTacToe1.java</code> through <code>TicTacToe5.java</code>) to CodePost as <code>Assignment 1</code>.</p>"},{"location":"assignments/1/setup/","title":"Getting set up","text":"<p>This part of the assignment describes how to get the course software up and running.  Fortunately, this should be very easy.</p>"},{"location":"assignments/1/setup/#installing-java","title":"Installing Java","text":"<p>The main Java download site is here. This is where you can find the most up-to-date Java versions. We recommend using the most recent version of Java instead of relying on whatever version of Java came with your computer, since the version on your computer may not have some features in the latest versions, and we may use those features. As of this writing, the latest version of Java is Java 21.</p>"},{"location":"assignments/1/setup/#editing-your-code","title":"Editing your code","text":"<p>You can use any code editor you want for this course, but we recommend Visual Studio Code, also known as \"VS Code\". VS Code is nice in that it works well with almost all programming languages, so you can use it throughout your programming career.</p> <p>Some Java programmers like integrated development environments (IDEs) like IntelliJ. The main advantage of these is that support for various tools (like testing tools) is built-in. The main disadvantage is that these IDEs are heavyweight, have a long learning curve, and tend to organize code in \"projects\" with many files that are only there for the benefit of the IDE. Put simply, they make Java programming more complicated than it needs to be, at least from our perspective. (They are much more valuable to professional Java programmers working on very large code bases, but that isn't our use case.) We won't forbid you from using an IDE, but you will have to submit the exact code files we ask you to, and we will have to be able to compile and run them without using your IDE.</p> <p>At the other extreme, you can get by with just a terminal editor like neovim.  (Mike is very partial to working this way.)</p>"},{"location":"assignments/1/setup/#getting-familiar-with-the-terminal","title":"Getting familiar with the terminal","text":"<p>We will expect that you will be able to compile and run your programs from a terminal. Both Linux and MacOS are Unix systems, so they use Unix terminal commands. Compiling and running Java programs is straightforward on these systems. Windows has its own set of terminal commands. Recently, Windows has acquired a fantastic new feature called Windows Subsystem for Linux. This allows you to run a Linux system inside of Windows if you like. You can use this to compile your Java programs, or you can work directly from Windows, as you like. One nice thing about the VS Code editor is that it includes an integrated terminal which allows you to run terminal commands without leaving your editor.</p> <p>In addition to being able to compile and run Java programs, about the only other commands you'll need to know are those that create directories, move files between directories, and allow you to navigate between directories. You can easily find tutorials on these subjects on the internet.</p>"},{"location":"assignments/1/setup/#learning-java","title":"Learning Java","text":"<p>All of you know either Python or Java. We will be using Java exclusively in this course.</p> <p>We expect that most of you know will know Java to some extent already, most likely from an AP course in high school. We will not be doing a Java tutorial in lectures, because we believe that even if you don't know Java, you can pick it up quickly if you know Python. Also, Java has excellent on-line documentation available, which we encourage you to consult.</p> <p>Note</p> <p>Assignment 1 is intended to be in part a Java refresher. If you are having any Java-specific problems, please ask the TAs or instructor for help! We don't expect you to be expert Java programmers at this point. (At the end of the course, you will be.)</p> <p>Some web sites we recommend include:</p> <ul> <li> <p>The Java API   This contains detailed documentation on the extensive Java code libraries.   (One of the best thing about Java is that the code libraries are so large.)</p> </li> <li> <p>The official Java tutorials.   If you are unfamiliar with Java, or need a refresher,   this is the place to start.</p> </li> </ul> <p>For very specific language-related questions, Google and Stack Overflow can be worthwhile resources, as can asking the TAs and instructor. (Of course, don't use Google or Stack Overflow to search for implementations of the assignment code!)</p>"},{"location":"assignments/1/setup/#other-software-tools","title":"Other software tools","text":"<p>All you need for this course is a terminal, a code editor and the basic Java installation.</p> <p>Most Java programmers use build systems like Ant, Maven, or Gradle.  We won't be using these, but if you know them you can use them.</p> <p>Most programmers store their code in code repositories like Github. You can do this if you like, but you must make your repositories private and you must promise not to share your code with other students, even after the course is over. Teaching you to use Github is beyond the scope of the course1 but if you know it or are willing to learn it, it's worth using. In particular, it protects you from wiping out a lot of work accidentally because you entered the wrong command.</p> <ol> <li> <p>We had to leave something for CS 3!\u00a0\u21a9</p> </li> </ol>"},{"location":"assignments/2/overview/","title":"Assignment 2: Sudoku solver","text":"<p>In this assignment, you'll write a program that can solve the puzzle game Sudoku.</p>"},{"location":"assignments/2/overview/#due-date","title":"Due date","text":"<p>This assignment is due on Monday, October 23th at 2 AM.</p>"},{"location":"assignments/2/sudoku/","title":"Program: A simple Sudoku solver","text":"<p>For this assignment, you will write a program that can read the description of a Sudoku puzzle from a file, solve the puzzle, and print the solution onto the terminal. It will also save the solution to a file.</p>"},{"location":"assignments/2/sudoku/#learning-objectives","title":"Learning objectives","text":"<ul> <li> <p>Write a program which solves a non-trivial problem using a recursive   algorithm.</p> </li> <li> <p>Learn about file input/output in Java, and accessing command-line arguments.</p> </li> <li> <p>Learn about how to use exceptions effectively.</p> </li> <li> <p>Get more practice with incremental software development.</p> </li> </ul>"},{"location":"assignments/2/sudoku/#about-sudoku","title":"About Sudoku","text":"<p>You probably already know how to play Sudoku, but if not, this page will tell you all you need to know. Briefly, Sudoku is a pencil-and-paper puzzle done on a 9x9 grid, where each square in the grid needs to be filled with a digit from 1 to 9. Some digits are filled in at the beginning of the puzzle, and the goal is to fill in the rest. A good Sudoku puzzle should only have one solution.  The constraints are:</p> <ul> <li> <p>each row should have exactly one of all the digits from 1 to 9</p> </li> <li> <p>each column should have exactly one of all the digits from 1 to 9</p> </li> <li> <p>each 3x3 non-overlapping \"box\" (outlined in the puzzle) should have exactly one of all the digits from 1 to 9</p> </li> </ul> <p>Note that since the 3x3 boxes are non-overlapping, there are only 9 of them.</p> <p>Playing Sudoku means filling in the empty squares with numbers so that the constraints are not violated, and eventually figuring out which number goes into all the empty squares.  It's generally a good idea to use a pencil or erasable pen, because it's easy to make mistakes and have to erase numbers you mistakenly thought were a particular digit!</p>"},{"location":"assignments/2/sudoku/#program-to-write","title":"Program to write","text":"<p>Your program, when run, will read in a file containing a description of a single Sudoku puzzle.  The file's contents might look like this:</p> <pre><code>.........\n....1..92\n.86....4.\n..156....\n.....362.\n......5.7\n.3.....8.\n.9.8.2...\n..7..43..\n</code></pre> <p>This is a text file with 9 lines of 9 characters each (not counting the newline characters at the ends of lines).  Each character is either a digit (meaning that the corresponding location in the Sudoku puzzle must be filled with that digit), or is a <code>.</code> character (meaning that the corresponding location in the Sudoku puzzle is empty).  The name of the file is provided on the command line:</p> <pre><code>$ java sudoku.Sudoku boards/board1\n</code></pre> <p>assuming the input file is called <code>board1</code> and is located in the <code>boards</code> directory.</p> <p>Note</p> <p>The <code>sudoku.Sudoku</code> argument is because we define a Java package called <code>sudoku</code> (in a directory of the same name) and then define the <code>Sudoku</code> class in that package.</p> <p>The program will read in the contents of the file, store it in an internal representation of the Sudoku board, solve the puzzle, and print out the solution to the terminal.  So a successful run of the program on the previous file would look like this:</p> <pre><code>$ java sudoku.Sudoku board1\n412985763\n753416892\n986327145\n271568934\n549173628\n368249517\n634751289\n195832476\n827694351\n</code></pre> <p>This is the correct solution of the Sudoku puzzle given above. (You might want to take a minute to verify that this is the case.)</p> <p>The program will also save the solution into a file called <code>sudoku.out</code>. If you print it out, you'll see the same thing:</p> <pre><code>$ cat sudoku.out\n412985763\n753416892\n986327145\n271568934\n549173628\n368249517\n634751289\n195832476\n827694351\n</code></pre> <p>(The <code>cat</code> program is a Unix-specific program; it won't work on Windows unless you are using WSL, but <code>type</code> should work.) 1</p> <p>If the board is unsolvable, the program should not crash, but should print out a message stating that it's unsolvable.</p> <p>You can assume that all the input boards we provide are valid i.e. don't contain impossible configurations like multiple 1s on one line. Some input files (<code>board11</code> and <code>board12</code>) will be unsolvable.</p>"},{"location":"assignments/2/sudoku/#solution-algorithm","title":"Solution algorithm","text":"<p>There are a number of solution algorithms for solving Sudoku problems, some better than others. For our purposes, we will use a simple algorithm, but be aware that much more sophisticated algorithms exist.</p> <p>Our algorithm consists of traversing the Sudoku board row-by-row and looking at each location (which we'll call a \"cell\") in the row. If the cell is already filled with a number, continue to the next number in the row, and if you're at the end of the row, go to the beginning of the next row. (If there is no next row, the board is solved!) Otherwise, you have to pick a number between 1 and 9. First, collect all the numbers that could be at that location. These numbers are the numbers that don't have row, column, or box conflicts:</p> <ul> <li> <p>A row conflict is when the number is already present in the same row.</p> </li> <li> <p>A column conflict is when the number is already present in the same column.</p> </li> <li> <p>A box conflict is when the number is already present in the 3x3 box which   contains the location.</p> </li> </ul> <p>So far, so good.  But since any of the numbers that don't have conflicts (which we'll call \"allowed numbers\") could be the number that goes in the cell, which one should we choose?  This is the key step in the algorithm.</p> <p>The idea is to choose any of the allowed numbers and try to solve the resulting board (this is where the recursion comes in).  If the board can be solved, you're done, so return.  If not, try the next number and again try to solve the resulting board.  Continue until you either solve the board, or you run out of numbers.  If you run out of numbers, there is no number that works for that board in that location, so that board is unsolvable.  In that case, clear the number from the location (fill it with a 0) and return.</p> <p>Note</p> <p>Filling the location with a 0 \"unmakes\" the move. It may not be obvious, but this step of unmaking the move when no number works is critical to making the algorithm work. Think about why that should be.</p> <p>Your solving function should return a boolean value: <code>true</code> if a solution is found and <code>false</code> if not.  Returning <code>false</code> only means that a particular board is unsolvable; it may not mean that the original puzzle is unsolvable. In fact, this is how the algorithm works: try a number, see if the resulting board is solvable, and if not, try the next number, etc. When no number works in a location, clear the location (fill it with a 0) and return <code>false</code>.</p>"},{"location":"assignments/2/sudoku/#coding-notes","title":"Coding notes","text":""},{"location":"assignments/2/sudoku/#template-code","title":"Template code","text":"<p>In the template code base (<code>lab2.zip</code> in Canvas) we are supplying you with a template file called <code>Sudoku.java</code>. This contains the definitions of some exception classes and some stubs2 for methods you need to write. We've written <code>// TODO</code> comments where you need to add code (and you should remove these comments when you do). You can also add extra methods as you see fit (and you will probably want to do this).</p>"},{"location":"assignments/2/sudoku/#exception-handling","title":"Exception handling","text":"<p>The template code defines three Sudoku-specific exception classes:</p> <ul> <li> <p><code>SudokuException</code></p> <p>This is a generic Sudoku exception which should never be thrown by itself. Its purpose is to act as a superclass for more specific kinds of Sudoku exceptions.</p> </li> <li> <p><code>SudokuInputException</code></p> <p>This exception is thrown when reading in a Sudoku board from a file when the input format is incorrect.  This could mean invalid characters, too many or too few lines, etc.</p> </li> <li> <p><code>SudokuInvalidSolutionException</code></p> <p>This exception is thrown when validating the Sudoku solution if the solution turns out to be invalid (i.e. contains the same number in two or more places in a row, column, or box).</p> </li> </ul> <p>We'll point out below which methods should throw which exceptions.  All exceptions should be caught in the <code>main</code> method (don't let an uncaught exception crash the program!).  When caught, just print out the exception's error message (use the <code>getMessage()</code> method of the exception classes to return the exception error message, and then print it out). Error messages should be printed to <code>System.err</code>, not <code>System.out</code>.</p> <p>When throwing exceptions, always provide a meaningful error message as an argument to the exception constructor. (This is not a general rule, just what we want you to do in this assignment.)</p>"},{"location":"assignments/2/sudoku/#methods-to-define","title":"Methods to define","text":"<ul> <li> <p><code>public static void main(String[] args)</code></p> <p>This method should:</p> <ul> <li> <p>create a new <code>Sudoku</code> instance</p> </li> <li> <p>load a board specified by the first command-line argument (<code>args[0]</code>)</p> </li> <li> <p>try to solve the board</p> </li> <li> <p>if solved, print the solution, validate the solution, and save the board to   the file <code>sudoku.out</code></p> </li> <li> <p>if not, print a message indicating that the board is unsolvable</p> </li> <li> <p>catch any exceptions thrown and print the error messages</p> </li> </ul> </li> <li> <p><code>Sudoku</code></p> <p>This constructor method should create a new, empty Sudoku board.</p> </li> <li> <p><code>loadBoard</code></p> <p>This method takes a single <code>String</code> argument (the pathname of a file which represents a Sudoku board). It loads that board into the current Sudoku object's board. It throws a <code>SudokuInputException</code> if the file's format is incorrect. If the file doesn't exist, it should catch the <code>FileNotFoundException</code> that is thrown and re-throw it as a <code>SudokuInputException</code>.</p> <p>The file should consist of exactly 9 lines of 9 characters each (not counting the newline character at the end of each line). Each character should be a digit from 1 to 9 or a dot character (<code>.</code>). Anything else (e.g. a space) is an error.</p> <p>Useful Java classes you might use include <code>File</code> and <code>Scanner</code>. Some methods you might find useful include:</p> <ul> <li><code>Character.isDigit</code></li> <li><code>Character.getNumericValue</code></li> </ul> <p>See the  Java documentation for more about these methods.3</p> <p>You don't have to check that the Sudoku board in the file has no repeated numbers in the rows/columns/boxes. (If it does, the board will not be solvable anyway.)</p> <p>You should close the file you opened. (If you use the <code>Scanner</code> class, it has a <code>close</code> method, while <code>File</code> (curiously) doesn't.)</p> </li> <li> <p><code>saveBoard</code></p> <p>This method takes one argument: a filename. It saves the current board state to the file with the given name (overwriting any file contents that may exist or creating a new file if not). The format of the saved board is the same as the format of <code>loadBoard</code>: 9 lines of 9 characters, and all characters are digits in the range 1-9 or the <code>.</code> character. Don't forget that each line has to end in a newline character (<code>\\n</code>), and this is a real character that you have to put in. Also, never write the <code>0</code> character; write a <code>.</code> character in its place instead.</p> <p>The <code>FileWriter</code> class will be useful here.</p> </li> <li> <p><code>printBoard</code></p> <p>This method takes no arguments and prints the board state to the terminal. The format is the same as that described above for <code>loadBoard</code> and <code>saveBoard</code>.</p> <p>Tip</p> <p>Since both the <code>saveBoard</code> and the <code>printBoard</code> methods have to convert the state of the board into characters with the same format, you can re-use this code by defining a method that converts the board state to a <code>String</code>, and simply calling that method in <code>saveBoard</code> and <code>printBoard</code>.  The method that converts an object to a string is called <code>toString</code>, and it's defined for all objects.  If you want to redefine it, you should put the annotation <code>@Override</code> before the method e.g.</p> <pre><code>@Override\npublic String toString() {\n    // ...\n}\n</code></pre> <p>This just tells Java that you know that you are overriding an existing implementation of <code>toString</code>.  Annotations like these make some common bugs less likely.</p> <p>This process of taking code that is repeated in two methods and moving it to a separate method is called factoring.  This is one of the commonest tricks that programmers use to keep their code clean.</p> </li> <li> <p><code>solveBoard</code></p> <p>This method takes no arguments.  It attempts to solve the board using the algorithm described above.  If successful, it returns <code>true</code>.  If not, it returns <code>false</code>.</p> </li> <li> <p><code>validateSolution</code></p> <p>This method takes no arguments.  It should only be called when the board is solved.  It checks that the solution is valid.  This means:</p> <ul> <li>each row contains all digits from 1 to 9</li> <li>each column contains all digits from 1 to 9</li> <li>each 3x3 box contains all digits from 1 to 9</li> </ul> <p>The method returns <code>void</code>, but if the solution is invalid, it throws a <code>SudokuInvalidSolutionException</code> with an error message indicating what the problem is.  For instance, an error message might say that a row doesn't contain a particular digit or has too many of a particular digit.  (Note that if a digit is repeated, another digit will be absent.  You can choose which error to report.)</p> </li> </ul>"},{"location":"assignments/2/sudoku/#incremental-development","title":"Incremental development","text":"<p>Start by defining the <code>Sudoku</code> constructor, <code>loadBoard</code>, and <code>printBoard</code>. Your first version of the <code>main</code> method should simply load a Sudoku file and print it.</p> <p>Then add the <code>saveBoard</code> method.  Have the program load a file, print it, and save it.  Check that the saved file (<code>sudoku.out</code>) looks OK.</p> <p>Then write the <code>solveBoard</code> method.  This is by far the most interesting method to write, and also the one that may cause you the most grief.  Let us know if you're having problems!</p> <p>Note</p> <p>You should definitely define extra methods to help with the <code>solveBoard</code> method.  In particular, we suggest that you define a <code>solveBoardFrom</code> method that solves a board starting from a particular location.  This is the only method that needs to be recursive.  Then <code>solveBoard</code> just has to call this method with the initial location.</p> <p>It's not necesssary, but you may also find it useful to define a method or methods to check if a number can be placed in a particular location without violating the row, column or box constraints.  In general, many small methods are usually a better design than one big method.</p> <p>Finally, write the <code>validateSolution</code> method.  Validating rows and columns should be easy; boxes are a bit trickier.</p>"},{"location":"assignments/2/sudoku/#testing","title":"Testing","text":"<p>We are providing a few Sudoku boards in the <code>boards/</code> subdirectory. This consists of a number of text files representing boards, ranging from <code>board</code> to <code>board12</code>. <code>board1</code> to <code>board10</code> are solvable, while <code>board11</code> and <code>board12</code> aren't. Test your program on all the boards. The solvable boards shouldn't take too long to solve; if your program takes more than a few seconds on any of the boards, you've probably done something wrong (or at least, your program could be more efficient).</p> <p>Also, try running the program with invalid inputs e.g.</p> <pre><code>$ java sudoku.Sudoku\n$ java sudoku.Sudoku foo bar baz\n$ java sudoku.Sudoku 1 2 3 4 5\n</code></pre> <p>In these cases, the program should report an error.  The accepted way to do this is to print a \"usage message\" when the program is invoked with the wrong number of command-line arguments.  For instance, the program could print this:</p> <pre><code>usage: java sudoku.Sudoku filename\n</code></pre> <p>This tells the user that the program only takes one argument, which should represent a filename.</p>"},{"location":"assignments/2/sudoku/#what-to-hand-in","title":"What to hand in","text":"<p>Please submit your completed <code>Sudoku.java</code> file to CodePost as <code>Assignment 2</code>.</p> <ol> <li> <p><code>cat</code> is short for \"concatenate\" since the program can also concatenate files. It has nothing to do with adorable pets.\u00a0\u21a9</p> </li> <li> <p>A stub is a piece of code without an implementation, intended to be filled in later.\u00a0\u21a9</p> </li> <li> <p>Learning how to find your way around the documentation may be tricky at first, but this is an essential skill for Java programmers.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/welcome/","title":"Welcome to CS 1x!","text":"<p>This course is called Intermediate Computer Programming. It's a course on programming for students who have already have a considerable amount of experience in computer programming. Therefore (unlike CS 1) we will not be teaching you \"how to program\" from scratch. Instead, we will focus on the program design process, as well as covering a number of areas that typically trip up even experienced programmers (e.g. recursion, exception handling, etc.).</p> <p>This book serves as the official course document repository. We will be posting most of the course-related content in these pages, including:</p> <ul> <li>the course syllabus   (which you should read as soon as possible!)</li> <li>the course collaboration policies   (which you should also read as soon as possible!)</li> <li>assignments</li> </ul> <p>and anything else we consider useful.</p> <p>Your feedback on these notes will be very helpful to us in improving them, so please let us know if anything is hard to understand or if something that should be here isn't.</p> <p>Course-related material we won't post here includes:</p> <ul> <li>lecture slides</li> <li>assignment code zip files</li> <li>some administrative information</li> </ul> <p>These will be posted on the course Canvas page in the Modules section.</p>"}]}