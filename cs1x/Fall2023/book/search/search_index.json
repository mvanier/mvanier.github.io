{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The CS 1x book: Fall 2023","text":"<p>This book is the official document repository for the Caltech CS 1x course (Intermediate Computer Programming).</p> <p>The course instructor is Mike Vanier. See the syllabus for administrative information.</p>"},{"location":"admin/collab/","title":"Collaboration policies","text":""},{"location":"admin/collab/#overview","title":"Overview","text":"<p>The CS 1x collaboration policies determine if, and how much, you are allowed to collaborate with other students while working on your assignments.</p> <p>Please read this document to the very end, because you are responsible for abiding by all the rules set forth here.  Failure to abide by these rules may cause you to get sent to the Board of Control, and that is not pleasant for anyone concerned.  Therefore, we want to be extra clear on what constitutes fair collaboration in this course.</p> <p>Note</p> <p>In many places in this document, you will read that some kind of behavior is strictly forbidden. We are not trying to scare you or intimidate you, and we're not trying to be jerks. We just want to make absolutely sure that you know what the rules are, and saying that something is strictly forbidden is pretty unambiguous. (We apologize in advance if you find this annoying.)</p>"},{"location":"admin/collab/#basic-policy","title":"Basic policy","text":"<p>You are welcome to collaborate informally on your assignments with other individuals who are taking or have taken the class, but you must write all of your own code and you must not look at other students' code, except to help them as described below. Copying another student's code verbatim or nearly verbatim (from a file, a whiteboard, a screen share or anywhere else) is not acceptable and is an Honor Code violation.  Taking another student's file and modifying it to make it look different is definitely not acceptable and is an Honor Code violation.  Consulting a printed or electronically displayed version of another student's code and referring to it while you write your own code is not acceptable either, and is also an Honor Code violation. Having someone dictate code while you type isn't acceptable either.  Basically, you have to do your own work.</p> <p>Getting advice on algorithms or syntactic details of the language, or suggestions on how to debug a part of your program that isn't working, is fine.</p> <p>All of the above also applies if you are getting tutored for the course, officially or unofficially.</p> <p>All of the above also applies to student work from previous years.  We re-use some problems in assignments, and copying answers from an assignment that was submitted in previous years is an Honor Code violation just as much as copying from a student who is currently taking the course.</p>"},{"location":"admin/collab/#helping-others-and-the-50-foot-rule","title":"Helping others and the \"50-foot rule\"","text":"<p>It is common for students to want to help other students to write and debug their assignments.  While we prefer that you go to one of the course teaching assistants when you need help on the assignments (it doesn't matter which one), we don't forbid you from seeking help from other students or offering your help to other students.  However, we do insist on some guidelines to make the process fair for everyone.</p> <p>When you are helping another student with their homework, you are acting as an unofficial teaching assistant, and thus you must behave like one.  A teaching assistant will not just tell you the answer or dictate code to you; he/she will help you work through the problem so that you understand what you are doing wrong.  If you don't have the time or the inclination to do this, do not assist other students.  If you just give them your code, you are violating the Honor Code and both you and the people you are giving the code to may be in for some serious consequences.</p> <p>As a way of clarifying the way in which you can help other students (especially when it comes to debugging their code), we want you to obey the \"50 foot rule\". This rule states that if you help another student with their programming problems (including debugging), you must not consult your own code while doing so.  Specifically, we ask that your own code be at least 50 feet away i.e. not visible to you or the person you are helping while you are helping them.  (It doesn't have to be exactly 50 feet; the point is that you can't see your code while helping the other person, and you shouldn't run back and forth between your computer with your code and the computer of the person you're helping.) The slogan of the 50-foot rule is: \"Help them with your brain, not with your code.\"  Please do not try to find a loophole kind of way around this e.g. projecting your code on a building 50 feet away; that is clearly not what we mean.  Posting your code on a pastebin-like internet site, emailing your code to other people, sharing your screen with your code on it, printing it out, or even referring to it on your laptop while helping someone else, are all clear violations of the collaboration policy for this course.  Also, we don't want you to put your code up on a computer in a room 50 feet away from where you're helping someone and run back and forth, dictating a line at a time.  If you can't help them without consulting your code, don't help them.  Refer them to a teaching assistant. </p> <p>Note</p> <p>The 50-foot rule only applies when helping another student in person.</p> <p>Helping another student using teleconferencing software like Zoom, Skype, Discord etc. is covered below, but one aspect of it is that screen sharing is not permitted.</p> <p>We realize that it's more convenient to ask someone in your house for help than to walk all the way to the Annenberg building.  A possible solution is to get to know a TA and meet with them in their dorm room (if they are willing).</p>"},{"location":"admin/collab/#use-and-abuse-of-pseudocode","title":"Use and abuse of pseudocode","text":"<p>In the past, some students have been called in to the BoC because of very similar code that was ultimately traced to pseudocode written on a whiteboard which was almost exactly like the final code.  Pseudocode is supposed to be an informal, non-executable description of an algorithm.  If you write or consult pseudocode which is (say) 80% or more of the way to being actual runnable code as a way to do an end run around the collaboration policies, be advised that we and the BoC are well aware of this problem and you will not get away with it.  On the other hand, if you (or a TA) write out or read pseudocode which is a human-readable description of an algorithm without any actual code in it, you are fine.</p>"},{"location":"admin/collab/#teleconferencing-software-eg-zoom-discord","title":"Teleconferencing software (e.g. Zoom, Discord)","text":"<p>If you use teleconferencing software (like Zoom) or software with teleconferencing capabilities (like Discord), you may not share your screen with another student (unless they are a course teaching assistant), whether to help them or to get help from them.  This also applies to non-students (again, with the exception of the course instructor).</p> <p>Also, it is strictly forbidden to dictate code over teleconferencing software.  This is consistent with the rules in the other sections of this document.</p>"},{"location":"admin/collab/#discussion-boards-and-chat-programs-eg-piazza-slack-discord","title":"Discussion boards and chat programs (e.g. Piazza, Slack, Discord)","text":"<p>You are strictly forbidden from posting code which answers or even partially answers a problem to a discussion board (such as Piazza) unless it's a private message to one or more instructors/TAs.  If this happens you may lose the ability to use the discussion board for any purpose.</p> <p>Note</p> <p>This has been a problem for some students in the past. There is nothing wrong with posting code to Piazza as long as it is a private message to the instructors.  Posting a public message containing code is another matter, and we reserve the right to ban you from using Piazza if this happens.</p> <p>This also applies to programs with chat features that are not used in the course (like Slack), or even email for that matter.</p>"},{"location":"admin/collab/#use-of-websites","title":"Use of websites","text":"<p>It is strictly forbidden to post any of the problems from the assignments onto websites (for instance, Stack Overflow), and anyone caught doing this will be charged with an Honor Code violation.  This includes problems that are similar to assignment problems even if not identical.  If you find a discussion of course-related material on internet websites, you may read it as long as the discussion is not about a problem that is identical to or very similar to a problem on one of the course assignments.  However, do not transcribe code from the internet into your homework submissions.</p> <p>It is strictly forbidden to look at any solutions to any previous years' CS 1x work posted on internet code repository sites (including but not limited to GitHub, GitLab, BitBucket, etc.).  It is also strictly forbidden to put your own code on such a repository unless (a) it is a private repository, and (b) you do not allow anyone else access to this private repository.  You may also not fork any such repositories that you might happen to find; we will consider this prima facie evidence of intent to plagiarize.</p>"},{"location":"admin/collab/#use-of-code-hinting-software-eg-github-copilot-chatgpt","title":"Use of code hinting software (e.g. Github Copilot, ChatGPT)","text":"<p>You are strictly forbidden to use code hinting software such as Github Copilot or ChatGPT for any part of this course.</p>"},{"location":"admin/collab/#summary-tables","title":"Summary tables","text":"<p>Here is a summary of what is and is not allowed while working on assignments.</p>"},{"location":"admin/collab/#resources","title":"Resources","text":"<p>These are resources that you may or may not be allowed to consult while working on your assignments.</p> Item Status Course readings OK Course textbooks OK Official Java documentation OK Other Java documentation OK Other Java books OK Your notes OK Notes of other students Not allowed Your graded assignments OK Other students' graded assignments Not allowed Other students' ungraded assignments Not allowed Other code written by anyone else (inside or outside Caltech) that answers an assigned problem Not allowed Solutions to assignment problems from a previous year Not allowed Material posted on internet forums that answers specific problems Not allowed Material in code repositories (Github, Bitbucket, Gitlab etc.) which is not specifically part of the course Not allowed Code hinting software (Github Copilot, ChatGPT, etc.) Not allowed"},{"location":"admin/collab/#activities","title":"Activities","text":"<p>These are activities which you may or may not be allowed to do while working on your assignments.</p> Item Assignments Looking at code written by other people in the class Not allowed Looking at code written by anyone not in the class Not allowed Discussing problems informally with other students OK Discussing problems with a TA or instructor OK Asking clarifying questions to a TA or instructor OK Showing your code to another student in the class to help them with a homework problem Not allowed Emailing your code to another student in the class to help them with a homework problem Not allowed Typing your code into a chat program to help another student with a homework problem Not allowed Sharing a screen on Zoom or other teleconferencing software with anyone who is not a CS 1x TA or a CS 1x instructor Not allowed Showing your code to a TA or instructor Allowed Asking someone (except a TA or instructor) how to write the code for a problem Not allowed Helping other students debug their code, as long as you follow the \"50-foot rule\" (see above) OK Asking a TA or instructor for help debugging your code OK Using an external library, as long as it does not provide a direct solution Need to ask instructor for permission Using/consulting pseudocode written by other students See above section (if you are in doubt, assume it's not allowed, or ask the instructor) Uploading course-related code to a code repository Only if the repository is owned by you, is private and is not shared Forking another person's code repository for course-related purposes Not allowed"},{"location":"admin/collab/#things-you-are-required-to-do","title":"Things you are required to do","text":"<p>These are things which you are required to do while working on your CS 1x assignments.</p> Item Assignments Turn in only your own programs/code Yes Indicate the names of any collaborators on a program Yes"},{"location":"admin/collab/#consequences-for-violating-these-policies","title":"Consequences for violating these policies","text":"<p>Be aware that letting another student copy from you is just as bad as copying from another student, and can get you into just as much trouble.</p> <p>Be aware that we use plagiarism detection software to check for copying, and students with assignments that are suspiciously similar will be referred to the Board of Control (BoC).</p>"},{"location":"admin/collab/#finally","title":"Finally...","text":"<p>If you have any questions about the course collaboration policies, please send an email to the course instructor, Mike Vanier. Do not ask the teaching assistants; they may not give you the best answer.</p> <p>We realize that the vast majority of you (hopefully all of you) have no intention of cheating or overcollaboration in any way, and we hope that this collaboration policy won't get in the way of your enjoyment of the course.</p>"},{"location":"admin/syllabus/","title":"Course syllabus","text":"<p>This is the course syllabus for CS 1x: (Intermediate Computer Programming), Fall 2023.</p>"},{"location":"admin/syllabus/#people","title":"People","text":""},{"location":"admin/syllabus/#course-instructor","title":"Course instructor","text":"<ul> <li>Michael Vanier (he/him)</li> </ul>"},{"location":"admin/syllabus/#teaching-assistants","title":"Teaching assistants","text":"<p>This term we have one excellent teaching assistant.</p> Name Pronouns Email Vansh Tibrewal he/him vansh@caltech.edu"},{"location":"admin/syllabus/#office-hours","title":"Office hours","text":"<p>Office hours are as follows.</p> Name Time Vansh Sunday 8 PM - 10 PM Mike Sunday 10 PM - midnight <p>Office hour locations will be posted on the course Piazza page.</p>"},{"location":"admin/syllabus/#general-information-and-logistics","title":"General information and logistics","text":""},{"location":"admin/syllabus/#external-websites","title":"External websites","text":"<p>For homework submission and grading, we will use CodePost.</p> <p>For course-related discussions, we will use Piazza.</p> <p>Piazza notes:</p> <ul> <li> <p>Please use Piazza instead of emailing the instructor or the TAs.</p> </li> <li> <p>Please make a post private to the instructor and TAs   if it could give away all or part of an answer   to a problem on an assignment   (especially when posting code).</p> </li> </ul>"},{"location":"admin/syllabus/#recommended-textbooks","title":"Recommended textbooks","text":"<p>There is no required text. There may be recommended readings (generally web pages) listed as part of the lectures and assignments, but none of them are required.</p>"},{"location":"admin/syllabus/#course-overview","title":"Course overview","text":"<p>From the Caltech catalog:</p> <p>CS 1x. Intermediate Computer Programming. 6 units (2-2-2): first term. Prerequisites: Enrollment by instructor permission only. Students must be placed into this course via the CS placement test. An intermediate course on computer programming emphasizing the program design process and pragmatic programming skills. It will use the Java programming language and will assume previous programming experience such as an AP CS A course. Material will focus on more advanced topics such as recursion, exception handling and object-oriented programming. Program development and maintenance skills including debugging, testing, and documentation will also be taught. Assignments will include problems drawn from fields such as graphics, numerics, networking, and games. At the end of the course, students will be ready to learn other programming languages in courses such as CS 11, and will also be ready to take more in-depth courses such as CS 2 and CS 4.</p> <p>This course is for students with programming experience. It will be primarily concerned with program design, which is a nebulous term which describes how to write \"good\" code (as opposed to code that just works). There are many different aspects to program design; in this course we will cover the most basic of them, and CS 3 will go deeper into software engineering topics.</p>"},{"location":"admin/syllabus/#topics-covered","title":"Topics covered","text":"<ul> <li>Incremental programming as a development strategy</li> <li>Recursion, and specifically how to correctly write a recursive algorithm</li> <li>Exception handling, and how to use it correctly</li> <li>Separation of concerns, leading to more manageable/scalable code</li> <li>Making code easy to test</li> <li>Refactoring</li> <li>The D.R.Y. principle (Don't Repeat Yourself)</li> <li>Design patterns, especially object-oriented design</li> <li>Antipatterns and how to avoid them</li> </ul>"},{"location":"admin/syllabus/#learning-objectives","title":"Learning objectives","text":"<p>By the end of this course, you should be able to</p> <ul> <li>write and debug Java programs of up to 1000 lines;</li> <li>decompose problems into classes in a reasonable way:</li> <li>have a deeper understanding of what constitutes a well-designed program;</li> <li>write recursive algorithms without fear!</li> </ul> <p>At that point, you will be well-prepared to take CS 2, which will cover fundamental algorithms and data structures.</p>"},{"location":"admin/syllabus/#lectures","title":"Lectures","text":"<p>Lectures will be held once a week, on Wednesdays at 3 PM in Annenberg room 104.</p> <p>In lectures, we will be interactively reviewing code and revising and improving it. Lectures will thus be highly interactive and not passive \"brain-dump\" experiences.</p> <p>Attendance and participation currently do not count towards the final grade. However, we strive to make lectures interactive and do a lot of live coding during lectures.  Missing out on this will deprive you of many of the benefits of the course.  All lecture materials will be posted.</p>"},{"location":"admin/syllabus/#assignments","title":"Assignments","text":""},{"location":"admin/syllabus/#due-dates","title":"Due dates","text":"<p>Assignment due dates are TBA.</p>"},{"location":"admin/syllabus/#submission","title":"Submission","text":"<p>Completed assignments will be submitted to CodePost (https://codepost.io). If you are registered for the course, we will add you to the course CodePost page.</p>"},{"location":"admin/syllabus/#grading-scheme","title":"Grading scheme","text":"<p>CS 1x is graded pass/fail.</p> <p>There will be 7 assignments. There will be no exams.</p> <p>Each assignment will be given an integer grade from 0 to 3. These mean the following:</p> Grade Meaning 3 All good; no serious problems 2 Mostly correct, but some small problems 1 Partially correct, but with some serious problems 0 Not correct at all <p>In addition, there will be an end-of-course \"reflection\" document which will be worth 1 extra mark if you fill it out.</p> <p>With 6 assignments, that makes a maximum of 3x7+1 = 22 marks. The pass threshold will be 13 marks.</p>"},{"location":"admin/syllabus/#code-reviews","title":"Code reviews","text":"<p>In addition to just submitting your assignments and having them graded, we will also be conducting code reviews with each student. These will happen after you have submitted your assignment. A code review might take only a minute (if everything is perfect), or up to 20 minutes (if there is a lot to discuss).</p> <p>In a code review (which will be just you and the instructors), we will concentrate not on debugging (that's for office hours) but on making sure that the overall design of your code is reasonable. You are welcome to disagree with us; maybe you can convince us that your design is better than the one we had in mind!</p> <p>You will not be able to get a 3 on an assignment unless you have participated in a code review for that assignment.</p> <p>Note</p> <p>There will be no code reviews for assignment 1.</p>"},{"location":"admin/syllabus/#reworks","title":"Reworks","text":"<p>All assignments can be reworked for up to one week from the time when you received your grade for the assignment.  If a rework has not been submitted after one week, the original grade will stand.</p>"},{"location":"admin/syllabus/#late-policy","title":"Late policy","text":"<p>If an assignment is late when first submitted, marks are deducted at the rate of 0.5 marks/day.  These marks can't be regained through rework.  If a rework is late (i.e. is submitted more than one week after the original grade was submitted), it doesn't count, and the previous grade stands.</p> <p>Students may request extensions for assignments due to unusual circumstances. These extensions have to be approved by the course instructor (Mike).</p>"},{"location":"admin/syllabus/#software","title":"Software","text":"<p>In this course, we will be using the Java programming language exclusively. Instructions to install Java are included in the first assignment. </p> <p>Other than that, you will only need a terminal program and a plain text editor. You can use any editor you like, but we recommend the Visual Studio Code editor, which also provides access to a terminal.</p>"},{"location":"admin/syllabus/#academic-integrity","title":"Academic integrity","text":"<p>Caltech\u2019s Honor Code states that: \"No member of the Caltech community shall take unfair advantage of any other member of the Caltech community.\"</p> <p>Understanding and Avoiding Plagiarism: Plagiarism is the appropriation of another person's ideas, processes, results, or words without giving appropriate credit, and it violates the Honor Code in a fundamental way. You can find more information at: http://writing.caltech.edu/resources/plagiarism.</p>"},{"location":"admin/syllabus/#collaboration-policies","title":"Collaboration policies","text":"<p>The course collaboration policies are listed on this page.  Please read them! You are responsible for knowing them, and you are liable for any penalties that may occur if you violate any of the policies.</p>"},{"location":"admin/syllabus/#diversity-and-inclusion","title":"Diversity and inclusion","text":"<p>You all belong in this class and as such should expect to be treated by your classmates and the course staff with respect. It is our goal, as the course staff, to provide an interesting and challenging environment that is conducive to your learning. If any incident occurs that challenges this commitment to a supportive and inclusive environment, please let the instructors know so the issue can be addressed!</p>"},{"location":"admin/syllabus/#accessibility","title":"Accessibility","text":"<p>We consider accessibility to be an extremely important issue.  If some aspect of the course is making it more difficult for you to learn the material, we want to hear about it!  We want this course to be an enjoyable experience for you, not a burden.</p>"},{"location":"admin/syllabus/#student-wellness","title":"Student Wellness","text":"<p>It is very important to us that you take care of your mental wellness throughout the course. Everyone on the course staff is available to chat, and you can always attend office hours for a non-academic conversation if necessary.</p>"},{"location":"admin/syllabus/#students-with-documented-disabilities","title":"Students with documented disabilities","text":"<p>Students who may need an academic accommodation based on the impact of a disability must initiate the request with Caltech Accessibility Services for Students (CASS).  Professional staff will evaluate the request with required documentation, recommend reasonable accommodations, and prepare an Accommodation Letter for faculty dated in the current quarter in which the request is being made. Students should contact CASS as soon as possible, since timely notice is needed to coordinate accommodations. http://cass.caltech.edu/.</p> <p>Undergraduate students should contact Dr. Lesley Nye, Associate Dean of Undergraduate Students; graduate students should contact R. Darrell Peterson, Associate Dean of Graduate Studies.</p>"},{"location":"assignments/1/overview/","title":"Assignment 1: Tic-Tac-Toe","text":""},{"location":"assignments/1/overview/#due-date","title":"Due date","text":"<p>This assignment is due on Monday, October 16th at 2 AM.</p>"},{"location":"assignments/1/overview/#course-logistics","title":"Course logistics","text":"<p>In order to be able to submit this assignment (and any of the other assignments in this course), several things must have been done by now.  PLEASE DO NOT SKIP THIS SECTION!</p> <ul> <li> <p>You should have read the course syllabus and the collaboration policies document posted on the course website.  The last one is particularly important, because if you violate the collaboration policies, you may get sent to the Caltech Board of Control, which is never pleasant.</p> </li> <li> <p>You should be enrolled in the course Piazza page.</p> </li> <li> <p>You should be enrolled in the course CodePost page, which is where you will be submitting your assignments.</p> </li> </ul>"},{"location":"assignments/1/overview/#grading-policy","title":"Grading policy","text":"<p>See the course syllabus for the grading policies and the rework policies.</p>"},{"location":"assignments/1/programs/","title":"Project: An interactive Tic-Tac-Toe game","text":"<p>For this project, you will write a program that can play Tic-Tac-Toe against the user from the terminal.</p>"},{"location":"assignments/1/programs/#learning-objectives","title":"Learning objectives","text":"<ul> <li> <p>Learn the process of incremental software development.</p> </li> <li> <p>Learn (or relearn) the basics of Java: classes, methods, and fields.</p> </li> <li> <p>Learn about the <code>private</code> and <code>public</code> modifiers in Java and when to use   them.</p> </li> <li> <p>Start learning about how to use exceptions effectively.  (We will go into   this in much more detail in later assignments.)</p> </li> <li> <p>Learn about terminal-based input and output in Java.</p> </li> </ul>"},{"location":"assignments/1/programs/#template-code","title":"Template code","text":"<p>To get you started, and to provide an implementation of the <code>TicTacToeException</code> class, we are providing a template file called <code>lab1.zip</code>. This can be found in the \"Modules\" section of the course Canvas page in the \"Assignment code\" module. You should download this, uncompress it, and use the <code>tictactoe/TicTacToe1.java</code> file as the starting point for your first program.</p> <p>Note</p> <p>Remove the <code>// TODO</code> comments, which are just placeholders for the code you are supposed to write.</p>"},{"location":"assignments/1/programs/#incremental-software-development","title":"Incremental software development","text":"<p>The main theme of this assignment is incremental software development. This is not a body of knowledge as such; instead, it's an approach to the process of software development which we consider to be valuable.</p> <p>Incremental software development is not complicated, and it's not Java-specific; you can do it in any language. The main aspects of it are as follows:</p> <ol> <li> <p>Write up a document describing what you want your program to do. This doesn't have to be very detailed, but it will give you a place to start.</p> </li> <li> <p>Refine that document into \"milestones\", which are descriptions of a series of working programs which do some subset of the total functionality of the program. The last milestone will be the final version of the program. Each milestone will add more features, and some will modify features implemented in the last milestone.</p> </li> <li> <p>Write the program for milestone 1. Test it (formally or informally). When this is working, add the features of milestone 2, test them, and so on until all the programs are written.</p> </li> </ol> <p>In this assignment, we will be giving you the milestones, so you are only responsible for the last step.</p> <p>For this assignment only, we are going to force you to write and submit separate programs for each milestone. So instead of one program (<code>TicTacToe.java</code>) you will write five programs: (<code>TicTacToe1.java</code>, <code>TicTacToe2.java</code>, etc. We want to see how you write code incrementally! Note, though, that this is no harder than writing just one program, since once you are finished with e.g. <code>TicTacToe1.java</code>, you will simply copy that file to <code>TicTacToe2.java</code> and continue editing. (The only thing you need to be careful of is that you change the name of the class from <code>TicTacToe1</code> to <code>TicTacToe2</code> etc.)</p> <p>Note</p> <p>For each program, only implement the features requested for that program. If you implement too much (e.g. in an extreme case, just writing the final program and copying it to the other programs) you won't get any credit for the over-implemented programs.</p> <p>In the rest of the assignments, you will only be submitting the final version of the program. We still encourage you to develop in the incremental style for those assignments!</p>"},{"location":"assignments/1/programs/#programming-notes","title":"Programming notes","text":"<p>We will be giving you high-level descriptions of the programs we want you to write. We will list all the methods we want you to implement. However, we will leave many aspects of the program up to your own judgment.</p> <p>Usually, it will be obvious what the arguments of the methods should be. In some cases, we will spell this out, and in other cases, we won't. We expect you to make reasonable choices in the latter cases.</p> <p>For now, all methods that we instruct you to write should be <code>public</code> unless we specifically say otherwise. However, you are free to write additional methods, and those should normally be <code>private</code>. Writing an additional method is a good choice when you see you need some functionality in multiple places. (We will talk more about this later; it is the D.R.Y. or \"Don't Repeat Yourself\" design principle).</p> <p>And the most important note of all: Make sure you compile and run all of your programs, and that they do what they are supposed to do! It's easy to get lazy and just assume that your programs work, but in general, there will be small (or sometimes large) errors that need to be fixed. I like to use the motto \"untested code is broken by definition\" i.e. if it hasn't been tested, you can assume that it doesn't work.</p>"},{"location":"assignments/1/programs/#programs-to-write","title":"Programs to write","text":"<p>All programs will be in the Java \"package\" called <code>tictactoe</code>. This means that they should be in a directory called <code>tictactoe</code> and you will compile them from the directory below that e.g.</p> <pre><code>$ javac tictactoe/TicTacToe1.java\n</code></pre> <p>(The <code>$</code> is just the terminal prompt; don't type that.) You will run them from the same directory:</p> <pre><code>$ java tictactoe.TicTacToe1\n</code></pre> <p>Now we will describe what the individual programs will do.</p>"},{"location":"assignments/1/programs/#tictactoe1java","title":"<code>TicTacToe1.java</code>","text":"<p>For this program, first create the <code>TicTacToe1</code> class, with a <code>main</code> method i.e. <code>public static void main(String[] args)</code>.</p> <p>Add a constructor and a board representation, initially empty. You can choose any reasonable board representation.</p> <p>Add a <code>display()</code> method which, when called, will print the board to the terminal. (The display doesn't have to be fancy; you will improve it in later programs.)</p> <p>In <code>main()</code>, create a board and print it by calling the <code>display</code> method.</p>"},{"location":"assignments/1/programs/#tictactoe2java","title":"<code>TicTacToe2.java</code>","text":"<p>Copy your code for <code>TicTacToe1.java</code> to <code>TicTacToe2.java</code>.</p> <p>In <code>TicTacToe2.java</code>, change the name of the class from <code>TicTacToe1</code> to <code>TicTacToe2</code>.</p> <p>Improve the display by printing the lines of the tic-tac-toe board.  Print a blank line before and after the board.  Make it look nice when printed!</p> <p>Add a method called <code>move()</code> that puts an X or an O at a particular position in the tic-tac-toe grid.  The arguments are the row coordinate (an <code>int</code> between 0 to 2, inclusive), the column coordinate (ditto) and the player to move (which you can represent however you see fit).  This method throws a <code>TicTacToeException</code> (with a meaningful error message) if:</p> <ul> <li>the move coordinates are invalid</li> <li>the player is invalid (not X or O)</li> <li>the position is occupied</li> </ul> <p>The main() method should catch <code>TicTacToeException</code> exceptions and print the error message.  You will need a <code>try</code>/<code>catch</code> block for this.</p> <p>Test this program by putting some valid calls to <code>move()</code> in <code>main()</code> and printing the board.  Make moves with both players.</p>"},{"location":"assignments/1/programs/#tictactoe3java","title":"<code>TicTacToe3.java</code>","text":"<p>Warning</p> <p>This program will probably be the biggest \"jump\" from the previous program in the assignment.</p> <p>Copy your code for <code>TicTacToe2.java</code> to <code>TicTacToe3.java</code>.</p> <p>Add a <code>player</code> field which represents the next player to move. Initialize it (in the constructor) to the \"X\" player.</p> <p>Add a method <code>isWin()</code> which returns <code>false</code> if there is no win on the board for the current player, or <code>true</code> if there is a win for the current player. Try to make this reasonably elegant (not just a giant brute force enumeration of all possible wins, which we will not accept).</p> <p>Add a method <code>isFull()</code> which returns <code>true</code> if the board is full, or false otherwise.</p> <p>Add a method <code>play()</code> that allows you to play tic-tac-toe against yourself. (This will probably be the longest method that you will write in the program.) This method works as follows:</p> <ul> <li> <p>Check for draws (board full) before each move. If you find one, print a message indicating the draw and return.</p> </li> <li> <p>Print a message indicating which player is to move (e.g. \"X to move\").</p> </li> <li> <p>Print a prompt (e.g. \"Enter move: \") and read in a line of input.</p> </li> <li> <p>If <code>q</code> is input, quit the game.</p> </li> <li> <p>Otherwise, extract the coordinates of the move (e.g. the line <code>0 2</code> would give <code>0</code> and <code>2</code>).</p> </li> <li> <p>Use the coordinates to call the <code>play()</code> function. Catch any <code>TicTacToeException</code>, print the error message, and continue. (You'll need to use a <code>try</code>/<code>catch</code> form for this.)</p> </li> <li> <p>Display the board after each move.</p> </li> <li> <p>Check for wins after each move. If you find one, print a message indicating the win and return.</p> </li> </ul> <p>Call <code>play()</code> from <code>main()</code>, so when the program runs, you can play the game against yourself.</p>"},{"location":"assignments/1/programs/#programming-notes-for-tictactoe3java","title":"Programming notes for <code>TicTacToe3.java</code>","text":"<p>To read input in a Java program use the <code>Scanner</code> class (technically, <code>java.util.Scanner</code>, though you don't have to use the fully-qualified name).</p> <p>To read a line of text, use the <code>nextLine</code> method of <code>Scanner</code>.</p> <p>To split a string <code>s</code> on whitespace (space characters), do <code>s.split(\"\\\\s+\")</code>. The <code>\\\\s+</code> is a regular expression, which we may have more to say about later in the course.</p> <p>Make sure you have meaningful and specific error messages for all bad inputs. Don't just say e.g. <code>invalid input</code> or you will lose marks.</p> <p>There should be no inputs (other than e.g. control-C) that can crash the program. If any input causes the program to crash, you are not handling errors properly and you will lose marks.</p> <p>Note</p> <p>When we say \"crash the program\" we mean \"cause the program to exit with an uncaught exception traceback\".</p>"},{"location":"assignments/1/programs/#tictactoe4java","title":"<code>TicTacToe4.java</code>","text":"<p>Add a computer player by writing a method called <code>makeComputerMove()</code>. It will generate a random legal move when called and make that move. (Note: it should be a random move, not just the first move available. All possible moves should be equally likely.) It can assume that it will only be called when the computer player is about to play (so the <code>player</code> field will contain the computer player's symbol).</p> <p>Rewrite <code>play()</code> so it uses the computer player. The human player will randomly be assigned to either X or O. Print a line stating which player is X e.g.  \"Human player is X\" or \"Computer player is X\" before the game starts. Also, change the win message to report \"Computer player wins!\" or \"Human player wins!\" as appropriate.</p>"},{"location":"assignments/1/programs/#programming-notes-for-tictactoe4java","title":"Programming notes for <code>TicTacToe4.java</code>","text":"<p><code>ArrayList</code>s are useful for storing the possible legal moves (ones where the player can move because the position is unoccupied). You can have two of them (one for rows and one for columns). You should use <code>ArrayList&lt;Integer&gt;</code> if you do this; <code>ArrayList</code> is an example of a Java \"generic\" type (a type which is parameterized over another type). Do not use <code>ArrayList&lt;Object&gt;</code>.</p> <p>The <code>Random</code> class provides random number generators. The <code>nextInt</code> and <code>nextBoolean</code> methods of this class will be useful.</p>"},{"location":"assignments/1/programs/#tictactoe5java","title":"<code>TicTacToe5.java</code>","text":"<p>Improve the computer player (i.e. the <code>makeComputerMove</code> method) in these ways:</p> <ul> <li> <p>If there is a win for the computer, the computer will always make that move.</p> </li> <li> <p>If not, and if there is a win for the human opponent, it will always move to block that win.</p> </li> </ul> <p>Add Javadoc comments before all your methods. (You can do this in the other programs too, but it isn't required.) A good reference for writing Javadoc comments is here. You don't have to include every possible tag; the <code>@param</code>, <code>@return</code>, and <code>@throws</code> should be enough for now. In addition, each method's Javadoc comment should state what the method does (but not the implementation details).</p> <p>Note</p> <p>Methods that take no arguments don't need <code>@param</code> tags. Methods that return <code>void</code> don't need a <code>@return</code> tag. Methods that don't throw exceptions don't need <code>@throws</code> tags. Use your judgment.</p> <p>Test your completed program by running it several times, checking to see that it does exactly what you expect. Allow the computer to win a few times to see if it selects the winning move. Try to trap it into a loss to see if it blocks a move that would allow you to win.</p>"},{"location":"assignments/1/programs/#to-hand-in","title":"To hand in","text":"<p>Submit all your programs (<code>TicTacToe1.java</code> through <code>TicTacToe5.java</code>) to CodePost as <code>Assignment 1</code>.</p>"},{"location":"assignments/1/setup/","title":"Getting set up","text":"<p>This part of the assignment describes how to get the course software up and running.  Fortunately, this should be very easy.</p>"},{"location":"assignments/1/setup/#installing-java","title":"Installing Java","text":"<p>The main Java download site is here. This is where you can find the most up-to-date Java versions. We recommend using the most recent version of Java instead of relying on whatever version of Java came with your computer, since the version on your computer may not have some features in the latest versions, and we may use those features. As of this writing, the latest version of Java is Java 21.</p>"},{"location":"assignments/1/setup/#editing-your-code","title":"Editing your code","text":"<p>You can use any code editor you want for this course, but we recommend Visual Studio Code, also known as \"VS Code\". VS Code is nice in that it works well with almost all programming languages, so you can use it throughout your programming career.</p> <p>Some Java programmers like integrated development environments (IDEs) like IntelliJ. The main advantage of these is that support for various tools (like testing tools) is built-in. The main disadvantage is that these IDEs are heavyweight, have a long learning curve, and tend to organize code in \"projects\" with many files that are only there for the benefit of the IDE. Put simply, they make Java programming more complicated than it needs to be, at least from our perspective. (They are much more valuable to professional Java programmers working on very large code bases, but that isn't our use case.) We won't forbid you from using an IDE, but you will have to submit the exact code files we ask you to, and we will have to be able to compile and run them without using your IDE.</p> <p>At the other extreme, you can get by with just a terminal editor like neovim.  (Mike is very partial to working this way.)</p>"},{"location":"assignments/1/setup/#getting-familiar-with-the-terminal","title":"Getting familiar with the terminal","text":"<p>We will expect that you will be able to compile and run your programs from a terminal. Both Linux and MacOS are Unix systems, so they use Unix terminal commands. Compiling and running Java programs is straightforward on these systems. Windows has its own set of terminal commands. Recently, Windows has acquired a fantastic new feature called Windows Subsystem for Linux. This allows you to run a Linux system inside of Windows if you like. You can use this to compile your Java programs, or you can work directly from Windows, as you like. One nice thing about the VS Code editor is that it includes an integrated terminal which allows you to run terminal commands without leaving your editor.</p> <p>In addition to being able to compile and run Java programs, about the only other commands you'll need to know are those that create directories, move files between directories, and allow you to navigate between directories. You can easily find tutorials on these subjects on the internet.</p>"},{"location":"assignments/1/setup/#learning-java","title":"Learning Java","text":"<p>All of you know either Python or Java. We will be using Java exclusively in this course.</p> <p>We expect that most of you know will know Java to some extent already, most likely from an AP course in high school. We will not be doing a Java tutorial in lectures, because we believe that even if you don't know Java, you can pick it up quickly if you know Python. Also, Java has excellent on-line documentation available, which we encourage you to consult.</p> <p>Note</p> <p>Assignment 1 is intended to be in part a Java refresher. If you are having any Java-specific problems, please ask the TAs or instructor for help! We don't expect you to be expert Java programmers at this point. (At the end of the course, you will be.)</p> <p>Some web sites we recommend include:</p> <ul> <li> <p>The Java API   This contains detailed documentation on the extensive Java code libraries.   (One of the best thing about Java is that the code libraries are so large.)</p> </li> <li> <p>The official Java tutorials.   If you are unfamiliar with Java, or need a refresher,   this is the place to start.</p> </li> </ul> <p>For very specific language-related questions, Google and Stack Overflow can be worthwhile resources, as can asking the TAs and instructor. (Of course, don't use Google or Stack Overflow to search for implementations of the assignment code!)</p>"},{"location":"assignments/1/setup/#other-software-tools","title":"Other software tools","text":"<p>All you need for this course is a terminal, a code editor and the basic Java installation.</p> <p>Most Java programmers use build systems like Ant, Maven, or Gradle.  We won't be using these, but if you know them you can use them.</p> <p>Most programmers store their code in code repositories like Github. You can do this if you like, but you must make your repositories private and you must promise not to share your code with other students, even after the course is over. Teaching you to use Github is beyond the scope of the course1 but if you know it or are willing to learn it, it's worth using. In particular, it protects you from wiping out a lot of work accidentally because you entered the wrong command.</p> <ol> <li> <p>We had to leave something for CS 3!\u00a0\u21a9</p> </li> </ol>"},{"location":"assignments/2/overview/","title":"Assignment 2: Sudoku solver","text":"<p>In this assignment, you'll write a program that can solve the puzzle game Sudoku.</p>"},{"location":"assignments/2/overview/#due-date","title":"Due date","text":"<p>This assignment is due on Monday, October 23th at 2 AM.</p>"},{"location":"assignments/2/sudoku/","title":"Program: A simple Sudoku solver","text":"<p>For this assignment, you will write a program that can read the description of a Sudoku puzzle from a file, solve the puzzle, and print the solution onto the terminal. It will also save the solution to a file.</p>"},{"location":"assignments/2/sudoku/#learning-objectives","title":"Learning objectives","text":"<ul> <li> <p>Write a program which solves a non-trivial problem using a recursive   algorithm.</p> </li> <li> <p>Learn about file input/output in Java, and accessing command-line arguments.</p> </li> <li> <p>Learn about how to use exceptions effectively.</p> </li> <li> <p>Get more practice with incremental software development.</p> </li> </ul>"},{"location":"assignments/2/sudoku/#about-sudoku","title":"About Sudoku","text":"<p>You probably already know how to play Sudoku, but if not, this page will tell you all you need to know. Briefly, Sudoku is a pencil-and-paper puzzle done on a 9x9 grid, where each square in the grid needs to be filled with a digit from 1 to 9. Some digits are filled in at the beginning of the puzzle, and the goal is to fill in the rest. A good Sudoku puzzle should only have one solution.  The constraints are:</p> <ul> <li> <p>each row should have exactly one of all the digits from 1 to 9</p> </li> <li> <p>each column should have exactly one of all the digits from 1 to 9</p> </li> <li> <p>each 3x3 non-overlapping \"box\" (outlined in the puzzle) should have exactly one of all the digits from 1 to 9</p> </li> </ul> <p>Note that since the 3x3 boxes are non-overlapping, there are only 9 of them.</p> <p>Playing Sudoku means filling in the empty squares with numbers so that the constraints are not violated, and eventually figuring out which number goes into all the empty squares.  It's generally a good idea to use a pencil or erasable pen, because it's easy to make mistakes and have to erase numbers you mistakenly thought were a particular digit!</p>"},{"location":"assignments/2/sudoku/#program-to-write","title":"Program to write","text":"<p>Your program, when run, will read in a file containing a description of a single Sudoku puzzle.  The file's contents might look like this:</p> <pre><code>.........\n....1..92\n.86....4.\n..156....\n.....362.\n......5.7\n.3.....8.\n.9.8.2...\n..7..43..\n</code></pre> <p>This is a text file with 9 lines of 9 characters each (not counting the newline characters at the ends of lines).  Each character is either a digit (meaning that the corresponding location in the Sudoku puzzle must be filled with that digit), or is a <code>.</code> character (meaning that the corresponding location in the Sudoku puzzle is empty).  The name of the file is provided on the command line:</p> <pre><code>$ java sudoku.Sudoku boards/board1\n</code></pre> <p>assuming the input file is called <code>board1</code> and is located in the <code>boards</code> directory.</p> <p>Note</p> <p>The <code>sudoku.Sudoku</code> argument is because we define a Java package called <code>sudoku</code> (in a directory of the same name) and then define the <code>Sudoku</code> class in that package.</p> <p>The program will read in the contents of the file, store it in an internal representation of the Sudoku board, solve the puzzle, and print out the solution to the terminal.  So a successful run of the program on the previous file would look like this:</p> <pre><code>$ java sudoku.Sudoku board1\n412985763\n753416892\n986327145\n271568934\n549173628\n368249517\n634751289\n195832476\n827694351\n</code></pre> <p>This is the correct solution of the Sudoku puzzle given above. (You might want to take a minute to verify that this is the case.)</p> <p>The program will also save the solution into a file called <code>sudoku.out</code>. If you print it out, you'll see the same thing:</p> <pre><code>$ cat sudoku.out\n412985763\n753416892\n986327145\n271568934\n549173628\n368249517\n634751289\n195832476\n827694351\n</code></pre> <p>(The <code>cat</code> program is a Unix-specific program; it won't work on Windows unless you are using WSL, but <code>type</code> should work.) 1</p> <p>If the board is unsolvable, the program should not crash, but should print out a message stating that it's unsolvable.</p> <p>You can assume that all the input boards we provide are valid i.e. don't contain impossible configurations like multiple 1s on one line. Some input files (<code>board11</code> and <code>board12</code>) will be unsolvable.</p>"},{"location":"assignments/2/sudoku/#solution-algorithm","title":"Solution algorithm","text":"<p>There are a number of solution algorithms for solving Sudoku problems, some better than others. For our purposes, we will use a simple algorithm, but be aware that much more sophisticated algorithms exist.</p> <p>Our algorithm consists of traversing the Sudoku board row-by-row and looking at each location (which we'll call a \"cell\") in the row. If the cell is already filled with a number, continue to the next number in the row, and if you're at the end of the row, go to the beginning of the next row. (If there is no next row, the board is solved!) Otherwise, you have to pick a number between 1 and 9. First, collect all the numbers that could be at that location. These numbers are the numbers that don't have row, column, or box conflicts:</p> <ul> <li> <p>A row conflict is when the number is already present in the same row.</p> </li> <li> <p>A column conflict is when the number is already present in the same column.</p> </li> <li> <p>A box conflict is when the number is already present in the 3x3 box which   contains the location.</p> </li> </ul> <p>So far, so good.  But since any of the numbers that don't have conflicts (which we'll call \"allowed numbers\") could be the number that goes in the cell, which one should we choose?  This is the key step in the algorithm.</p> <p>The idea is to choose any of the allowed numbers and try to solve the resulting board (this is where the recursion comes in).  If the board can be solved, you're done, so return.  If not, try the next number and again try to solve the resulting board.  Continue until you either solve the board, or you run out of numbers.  If you run out of numbers, there is no number that works for that board in that location, so that board is unsolvable.  In that case, clear the number from the location (fill it with a 0) and return.</p> <p>Note</p> <p>Filling the location with a 0 \"unmakes\" the move. It may not be obvious, but this step of unmaking the move when no number works is critical to making the algorithm work. Think about why that should be.</p> <p>Your solving function should return a boolean value: <code>true</code> if a solution is found and <code>false</code> if not.  Returning <code>false</code> only means that a particular board is unsolvable; it may not mean that the original puzzle is unsolvable. In fact, this is how the algorithm works: try a number, see if the resulting board is solvable, and if not, try the next number, etc. When no number works in a location, clear the location (fill it with a 0) and return <code>false</code>.</p>"},{"location":"assignments/2/sudoku/#coding-notes","title":"Coding notes","text":""},{"location":"assignments/2/sudoku/#template-code","title":"Template code","text":"<p>In the template code base (<code>lab2.zip</code> in Canvas) we are supplying you with a template file called <code>Sudoku.java</code>. This contains the definitions of some exception classes and some stubs2 for methods you need to write. We've written <code>// TODO</code> comments where you need to add code (and you should remove these comments when you do). You can also add extra methods as you see fit (and you will probably want to do this).</p>"},{"location":"assignments/2/sudoku/#exception-handling","title":"Exception handling","text":"<p>The template code defines three Sudoku-specific exception classes:</p> <ul> <li> <p><code>SudokuException</code></p> <p>This is a generic Sudoku exception which should never be thrown by itself. Its purpose is to act as a superclass for more specific kinds of Sudoku exceptions.</p> </li> <li> <p><code>SudokuInputException</code></p> <p>This exception is thrown when reading in a Sudoku board from a file when the input format is incorrect.  This could mean invalid characters, too many or too few lines, etc.</p> </li> <li> <p><code>SudokuInvalidSolutionException</code></p> <p>This exception is thrown when validating the Sudoku solution if the solution turns out to be invalid (i.e. contains the same number in two or more places in a row, column, or box).</p> </li> </ul> <p>We'll point out below which methods should throw which exceptions.  All exceptions should be caught in the <code>main</code> method (don't let an uncaught exception crash the program!).  When caught, just print out the exception's error message (use the <code>getMessage()</code> method of the exception classes to return the exception error message, and then print it out). Error messages should be printed to <code>System.err</code>, not <code>System.out</code>.</p> <p>When throwing exceptions, always provide a meaningful error message as an argument to the exception constructor. (This is not a general rule, just what we want you to do in this assignment.)</p>"},{"location":"assignments/2/sudoku/#methods-to-define","title":"Methods to define","text":"<ul> <li> <p><code>public static void main(String[] args)</code></p> <p>This method should:</p> <ul> <li> <p>create a new <code>Sudoku</code> instance</p> </li> <li> <p>load a board specified by the first command-line argument (<code>args[0]</code>)</p> </li> <li> <p>try to solve the board</p> </li> <li> <p>if solved, print the solution, validate the solution, and save the board to   the file <code>sudoku.out</code></p> </li> <li> <p>if not, print a message indicating that the board is unsolvable</p> </li> <li> <p>catch any exceptions thrown and print the error messages</p> </li> </ul> </li> <li> <p><code>Sudoku</code></p> <p>This constructor method should create a new, empty Sudoku board.</p> </li> <li> <p><code>loadBoard</code></p> <p>This method takes a single <code>String</code> argument (the pathname of a file which represents a Sudoku board). It loads that board into the current Sudoku object's board. It throws a <code>SudokuInputException</code> if the file's format is incorrect. If the file doesn't exist, it should catch the <code>FileNotFoundException</code> that is thrown and re-throw it as a <code>SudokuInputException</code>.</p> <p>The file should consist of exactly 9 lines of 9 characters each (not counting the newline character at the end of each line). Each character should be a digit from 1 to 9 or a dot character (<code>.</code>). Anything else (e.g. a space) is an error.</p> <p>Useful Java classes you might use include <code>File</code> and <code>Scanner</code>. Some methods you might find useful include:</p> <ul> <li><code>Character.isDigit</code></li> <li><code>Character.getNumericValue</code></li> </ul> <p>See the  Java documentation for more about these methods.3</p> <p>You don't have to check that the Sudoku board in the file has no repeated numbers in the rows/columns/boxes. (If it does, the board will not be solvable anyway.)</p> <p>You should close the file you opened. (If you use the <code>Scanner</code> class, it has a <code>close</code> method, while <code>File</code> (curiously) doesn't.)</p> </li> <li> <p><code>saveBoard</code></p> <p>This method takes one argument: a filename. It saves the current board state to the file with the given name (overwriting any file contents that may exist or creating a new file if not). The format of the saved board is the same as the format of <code>loadBoard</code>: 9 lines of 9 characters, and all characters are digits in the range 1-9 or the <code>.</code> character. Don't forget that each line has to end in a newline character (<code>\\n</code>), and this is a real character that you have to put in. Also, never write the <code>0</code> character; write a <code>.</code> character in its place instead.</p> <p>The <code>FileWriter</code> class will be useful here.</p> </li> <li> <p><code>printBoard</code></p> <p>This method takes no arguments and prints the board state to the terminal. The format is the same as that described above for <code>loadBoard</code> and <code>saveBoard</code>.</p> <p>Tip</p> <p>Since both the <code>saveBoard</code> and the <code>printBoard</code> methods have to convert the state of the board into characters with the same format, you can re-use this code by defining a method that converts the board state to a <code>String</code>, and simply calling that method in <code>saveBoard</code> and <code>printBoard</code>.  The method that converts an object to a string is called <code>toString</code>, and it's defined for all objects.  If you want to redefine it, you should put the annotation <code>@Override</code> before the method e.g.</p> <pre><code>@Override\npublic String toString() {\n    // ...\n}\n</code></pre> <p>This just tells Java that you know that you are overriding an existing implementation of <code>toString</code>.  Annotations like these make some common bugs less likely.</p> <p>This process of taking code that is repeated in two methods and moving it to a separate method is called factoring.  This is one of the commonest tricks that programmers use to keep their code clean.</p> </li> <li> <p><code>solveBoard</code></p> <p>This method takes no arguments.  It attempts to solve the board using the algorithm described above.  If successful, it returns <code>true</code>.  If not, it returns <code>false</code>.</p> </li> <li> <p><code>validateSolution</code></p> <p>This method takes no arguments.  It should only be called when the board is solved.  It checks that the solution is valid.  This means:</p> <ul> <li>each row contains all digits from 1 to 9</li> <li>each column contains all digits from 1 to 9</li> <li>each 3x3 box contains all digits from 1 to 9</li> </ul> <p>The method returns <code>void</code>, but if the solution is invalid, it throws a <code>SudokuInvalidSolutionException</code> with an error message indicating what the problem is.  For instance, an error message might say that a row doesn't contain a particular digit or has too many of a particular digit.  (Note that if a digit is repeated, another digit will be absent.  You can choose which error to report.)</p> </li> </ul>"},{"location":"assignments/2/sudoku/#incremental-development","title":"Incremental development","text":"<p>Start by defining the <code>Sudoku</code> constructor, <code>loadBoard</code>, and <code>printBoard</code>. Your first version of the <code>main</code> method should simply load a Sudoku file and print it.</p> <p>Then add the <code>saveBoard</code> method.  Have the program load a file, print it, and save it.  Check that the saved file (<code>sudoku.out</code>) looks OK.</p> <p>Then write the <code>solveBoard</code> method.  This is by far the most interesting method to write, and also the one that may cause you the most grief.  Let us know if you're having problems!</p> <p>Note</p> <p>You should definitely define extra methods to help with the <code>solveBoard</code> method.  In particular, we suggest that you define a <code>solveBoardFrom</code> method that solves a board starting from a particular location.  This is the only method that needs to be recursive.  Then <code>solveBoard</code> just has to call this method with the initial location.</p> <p>It's not necesssary, but you may also find it useful to define a method or methods to check if a number can be placed in a particular location without violating the row, column or box constraints.  In general, many small methods are usually a better design than one big method.</p> <p>Finally, write the <code>validateSolution</code> method.  Validating rows and columns should be easy; boxes are a bit trickier.</p>"},{"location":"assignments/2/sudoku/#testing","title":"Testing","text":"<p>We are providing a few Sudoku boards in the <code>boards/</code> subdirectory. This consists of a number of text files representing boards, ranging from <code>board</code> to <code>board12</code>. <code>board1</code> to <code>board10</code> are solvable, while <code>board11</code> and <code>board12</code> aren't. Test your program on all the boards. The solvable boards shouldn't take too long to solve; if your program takes more than a few seconds on any of the boards, you've probably done something wrong (or at least, your program could be more efficient).</p> <p>Also, try running the program with invalid inputs e.g.</p> <pre><code>$ java sudoku.Sudoku\n$ java sudoku.Sudoku foo bar baz\n$ java sudoku.Sudoku 1 2 3 4 5\n</code></pre> <p>In these cases, the program should report an error.  The accepted way to do this is to print a \"usage message\" when the program is invoked with the wrong number of command-line arguments.  For instance, the program could print this:</p> <pre><code>usage: java sudoku.Sudoku filename\n</code></pre> <p>This tells the user that the program only takes one argument, which should represent a filename.</p>"},{"location":"assignments/2/sudoku/#what-to-hand-in","title":"What to hand in","text":"<p>Please submit your completed <code>Sudoku.java</code> file to CodePost as <code>Assignment 2</code>.</p> <ol> <li> <p><code>cat</code> is short for \"concatenate\" since the program can also concatenate files. It has nothing to do with adorable pets.\u00a0\u21a9</p> </li> <li> <p>A stub is a piece of code without an implementation, intended to be filled in later.\u00a0\u21a9</p> </li> <li> <p>Learning how to find your way around the documentation may be tricky at first, but this is an essential skill for Java programmers.\u00a0\u21a9</p> </li> </ol>"},{"location":"assignments/3/overview/","title":"Assignment 3: Interactive Sudoku program","text":"<p>In this assignment, you'll extend your Sudoku program from last week into a program that will allow you to solve Sudoku puzzles interactively with the computer's help.</p>"},{"location":"assignments/3/overview/#due-date","title":"Due date","text":"<p>This assignment is due on Monday, October 30th at 2 AM.</p>"},{"location":"assignments/3/sudoku_play/","title":"Program: An interactive Sudoku program","text":"<p>For this program, we will extend the Sudoku program from assignment 2 to allow your users to solve Sudoku puzzles interactively.</p>"},{"location":"assignments/3/sudoku_play/#learning-objectives","title":"Learning objectives","text":"<ul> <li> <p>Learn how to use inheritance to add functionality to a class.</p> </li> <li> <p>Learn about access modifiers (<code>private</code>, <code>protected</code> and <code>public</code>) in Java.</p> </li> <li> <p>Learn about overriding methods.</p> </li> </ul>"},{"location":"assignments/3/sudoku_play/#program-to-write","title":"Program to write","text":"<p>You will write a program that allows you to solve Sudoku puzzles interactively with the help of the computer.  The program will:</p> <ul> <li>read in a Sudoku file,</li> <li>display the state of the board,</li> <li>prompt you to enter your move (row, column, number) or another command,</li> <li>check moves for validity,</li> <li>update the board and re-display it,</li> <li>announce when the board has been solved and exit.</li> </ul> <p>In addition, there will be some special features:</p> <ul> <li> <p>you can undo moves,</p> </li> <li> <p>you can ask the program for a hint; it may give you one, or it may not be able to,</p> </li> <li> <p>you can ask the program if a position is solvable,</p> </li> <li> <p>you can ask the program to check for solvability   automatically after each move.</p> </li> </ul>"},{"location":"assignments/3/sudoku_play/#coding-notes","title":"Coding notes","text":""},{"location":"assignments/3/sudoku_play/#compiling-and-running","title":"Compiling and running","text":"<p>For this assignment, you will be writing a file called <code>SudokuPlay.java</code>. This contains a class called <code>SudokuPlay</code>, which extends the <code>Sudoku</code> class you wrote in assignment 2.</p> <p>You will need to compile both files together e.g. something like this:</p> <pre><code>$ javac sudoku/Sudoku.java sudoku/SudokuPlay.java\n</code></pre> <p>and run it like this:</p> <pre><code>$ java sudoku.SudokuPlay.java boards/board1\n</code></pre> <p>(where <code>boards/board1</code> is the path of a Sudoku board file; you can use a different file, of course).</p> <p>Note that you only need to recompile <code>Sudoku.java</code> when you make changes to it. If you've only edited <code>SudokuPlay.java</code> (which will be the case most of the time), you can just compile like this:</p> <pre><code>$ javac sudoku/SudokuPlay.java\n</code></pre>"},{"location":"assignments/3/sudoku_play/#modifications-to-sudokujava","title":"Modifications to <code>Sudoku.java</code>","text":"<p>You should use your <code>Sudoku.java</code> program from assignment 2 unaltered, with one exception: you are allowed to change the accessibility of the <code>Sudoku</code> class' methods and fields that are <code>private</code> to <code>protected</code> if you want. All this does is allow subclasses of <code>Sudoku</code> (like <code>SudokuPlay</code>) to use these methods and fields directly. (If they are <code>private</code>, they can only be used inside the <code>Sudoku</code> class.) You may or may not have defined <code>private</code> methods in <code>Sudoku.java</code>, but fields in classes are normally marked <code>private</code> unless there is a good reason for them not to be.</p> <p>Note</p> <p>Only make this change if you need to, and where you need to. Don't just blindly change all the access specifiers from <code>private</code> to <code>protected</code>. You may decide not to make this change at all, which is totally fine as long as the code works correctly.</p>"},{"location":"assignments/3/sudoku_play/#template-code","title":"Template code","text":"<p>As usual, the template code for the assignment is called <code>lab3.zip</code>. In it, we are supplying you with a template file called <code>SudokuPlay.java</code>. This contains the definitions of some classes and \"stubs\" (placeholder implementations) for methods you need to write. We've written <code>// TODO</code> comments where you need to add code (and you should remove these comments when you do). You can also add extra methods as you see fit.</p> <p>For testing purposes, you should re-use the sample boards in the <code>boards</code> directory from the previous assignment.</p>"},{"location":"assignments/3/sudoku_play/#exception-handling","title":"Exception handling","text":"<p>The template code defines one new Sudoku-specific exception class, which is a subclass of <code>SudokuException</code> from <code>Sudoku.java</code>:</p> <ul> <li> <p><code>SudokuInvalidMoveException</code></p> <p>This exception is thrown when an invalid move is input.</p> </li> </ul> <p>The exception classes used in last week's assignment are also used in this assignment; we'll point out where below.</p>"},{"location":"assignments/3/sudoku_play/#the-move-class","title":"The <code>Move</code> class","text":"<p>We have included a simple class called <code>Move</code> which is used to represent moves in a Sudoku game: one instance of <code>Move</code> represents a single (row, column, number) move. This class is basically just boilerplate1, so there isn't much point in making you implement it yourselves.</p> <p>The only subtlety of the <code>Move</code> class is that moves are represented internally in 0-indexed form but externally (e.g. when constructed or printed) in 1-indexed form. \"0-indexing\" means that the first location in e.g. a row is location 0, while 1-indexing would have it as location 1. This is done because interacting with the Sudoku board representation is more natural with 0-indexing (because this is how we interact with arrays in Java) but interacting with human players is more natural with 1-indexing.</p> <p>You might wonder why <code>Move</code> wasn't made into a separate file i.e. <code>Move.java</code>. We could have done this (and it wouldn't be wrong) but since it's only going to be used inside the <code>SudokuPlay.java</code> file it seemed simpler to just leave it in the file.</p>"},{"location":"assignments/3/sudoku_play/#the-sudokuplay-class","title":"The <code>SudokuPlay</code> class","text":"<p>The rest of the program consists of the <code>SudokuPlay</code> class. This class inherits from the <code>Sudoku</code> class you defined in last week's assignment. Java programs indicate inheritance using the <code>extends</code> keyword, so we have:</p> <pre><code>public class SudokuPlay extends Sudoku {\n// ...\n}\n</code></pre> <p>We say that <code>SudokuPlay</code> is a subclass of <code>Sudoku</code>, and <code>Sudoku</code> is the superclass of <code>SudokuPlay</code>. What this means, in effect, is that instances of <code>SudokuPlay</code> can do everything that <code>Sudoku</code> instances can do, and other things too.</p> <p>Note</p> <p>Making <code>SudokuPlay</code> a subclass of <code>Sudoku</code> is a design decision. Like many design decisions, there are different possibilities and different tradeoffs.</p> <p>A different design would have been to not make <code>SudokuPlay</code> a subclass of <code>Sudoku</code>, but instead to have it contain an instance of the <code>Sudoku</code> class as a field. This is known as \"composition\" of classes. Many books have been written about different design patterns in Java, and the topic of whether inheritance or composition is better is discussed extensively in these books. Usually it depends on the specific circumstances.</p> <p>Our purpose here is not to argue that this is the best possible design of the <code>SudokuPlay</code> class, but to give you some experience working with inheritance. Understanding when to use inheritance (and when not to) only comes with a lot of experience.</p>"},{"location":"assignments/3/sudoku_play/#fields-to-define","title":"Fields to define","text":"<p>We won't tell you what fields to define in the <code>SudokuPlay</code> class; define whichever fields work best for you.  We do ask:</p> <ul> <li> <p>that you not redefine fields that are already in the <code>Sudoku</code> class,   since <code>SudokuPlay</code> extends <code>Sudoku</code>   (i.e. is a subclass of <code>Sudoku</code>,   which means that any fields of <code>Sudoku</code> are also fields of <code>SudokuPlay</code>);</p> </li> <li> <p>that you not add any new fields to the <code>Sudoku</code> class.</p> </li> </ul> <p>However (as mentioned above) you are allowed to change the access of <code>Sudoku</code> class fields from <code>private</code> to <code>protected</code> if you need to (and only if you need to).</p> <p>Make all the fields of <code>SudokuPlay</code> itself that you define <code>private</code>.</p>"},{"location":"assignments/3/sudoku_play/#methods-to-define","title":"Methods to define","text":"<ul> <li> <p><code>public static void main(String[] args)</code></p> <p>This method should:</p> <ul> <li> <p>Check that the program received only one command-line argument   (a filename) and if not, print a usage message (see below).</p> </li> <li> <p>Create a new <code>SudokuPlay</code> instance.</p> </li> <li> <p>Load the board filename (the command-line argument).</p> </li> <li> <p>Start playing the game by calling the <code>play</code> method.</p> </li> <li> <p>Handle whatever exceptions it needs to handle,   and only those exceptions.   (So don't just catch <code>Exception</code>   if you can catch more specific exceptions instead.)</p> </li> </ul> </li> <li> <p><code>usage</code></p> <p>This method prints a usage message and exits. It's supplied to you in the template code. You should call it when the number of arguments to <code>main</code> are incorrect.</p> </li> <li> <p><code>SudokuPlay</code></p> <p>This method calls the superclass constructor (the <code>super()</code> call) and initializes the fields of the <code>SudokuPlay</code> object.</p> </li> <li> <p><code>printBoard</code></p> <p>This method overrides the <code>printBoard</code> method of the <code>Sudoku</code> class.  It prints the board in a \"pretty\" way, so that it's easy to see the row/column coordinates of cells in the board (in 1-based coordinates).  Calling this method prints out the board looking like this:</p> <pre><code>   123 456 789\n  +---+---+---+\n1 |...|...|...|\n2 |...|.1.|.92|\n3 |.86|...|.4.|\n  +---+---+---+\n4 |..1|56.|...|\n5 |...|..3|62.|\n6 |...|...|5.7|\n  +---+---+---+\n7 |.3.|...|.8.|\n8 |.9.|8.2|...|\n9 |..7|..4|3..|\n  +---+---+---+\n</code></pre> <p>(This is <code>boards/board1</code>.)</p> <p>Note the 1-based coordinates of the rows (on the side) and columns (on top).</p> <p>Note</p> <p>Try to write this code in a reasonably concise way. If you write a brute-force implementation with a single <code>println</code> call which goes on for e.g. 50 lines or more we will take marks off. You might consider writing some private helper methods.</p> </li> <li> <p><code>place</code></p> <p>This method takes one argument (a <code>Move</code> as described above, containing a row and column location, and a number to write into that location) and attempts to make the move on the board. It can fail if the cell is already filled, or if there is a row, column or box conflict. In that case, the method will throw a <code>SudokuInvalidMoveException</code> with a good error message. If the move is valid, it will make the move and save it (to allow undoing the move later).</p> <p>Remember that <code>Move</code> objects store the move row/column coordinates in 0-indexed form, but your error messages report errors using 1-indexed row/column coordinates.</p> <p>Hopefully, you have methods in your <code>Sudoku</code> class that can help with the implementation of this method.</p> </li> <li> <p><code>isSolved</code></p> <p>This method tests to see if a board is solved by checking if all cells are filled with numbers. The <code>play</code> method below will validate any such solution, so this method doesn't have to do that. (Also, illegal moves aren't allowed, so if the board is full it should be a valid solution.) It returns a boolean (<code>true</code> if solved, otherwise <code>false</code>).</p> </li> <li> <p><code>isSolvable</code></p> <p>This method tests if the board is solvable without changing the state of the board. One way to do this is to make a copy of the board representation, try to solve the board using the <code>solveBoard</code> method of the <code>Sudoku</code> class, and then restoring the original board state.</p> <p>Note</p> <p>This is one situation where having direct access to the internal state of the board from the <code>Sudoku</code> class is really useful!</p> </li> <li> <p><code>undo</code></p> <p>This undoes the last move, returning the board to the state before the last move. If there have been no moves, it does nothing but print <code>\"no moves to undo!\"</code>.</p> <p>Note that for this to work correctly, you either have to store the board state after each move, or store the moves themselves. It's much more efficient to store the moves, so please do that.</p> </li> <li> <p><code>hint</code></p> <p>This method supplies a \"hint\" move given the current board state. It does this by checking each empty cell of the board to see if only one possible number could go there. This shouldn't involve any heavy computation; if a candidate number doesn't have a row, column or box conflict, we say that that number can go in that cell. For a particular cell, if only one of the 9 numbers can go there, that's a valid hint. There can be multiple possible hints; collect all of them and pick one of them at random.</p> <p>Note</p> <p>This is another case where there should be a method or methods in your <code>Sudoku</code> class that will be very useful to you when writing this method.</p> <p>Note that you will need to have a random number generator to pick a random hint; don't just pick e.g. the first one or you will lose marks! The Java <code>Random</code> class is the easiest way to get a random number generator. Also, only create one random number generator per program; don't create a new one every time this method is called. (Hint: Don't create the random number generator in this method.)</p> <p>If there are no hints, return the <code>null</code> value. <code>null</code> can substitute for any object, and is used when there is no move to return.2</p> </li> <li> <p><code>printCommands</code></p> <p>This method's implementation is supplied to you in the template code. It prints a list of all the commands and what they mean to the terminal.</p> </li> <li> <p><code>play</code></p> <p>See the next section.</p> </li> </ul>"},{"location":"assignments/3/sudoku_play/#user-interface-the-play-method","title":"User interface: the <code>play</code> method","text":"<p>The <code>SudokuPlay</code> class' <code>play</code> method is special: it constitutes the user interface for the entire program. It's basically a command-line interface; it presents you with a terminal prompt, you type in a command, it does what you asked, and the cycle repeats until you either quit or the puzzle is solved.</p> <p>We've supplied you with a partial implementation of this method. The implementation handles reading the terminal (called <code>System.in</code> in Java), starting the interaction loop, checking if the board is solved, reading a line of input from the user, and breaking it up into an array of strings called <code>words</code>. The implementation also contains a <code>try</code>/<code>catch</code> statement with multiple <code>catch</code> blocks; you shouldn't have to add any more (unless we've forgotten something!).</p> <p>What you do have to add to the method (in the spot marked by the <code>// TODO</code> comments) is the code to execute the commands. After that, you should print the board and the number of moves that have been played up to that point.</p> <p>Note</p> <p>The number of moves must be correct, even after undoing moves. Undoing a move decreases the move count (the undo itself doesn't count as a move).</p> <p>Also, for some commands (like saving a board to a file) the board state doesn't change, so don't print the board in those cases. Hint: you may find the <code>continue</code> statement to be useful.</p> <p>There are two kinds of commands:</p> <ul> <li> <p>\"letter commands\",   so named because the name of the command is a single letter;</p> </li> <li> <p>a \"move command\",   which consists of three numbers between 1 and 9,   and which represents a move to make on the Sudoku board.   The first two numbers are the row and column coordinates   of an empty cell on the board   (using 1-based indexing, so the first row is row 1, not row 0),   and the last one is the number to write into that cell.</p> </li> </ul> <p>The code for the move command should come after the code for the letter commands for clarity, though there is no way that they can be confused with each other.  Basically, if the first word in the command is not one of the letters in the letter commands, it should be assumed to be a move command.  If it's not a valid move command, throw the <code>SudokuInvalidMoveException</code> exception.</p> <p>Warning</p> <p>When checking for a letter command, please use the <code>equals</code> method on strings; do not use the <code>==</code> operator, because that only checks if two strings are identical. (This is an incredibly easy mistake to make.)3</p> <p>Here are the commands that can be entered at the prompt:</p> Command Meaning <code>?</code> print a list of all the commands <code>a [on/off]</code> set (a)uto-check on or off <code>f</code> (f)inish solving <code>h</code> give a (h)int <code>q</code> (q)uit the program <code>r filename</code> (r)estore (load) the board state from the file <code>filename</code> <code>s filename</code> (s)ave the board state to the file <code>filename</code> <code>u</code> (u)ndo the last move <code>v</code> check if the board is sol(v)able <code>n1 n2 n3</code> place number <code>n3</code> at location <code>(n1, n2)</code> <p>For the last command, <code>n1</code> is the row number (1-indexed) and <code>n2</code> is the column number. All three numbers are integers in the range 1 to 9.</p> <p>Clearly, the code for many of these commands will just call a method; <code>?</code> calls the <code>printCommands</code> method, <code>h</code> calls the <code>hint</code> method, <code>u</code> calls the <code>undo</code> method, <code>r</code> and <code>s</code> calls the load and save methods in the <code>Sudoku</code> class, etc.</p> <p>Note</p> <p>We don't want you to implement real functionality in the <code>play</code> method! If a particular command's code is complicated, make that code into a separate method and call it from <code>play</code>.</p> <p>Tip</p> <p>Some programmers think that you should only make code into a method if it gets called in more than one place. While that is a good reason for making a method, sometimes it's also good to make a chunk of code into a method even if it is only called in one place, as long as that makes the overall code easier to understand.</p> <p>Also, do not duplicate functionality that is already in the <code>Sudoku</code> class! For instance, the commands to check if a board can be solved can call the <code>solveBoard</code> method in the <code>Sudoku</code> class, but don't copy that method to this class. (You don't need to, since it's already available.)</p> <p>Some notes about the commands:</p> <ul> <li> <p>The <code>?</code> (list commands) command doesn't need to print the board,   and shouldn't.</p> </li> <li> <p>The <code>a</code> (autocheck) command   will only accept the commands <code>a off</code> and <code>a on</code>.   If invoked correctly, it will print a message e.g. <code>\"autocheck ON\"</code>.   If invoked incorrectly, it will print an error message and continue.   It doesn't need to print the board.</p> </li> <li> <p>The <code>f</code> (finish solving) command will warn if the board is unsolvable,   but will not change the state of the board in that case.   If it can solve the board,   it will of course change the board state to the solved state.</p> </li> <li> <p>The <code>h</code> (hint) command will make the hint move   if one is returned from the <code>hint</code> method.   If there is no hint move, it will print <code>\"Sorry, no hints available.\"</code>.</p> </li> <li> <p>The <code>r</code> and <code>s</code> commands will print an error message   if there isn't exactly one filename argument   e.g. <code>r boardX</code> or <code>s boardX</code> are ok but <code>r</code> or <code>s</code> by themselves are not.</p> </li> <li> <p>The <code>v</code> (check if solvable) command   will print whether the board is solvable or not,   but it doesn't have to print the board.</p> </li> <li> <p>The move command, after the move has been made,   needs to check if the board is solvable if auto-checking is on.</p> </li> <li> <p>Extra unused arguments for any command are not allowed,   and if they occur, an error message should be printed.</p> </li> </ul> <p>The <code>play</code> method is not particularly hard to write, but getting everything working well is a bit tedious because of all the little details.4 For one thing, you'll want to print the board after some commands but not after others. Use your judgment, but solving a puzzle with your program should feel natural, and try not to repeat code or make the code convoluted.</p>"},{"location":"assignments/3/sudoku_play/#incremental-development","title":"Incremental development","text":"<p>You can write this program any way you like, but here is our suggested sequence for incremental development.</p> <ol> <li> <p>Start by writing the <code>SudokuPlay</code> constructor and the <code>printBoard</code> method.    In <code>main</code>, load a board from the first command-line argument    and print it using <code>printBoard</code>.</p> </li> <li> <p>Then extend <code>main</code> to check that there is only one command-line argument,    and to print a usage message and exit if not.</p> </li> <li> <p>Change <code>main</code> so it calls <code>play</code> after loading the board    instead of just printing the board.    In <code>play</code>, add the <code>q</code> command for quitting the game.    Also write the <code>isSolved</code> method, which is called from <code>play</code>.</p> </li> <li> <p>In <code>play</code>, add the ability to read moves (row, column, number).    You might want to define a helper function for this.    (We called ours <code>getMove</code> and it took the words array as its only argument.)    Note that you only check for moves    after all the letter commands have been checked;    a move command is the default if no letter command was chosen.5</p> </li> <li> <p>In <code>play</code>, add the <code>?</code> command to print the list of commands.</p> </li> <li> <p>Implement the <code>undo</code> method.    In <code>play</code>, add the <code>u</code> command to undo the last move.</p> </li> <li> <p>In <code>play</code>, add the <code>v</code> command    to check if the board is solvable from the current state.</p> </li> <li> <p>In <code>play</code>, add the <code>f</code> command    to solve the board from the current state if possible.</p> </li> <li> <p>In <code>play</code>, add the <code>s</code> and <code>r</code> commands    to (s)ave and (r)estore a board state to/from a file.    You'll need to check the <code>words</code> array for the filename, which is required.</p> </li> <li> <p>In <code>play</code>, add the <code>a</code> command to turn auto-checking on or off.    You'll need to check the <code>words</code> array for additional words,    since you need to specify <code>on</code> or <code>off</code> as arguments to the <code>a</code> command    (no other words are accepted).</p> </li> <li> <p>Implement the <code>hint</code> method.    In <code>play</code>, add the <code>h</code> command to give a hint.</p> </li> </ol> <p>At this point, the program is complete!</p>"},{"location":"assignments/3/sudoku_play/#testing","title":"Testing","text":"<p>Use the <code>boards</code> directory you used for testing in the previous assignment. Test your program on some or all of the boards. Most importantly, try all of the commands given above. Enter invalid input to try to \"break\" the commands. If something makes the program crash, you still have work to do!</p>"},{"location":"assignments/3/sudoku_play/#what-to-hand-in","title":"What to hand in","text":"<p>Please submit your completed <code>SudokuPlay.java</code> file to CodePost as <code>Assignment 3</code>. Also submit your (possibly modified) <code>Sudoku.java</code> file.</p> <ol> <li> <p>\"Boilerplate\" means obvious code that anyone can write without thinking but which is still necessary. Compared to many languages, Java tends to have a large amount of boilerplate.\u00a0\u21a9</p> </li> <li> <p>The existence of <code>null</code> is actually very controversial, and many other languages (e.g. Rust and OCaml) don't allow you to substitute <code>null</code>-like values for objects.\u00a0\u21a9</p> </li> <li> <p>Which is another way of saying that we've done it numerous times while developing these assignments.\u00a0\u21a9</p> </li> <li> <p>User interface code is typically like this, which is why many programmers dislike writing it.\u00a0\u21a9</p> </li> <li> <p>We could easily have made moves into a letter command e.g. <code>m 1 2 3</code> could mean \"make a move by placing the number 3 at row 1 and column 2\". We chose not to because move commands are the most common command, so they should require as little typing as possible.\u00a0\u21a9</p> </li> </ol>"},{"location":"assignments/4/graphics/","title":"Background: Java Graphics","text":"<p>Computer graphics is a rich and complex field. We will only be scratching the surface of it in this (and subsequent) assignments. Graphics is also a great source of programming ideas; for instance, one of the main drivers for the development of object-oriented programming was to help write code for graphical user interfaces.</p> <p>Compared to other languages, Java is (for the most part) a very convenient and effective language in which to use graphics. On the other hand, there are a lot of options, and using graphics in Java can be more manual than using e.g. Python with something like <code>tkinter</code>. However, the results will usually be better, and certainly much faster.</p>"},{"location":"assignments/4/graphics/#awt-and-swing","title":"AWT and Swing","text":"<p>Java's graphics libraries have evolved over the years of Java's existence, and continue to do so. These libraries are grouped into several distinct collections.</p> <p>The first group of libraries are the \"AWT\" libraries. AWT stands for Abstract Windowing Toolkit. AWT is the original set of Java graphics libraries, and implement most of the basic GUI (graphical user interface) functionality that is needed for applications. AWT objects are implemented using native graphical \"widgets\", so that AWT applications look \"natural\" on any operating system. This also means that there can be slight differences in functionality on different operating systems, though AWT tries to make these as small as possible.</p> <p>The Swing libraries are a later development. These are implemented in pure Java and are supposed to work identically on all operating systems. Swing has historically been slower than AWT, but with better compilation techniques, this is not likely to be an issue in practice any more.</p> <p>There are also newer Java graphics libraries, notably JavaFX. JavaFX is a good choice for programmers doing real application development, but it's overkill for our purposes, so we will restrict ourselves to AWT and Swing for the graphics programs in this course.</p>"},{"location":"assignments/4/graphics/#some-classes-well-use","title":"Some classes we'll use","text":"<p>See the Java API for more details about all of these classes. However, you probably won't need to do this much, since following the examples given in the sample files should be enough to complete most of the assignments.</p>"},{"location":"assignments/4/graphics/#graphics2d","title":"<code>Graphics2D</code>","text":"<p>The documentation for this class is here. This is an AWT class.</p> <p>This class represents the \"graphics context\" of an application. This includes things like the color, the line width, etc. Also, drawing on a graphical surface is done via the <code>Graphics2D</code> context.</p>"},{"location":"assignments/4/graphics/#color","title":"<code>Color</code>","text":"<p>The documentation for this class is here. This is an AWT class.</p> <p>This class represents colors in various ways. The most usual way to use it is using the RGB (red, green, blue) system. The most common way to specify RGB colors is using a one-byte positive integer for each color (i.e. a number between 0 and 255). Alternatively, a small number of colors are predefined constants e.g. <code>Color.BLACK</code> and <code>Color.RED</code>.</p>"},{"location":"assignments/4/graphics/#basicstroke","title":"<code>BasicStroke</code>","text":"<p>The documentation for this class is here. This is an AWT class.</p> <p>This class defines attributes of lines; for instance, a <code>BasicStroke</code> object can be constructed with a particular line width. This object could be passed to the <code>setStroke</code> method of a <code>Graphics2D</code> object to set the parameters of lines that are subsequently drawn using that graphics context.</p>"},{"location":"assignments/4/graphics/#line2d","title":"<code>Line2D</code>","text":"<p>The documentation for this class is here. This is an AWT class.</p> <p>This class represents line segments on a 2D surface. The <code>Line2D.Double()</code> constructor creates a line from the (x, y) coordinates (where each coordinate is specified as a <code>double</code>) at either end of the line segment.</p>"},{"location":"assignments/4/graphics/#rectangle2d","title":"<code>Rectangle2D</code>","text":"<p>The documentation for this class is here. This is an AWT class.</p> <p>This class represents rectangles on a 2D surface. The <code>Rectangle2D.Double()</code> constructor creates a rectangle given the following <code>double</code> values:</p> <ul> <li>the X and Y coordinates of the upper left-hand corner of the rectangle</li> <li>the width and height of the rectangle</li> </ul>"},{"location":"assignments/4/graphics/#jframe","title":"<code>JFrame</code>","text":"<p>The documentation for this class is here. This is a Swing class.</p> <p>This class is a container class that represents a window on the screen. It has its own attributes (width, height, title) and can also contain other graphics objects (like the <code>TurtleCanvas</code> described later).</p>"},{"location":"assignments/4/graphics/#jcomponent","title":"<code>JComponent</code>","text":"<p>The documentation for this class is here. This is a Swing class.</p> <p>This class provides a drawing surface that allows us to (among other things) draw lines on the screen.</p>"},{"location":"assignments/4/intro/","title":"Project: Turtle graphics","text":"<p>For this program, we will write a turtle graphics library in Java and use it to draw an interesting recursive figure called the Sierpinski triangle.</p>"},{"location":"assignments/4/intro/#learning-objectives","title":"Learning objectives","text":"<ul> <li>Learn to work with multi-class projects</li> <li>Start to familiarize ourselves with Java's graphics libraries</li> <li>Learn to write a reusable \"library\"</li> <li>Learn to use recursion to create fractal drawings</li> </ul>"},{"location":"assignments/4/intro/#template-code","title":"Template code","text":"<p>As usual, the template code for this assignment is available in the course Canvas site as the file <code>lab4.zip</code>.</p>"},{"location":"assignments/4/intro/#what-to-hand-in","title":"What to hand in","text":"<p>Please submit these files to CodePost as <code>Assignment 4</code>:</p> <ul> <li><code>TurtleCanvas.java</code></li> <li><code>Sierpinski.java</code></li> </ul>"},{"location":"assignments/4/overview/","title":"Assignment 4: Turtle Graphics","text":"<p>In this assignment, we'll start to learn about Java graphics, and also get to practice recursion by creating fractal images.</p>"},{"location":"assignments/4/overview/#due-date","title":"Due date","text":"<p>This assignment is due on Monday, November 6th at 2 AM.</p>"},{"location":"assignments/4/sierpinski/","title":"Drawing Sierpinski triangles","text":"<p>Now that you've written the code to implement the turtle graphics canvas, it's time to do something interesting with it! We are going to be drawing a well-known fractal shape called the Sierpinski triangle. Conceptually, it's a triangle with smaller triangles drawn inside it, and even smaller triangles drawn inside those triangles, ad infinitum. Of course, we can't draw triangles to infinite depth due to both computational and display limitations, but if we go enough levels deep, you wouldn't be able to distinguish the resulting images from a \"real\" Sierpinski triangle (whatever that is).</p> <p>A good reference on Sierpinski triangles is this Wikipedia page. We will give you an algorithm for computing Sierpinski triangles below, so you won't need to consult the page for that.</p>"},{"location":"assignments/4/sierpinski/#what-they-look-like","title":"What they look like","text":"<p>We will now present a gallery of images of the Sierpinski triangle at various \"depths\" of recursion. Smaller numbers mean that we stopped the recursive process earlier, while larger numbers mean that the recursive process ran on longer. Later drawings contain earlier drawings, but have more triangles filled in.</p> <p>Note that there is one red line per image; this is the last line that was drawn.</p> <p>Note</p> <p>It's not necessary for your program to have this line in the same location as our drawings do.</p>"},{"location":"assignments/4/sierpinski/#depth-0","title":"Depth 0","text":""},{"location":"assignments/4/sierpinski/#depth-1","title":"Depth 1","text":""},{"location":"assignments/4/sierpinski/#depth-2","title":"Depth 2","text":""},{"location":"assignments/4/sierpinski/#depth-3","title":"Depth 3","text":""},{"location":"assignments/4/sierpinski/#depth-4","title":"Depth 4","text":""},{"location":"assignments/4/sierpinski/#depth-7","title":"Depth 7","text":"<p>At this point, the Sierpinski triangle is basically complete from a visual standpoint. Notice the self-similarity of the image, where there are three smaller copies of the entire image embedded inside the image. This is what makes it a fractal.</p>"},{"location":"assignments/4/sierpinski/#how-to-generate-them","title":"How to generate them","text":"<p>There are undoubtedly many ways of generating Sierpinski triangles to any given (non-negative) depth. We will present a simple algorithm here, which we would like you to follow. The main reason we want you to follow our algorithm is to reduce frustration; making fractal drawings is awesome when the output is what you want it to be, but it can be extremely frustrating when it's a little bit wrong, especially since \"a little bit wrong\" at one level usually translates into \"a giant mess\" at a deeper level. (Also, we will be more able to help you debug your code if you follow our algorithm.)</p> <p>We will assume that you have written the following methods:</p> <ul> <li> <p><code>triangleUp</code>: this takes a single argument (the side length of a triangle) and draws an upward-pointing triangle.</p> </li> <li> <p><code>triangleDown</code>: this takes a single argument (the side length of a triangle) and draws a downward-pointing triangle.</p> </li> </ul> <p>Both of these methods are only a few lines of code when using your turtle graphics canvas.</p> <p>Here is pseudocode for the algorithm to draw a Sierpinski triangle to depth <code>n</code>.</p> <ol> <li> <p>Draw an upward-pointing triangle using <code>triangleUp</code> that surrounds the entire Sierpinski triangle. This is the only upward-pointing triangle you will draw! All the rest will be downward-pointing triangles. (Look at the above images to convince yourself that this is reasonable.)</p> </li> <li> <p>If the depth <code>n</code> is zero, you are done!  Otherwise, do the following steps:</p> <ol> <li> <p>Draw a downward-facing triangle in the center of the drawing area so that it touches the edges of the surrounding triangle. We'll call this triangle the \"core triangle\" for this level.</p> </li> <li> <p>Decrease the triangle size by a factor of 2. Subtract 1 from the level.</p> </li> <li> <p>Now you have to repeat the entire drawing (not including the initial upward-facing triangle) in three places: in the triangular area above the core triangle, in the triangular area to its left, and in the triangular area to its right. (These are three recursive steps.) In each case, you first have to lift the turtle pen up, move to the correct place to start drawing, put the pen down, and do the drawing.</p> </li> </ol> </li> </ol> <p>You should expect to do a bit of trial and error to get this right, but the working code is not long or convoluted. (Our solution for the recursive function is about 40 lines of code.)</p>"},{"location":"assignments/4/sierpinski/#template-code","title":"Template code","text":"<p>We are supplying you with a template file for this section called <code>Sierpinski.java</code>. This contains the definitions of the <code>Sierpinski</code> class and stubs or partial implementations for methods you need to write. We've written <code>// TODO</code> comments where you need to add code (and you should remove these comments when you do). You can also add extra methods as you see fit.</p>"},{"location":"assignments/4/sierpinski/#methods-to-write","title":"Methods to write","text":"<p>The methods you need to write or complete are:</p> <ul> <li> <p>the <code>Sierpinski</code> constructor</p> </li> <li> <p>the <code>triangleUp</code> and <code>triangleDown</code> methods, both of which are very short</p> </li> <li> <p>the <code>drawInternals</code> method, which implements the recursive part of the drawing algorithm described above.</p> </li> </ul> <p>In the <code>Sierpinski</code> constructor, you need to create the turtle canvas, set the background color (any color that makes it easy to see the lines is OK), draw the bounding upward-pointing triangle, and call the <code>drawInternals</code> method to finish the drawing.</p>"},{"location":"assignments/4/turtle_canvas/","title":"The Turtle graphics canvas","text":""},{"location":"assignments/4/turtle_canvas/#about-turtle-graphics","title":"About turtle graphics","text":"<p>Computer graphics in its most general sense is quite complicated, so efforts have been made over the years to simplify it to allow less sophisticated users1 to make interesting images. One of these approaches is called turtle graphics. The idea is that you are presented with a two-dimensional drawing surface, upon which an icon called a \"turtle\" is present. This could be an image of a turtle, or anything else e.g. just a point, an arrow, etc. Ideally the turtle icon will have an orientation showing which way is \"forward\" from the perspective of the turtle. The idea is that the turtle holds a \"pen\" which can be in the up or down position. If it's up, when the turtle moves, nothing is drawn. If it's down, when the turtle moves a line is drawn which traces out the movement of the turtle. There are commands to move the pen to the up or down position, to move the turtle forward or to a particular absolute location, and to rotate the turtle by some number of degrees. With just these commands, very complex designs can be made, as we'll see.</p> <p>Turtle graphics was made famous in the Logo programming language in the late 1960s. This was a language designed to teach programming concepts to children, and it included built-in support for turtle graphics.</p> <p>The objective of this section is to write a Java \"library\" that allows us to do turtle graphics easily. One limitation is that our library won't have a turtle icon, but we can still manage to make interesting drawings.</p> <p>Note</p> <p>The term \"library\" is almost never given a formal definition in any programming language, but it is used informally to refer to some body of code that contains functionality that can be used outside of the library.  More formal terms like \"classes\", \"packages\" and \"modules\" are given more precise meanings in programming languages.</p> <p>In this case, our \"library\" will be the classes contained in a single Java file.</p>"},{"location":"assignments/4/turtle_canvas/#template-code","title":"Template code","text":"<p>We are supplying you with a template file for this section called <code>TurtleCanvas.java</code>. This contains the definitions of the <code>TurtleCanvas</code> and <code>Line</code> classes and stubs or partial implementations for methods you need to write. We've written <code>// TODO</code> comments where you need to add code (and you should remove these comments when you do). You can also add extra methods as you see fit.</p> <p>We are also supplying you with a file called <code>TurtleDemo.java</code>. This file will use the turtle graphics code in <code>TurtleCanvas.java</code> to make a simple drawing. After you've written your <code>TurtleCanvas.java</code> file, you can test it by compiling <code>TurtleDemo.java</code> and running it.</p> <p>Finally, to help you get started, we're supplying a file called <code>TestCanvas.java</code>. This file will put up a window on the screen and draw some lines on it. You can adapt the code in this file to help you write your <code>TurtleCanvas</code> code.</p>"},{"location":"assignments/4/turtle_canvas/#the-line-class","title":"The <code>Line</code> class","text":"<p>We've provided the implementation of a trivial class called <code>Line</code> which represents a line segment in 2D space. It's basically just two (x, y) pairs of <code>double</code>s, representing the two points which are the endpoints of a line. The definition is interesting:</p> <pre><code>record Line (double x1, double y1, double x2, double y2) {}\n</code></pre> <p>This is the entire definition. It uses a comparatively new Java feature called record classes. These are just a shorthand way of writing classes that contain several immutable fields, all of which are set from values in the constructor. To create a new <code>Line</code>, do this:</p> <pre><code>// Assume that doubles x1, y1, x2 and y2 have been defined.\nLine myLine = new Line(x1, y1, x2, y2);\n</code></pre> <p>You can access (but not change!) the components of a record like this:</p> <pre><code>double x1 = myLine.x1();\ndouble y1 = myLine.y1();\ndouble x2 = myLine.x2();\ndouble y2 = myLine.y2();\n</code></pre> <p>Records are not essential, but they are nice because they dramatically reduce the boilerplate code needed for very simple classes. Also, you can add methods to record classes like you would to a normal class, and even add a constructor. In our case, we will use the default constructor, which just sets the field values based on the input arguments.</p> <p><code>Line</code>s will be useful to use because our drawings will be a set of lines.</p>"},{"location":"assignments/4/turtle_canvas/#the-turtlecanvas-class","title":"The <code>TurtleCanvas</code> class","text":"<p>This class represents a drawable canvas which is displayed in a separate window. There are methods to do all the standard turtle graphics operations, which are described in the next section.</p> <p>The <code>TurtleCanvas</code> class extends the <code>JComponent</code> class described in the previous section.</p> <p>One peculiarity of this turtle canvas implementation is that the last line drawn should be in a different color from the rest of the lines; we call this the \"highlight color\". This is done partially as a debugging aid.</p>"},{"location":"assignments/4/turtle_canvas/#fields","title":"Fields","text":"<p>We will allow you to define whichever fields you consider necessary for the <code>TurtleCanvas</code> class. Note that you will have to at a minimum keep track of the position and orientation of the \"turtle\" on the canvas. The position is where the turtle is located, and the orientation is the direction of movement when the turtle moves forward. You do not need to represent the turtle as an icon (or even as something visible).</p> <p>You will also need to have a field to store lines that are part of the image; these lines will be drawn by special methods described below.</p>"},{"location":"assignments/4/turtle_canvas/#methods","title":"Methods","text":""},{"location":"assignments/4/turtle_canvas/#the-turtlecanvas-constructor","title":"The <code>TurtleCanvas</code> constructor","text":"<p>This constructor has as arguments the window width and height (in pixels) and sets up the fields of the <code>TurtleCanvas</code> object.</p>"},{"location":"assignments/4/turtle_canvas/#drawline","title":"<code>drawLine</code>","text":"<p>This method has as arguments a 2D graphics context (which is necessary in order to draw anything) and a <code>Line</code> object. It draws the line on the screen using the coordinates in the <code>Line</code> object.</p> <p>Note</p> <p>This is the only method in the class that should do any actual drawing of lines. Other methods that \"draw\" lines actually just create and store lines that will eventually be drawn by this method, or they work by calling this method.</p>"},{"location":"assignments/4/turtle_canvas/#forward","title":"<code>forward</code>","text":"<p>This moves the \"turtle\" forward by a given distance. Note that you have to take into account the position and orientation of the turtle. If the pen is up, you won't actually draw a line, but you will have to move the turtle to the final point. If the pen is down, you have to draw a line from the starting point to the end point.</p> <p>Note that for this method \"drawing a line\" doesn't actually mean drawing a line; it means creating a <code>Line</code> object and storing it in the object so it can be drawn later.</p>"},{"location":"assignments/4/turtle_canvas/#rotate","title":"<code>rotate</code>","text":"<p>This method rotates the orientation of the turtle by a given number of degrees. (If you are storing the orientation in radians, you'll have to do the appropriate conversions.)</p> <p>Note that the positive rotation direction is counterclockwise, so a rotation of 90 degrees will change the orientation from e.g. \"going to the right\" to \"going up\".</p>"},{"location":"assignments/4/turtle_canvas/#clearlines","title":"<code>clearLines</code>","text":"<p>This method clears the list of lines stored in the object. (We won't actually need this method for this assignment, but it might be useful for other programs using the library.)</p>"},{"location":"assignments/4/turtle_canvas/#penup","title":"<code>penUp</code>","text":"<p>This sets the pen state to up i.e. not drawing.</p>"},{"location":"assignments/4/turtle_canvas/#pendown","title":"<code>penDown</code>","text":"<p>This sets the pen state to down i.e. drawing.</p>"},{"location":"assignments/4/turtle_canvas/#moveto","title":"<code>moveTo</code>","text":"<p>This moves the turtle to a specified point on the canvas without drawing.</p>"},{"location":"assignments/4/turtle_canvas/#setangle","title":"<code>setAngle</code>","text":"<p>This sets the absolute orientation of the turtle in terms of an angle from the horizontal axis, going counterclockwise. So <code>setAngle(135)</code> would set the orientation to 135 degrees from the positive X axis, which would be pointing diagonally to the upper left.</p>"},{"location":"assignments/4/turtle_canvas/#setbackground","title":"<code>setBackground</code>","text":"<p>This sets the background color of the canvas.</p>"},{"location":"assignments/4/turtle_canvas/#sethighlight","title":"<code>setHighlight</code>","text":"<p>This sets the highlight property of the canvas. If it is <code>true</code>, then the last line drawn will have a different color (in this case, red) than the rest of the lines. If <code>false</code>, all lines have the same color. Enabling highlighting is useful when debugging.</p>"},{"location":"assignments/4/turtle_canvas/#paintcomponent","title":"<code>paintComponent</code>","text":"<p>This method (which is <code>protected</code> because that was the access of the method in the superclass) is the master method which handles drawing everything on the canvas. It's basically a \"repaint\" method which is called whenever the canvas needs to be redrawn. An example of this is when the window is minimized and then maximized, or when part of the window is covered up by another window and then uncovered, etc.</p> <p>This method has to do these things:</p> <ul> <li>set the background color of the canvas</li> <li>reset the initial position and angle of the turtle</li> <li>draw all the lines that have been specified   by the turtle graphics commands (using the <code>drawLine</code> method)</li> </ul> <p>Note</p> <p>You could conceivably draw the lines directly in this method without using the <code>drawLine</code> method, but that would require duplicated code, so don't do that.</p> <p>You can use the sample code in <code>TestCanvas.java</code> as a model for this method.</p> <p>Also note that this method should use the color black for all lines, with the exception of the last line drawn, which should be red if the highlight property is <code>true</code>; if it's not, then it should also be black.</p> <p>Resetting the position and angle of the turtle is important because the job of <code>paintComponent</code> is to draw the entire drawing, not to add to an existing drawing.</p> <ol> <li> <p>That's not you. You're a sophisticated user  But turtle graphics is still interesting.\u00a0\u21a9</p> </li> </ol>"},{"location":"assignments/4/writing/","title":"Writing and testing the code","text":"<p>Like most Java programs, this program is very easy to compile and run.</p> <p>Put all the code into a directory called <code>turtle</code> (which is the name of the package). Then, from the directory above <code>turtle</code>, do this to compile the files:</p> <pre><code>$ javac turtle/*.java\n</code></pre> <p>To run a program (say, from <code>Sierpinski.java</code>), do this:</p> <pre><code>$ java turtle.Sierpinski 4\n</code></pre> <p>This program takes one command-line argument, which is an integer &gt;= 0. Try using different numbers. An invalid input should give rise to a usage message and exit the program.</p>"},{"location":"assignments/4/writing/#incremental-development","title":"Incremental development","text":"<p>At this point, you should have enough experience with incremental development to be able to figure out which parts of the code to develop first. Remember: there is no hard-and-fast rule for how to do this! Different programmers will do things differently, but try to write your code so you can test parts of it as soon as possible.</p>"},{"location":"assignments/4/writing/#testing","title":"Testing","text":"<p>First, compile and run the file <code>TurtleDemo.java</code> against your <code>TurtleCanvas.java</code> code and check that it works correctly. This program, when run, will draw a set of 10 squares, all anchored to a single point in the canvas, but the squares will spread out evenly around that point. Also, the canvas will initially be blank, but every time you click the left mouse button in the canvas, another line will be drawn until all 10 squares are visible. The most recently-drawn line will be in the highlight color (here, red) and the rest of the lines will be black.</p> <p>Tip</p> <p>Make sure that this works before starting work on the Sierpinski triangle code.</p> <p>Once this is working correctly, write the Sierpinski triangle code and compile the full program. Be aware that, unlike the <code>TurtleDemo.java</code> program, the Sierpinski program is non-interactive; it generates an image, displays it all at once, and leaves it up. (You can close the window to exit the program.)</p>"},{"location":"assignments/4/writing/#what-to-hand-in","title":"What to hand in","text":"<p>The files <code>TurtleCanvas.java</code> and <code>Sierpinski.java</code>.</p>"},{"location":"assignments/5/mandelbrot/","title":"Project: Mandelbrot set visualizer","text":""},{"location":"assignments/5/mandelbrot/#about-the-mandelbrot-set","title":"About the Mandelbrot set","text":"<p>Like the Sierpinski triangle from assignment 4, the Mandelbrot set is a fractal shape. It was discovered by the mathematician Benoit Mandelbrot, building on related sets called Julia sets. By \"fractal\", we mean that the shape is self-similar, so that magnifications of parts of the image of the shape resemble the full shape (though it isn't identical). We will be able to see this for ourselves once our visualizer is complete.</p> <p>The Mandelbrot set is a set, specifically a collection of points in a two-dimensional space. The two dimensional space is actually the complex plane, which is a way of representing the infinite set of complex numbers.</p> <p>Note</p> <p>If you haven't studied complex numbers yet, don't worry! You don't need to understand them to do this assignment. If you're curious, though, a complex number is a combination of a real number with another real number multiplied by the square root of -1 (which is usually called \\(i\\), which stands for \"imaginary\"). Since -1 has no real square root, the complex numbers are a superset of the real numbers. We write a general complex number as \\(x + yi\\), where \\(x\\) and \\(y\\) are real numbers; \\(x\\) is the \"real part\" and \\(y\\) is the \"imaginary part\" of the complex number. (A real number is thus a complex number with an imaginary part of zero.) We can also represent complex numbers as a point in a two-dimensional space, where \\(x\\) and \\(y\\) are the familiar Cartesian coordinates.</p> <p>Complex numbers are added and subtracted by adding/subtracting their real and imaginary parts separately. Complex numbers are multiplied using the normal laws of algebra with the simplification that \\(i^2\\) is -1. The magnitude of a complex number with real part \\(x\\) and imaginary part \\(y\\) is \\(\\sqrt{x^2 + y^2}\\).</p> <p>Complex numbers give rise to a huge variety of interesting mathematical applications, and you will undoubtedly encounter them again.</p> <p>To compute the Mandelbrot set, we need to have a way of determining for any complex number \\(x + iy\\) whether that number is in the set. We do this by calling this number \\(c\\) and computing the equation \\(z_{n+1} = z_n^2 + c\\) (where the \\(z_{n}\\)s are also complex numbers). Starting from \\(z_0 = 0\\), we iterate the equation repeatedly (computing \\(z_0\\), \\(z_1\\), \\(z_2\\), ...) and ask if its magnitude remains bounded or goes to infinity. If its magnitude remains bounded, the number \\(c\\) is in the set; if its magnitude goes to infinity, it isn't in the set.</p> <p>For instance:</p> <ul> <li> <p>If \\(c = 1\\), the sequence of \\(z\\) values is \\(0, 1, 2, 5, 26...\\) and it keeps on growing, so the magnitude goes to infinity. Therefore, the number \\(1\\) is not in the Mandelbrot set.</p> </li> <li> <p>If \\(c = -1\\), the sequence of \\(z\\) values is \\(0, -1, 0, -1, ...\\), from which we can see that the magnitude never goes beyond \\(1\\). Therefore, \\(-1\\) is in the Mandelbrot set.</p> </li> </ul> <p>Actually, the Mandelbrot set itself isn't that interesting to look at; if we made it into an image, it would just be a black-and-white image with e.g. black dots for all points that are in the set. To make the images more interesting, we will color-code each point based on how quickly each point goes to infinity (if it does). There are different ways to do this; a good description is given in this page. The basic idea is this:</p> <ol> <li> <p>We set a maximum number of iterations that we compute per point (to prevent the computation from going on forever).</p> </li> <li> <p>For each point, we continue iterating until the point reaches an escape threshold, which is a point whose magnitude is sufficiently large that it's clear that the magnitude will eventually go to infinity if the iteration is continued forever.</p> </li> <li> <p>Each point will be associated with the number of iterations until it reached the escape threshold, or the maximum number of iterations (if it never does).</p> </li> </ol> <p>Therefore, the Mandelbrot set computation consists in taking a bunch of points in the complex plane, and computing the iteration count for all of the points. Each iteration count can be associated with a specific color based on a color map. We take a grid of closely-spaced points in the complex plane, compute their iteration counts, convert each count to a color, and generate an image.</p>"},{"location":"assignments/5/mandelbrot/#some-images","title":"Some images","text":"<p>Here are some images of sections of the Mandelbrot set. All images are in a window 1200 pixels wide by 900 pixels high using an iteration count of 1024.</p> <p>Note</p> <p>For an incredible (and incredibly long!) video of the Mandelbrot set, zooming in continuously, see here.</p>"},{"location":"assignments/5/mandelbrot/#image-1","title":"Image 1","text":"<p>This represents the entire set.  The central brown area contains the points that are in the set.</p> <p>Parameters:</p> <ul> <li><code>xmin</code>: -2.5</li> <li><code>ymin</code>: -1.5</li> <li><code>xmax</code>:  1.5</li> <li><code>ymax</code>:  1.5</li> </ul> <p></p>"},{"location":"assignments/5/mandelbrot/#image-2","title":"Image 2","text":"<p>This is a good example of the complexity of the images you can find as you zoom in to interesting parts of the set.</p> <p>Parameters:</p> <ul> <li><code>xmin</code>: -0.749</li> <li><code>ymin</code>:  0.135</li> <li><code>xmax</code>: -0.747</li> <li><code>ymax</code>:  0.136</li> </ul> <p></p>"},{"location":"assignments/5/mandelbrot/#image-3","title":"Image 3","text":"<p>Parameters:</p> <ul> <li><code>xmin</code>: -0.977</li> <li><code>ymin</code>: -0.343</li> <li><code>xmax</code>: -0.817</li> <li><code>ymax</code>: -0.223</li> </ul> <p></p>"},{"location":"assignments/5/mandelbrot/#image-4","title":"Image 4","text":"<p>This image is zoomed in quite far to one end of the original image. Here you can see a distorted replica of the Mandelbrot set at the center of the image, showing that the set is indeed fractal (self-similar).</p> <p>Parameters:</p> <ul> <li><code>xmin</code>: -1.853</li> <li><code>ymin</code>: -0.08</li> <li><code>xmax</code>: -1.65</li> <li><code>ymax</code>:  0.072</li> </ul> <p></p> <p>Note</p> <p>If you enter these exact parameters into your program, don't be surprised if they don't look exactly the same. Fractal generation programs are exquisitely sensitive to things like roundoff error and slight differences in floating-point computations.</p>"},{"location":"assignments/5/mandelbrot/#compiling-and-running","title":"Compiling and running","text":"<p>Put all the code into a directory called <code>mandelbrot</code> (which is the name of the package). Then, from the directory above <code>mandelbrot</code>, do this to compile the files:</p> <pre><code>$ javac mandelbrot/*.java\n</code></pre> <p>To run the program, do this:</p> <pre><code>$ java mandelbrot.MandelbrotView &lt;args&gt;\n</code></pre> <p>where <code>&lt;args&gt;</code> are the required command-line arguments.  They are:</p> <ul> <li><code>width</code>  -- the width of the display window in pixels (must be &gt; 0)</li> <li><code>height</code> -- the height of the display window in pixels (must be &gt; 0)</li> <li><code>xmin</code>   -- the minimum x-axis value being displayed</li> <li><code>ymin</code>   -- the minimum y-axis value being displayed</li> <li><code>xmax</code>   -- the maximum x-axis value being displayed</li> </ul> <p>From these, <code>ymax</code> (the maximum y-axis value being displayed) will be computed to match the window aspect ratio (which is the width divided by the height).</p> <p>Note</p> <p>If arbitrary <code>ymax</code> values are allowed, the Mandelbrot set can look stretched in one dimension, so we force it to match the aspect ratio to avoid this.</p> <p>A good test invocation of the program will be:</p> <pre><code>$ java mandelbrot.MandelbrotView 1200 900 -2.5 -1.5 1.5\n</code></pre> <p>which will display the entire Mandelbrot set. (This is image 1 above. Note that the last coordinate (<code>ymax</code>) is not needed and shouldn't be supplied, since it's computed to match the aspect ratio.)</p>"},{"location":"assignments/5/mandelbrot/#code-to-write","title":"Code to write","text":""},{"location":"assignments/5/mandelbrot/#overall-structure","title":"Overall structure","text":"<p>Like most real-world Java programs, this one is divided into several files:</p> <ul> <li><code>Mandelbrot.java</code></li> <li><code>MImage.java</code></li> <li><code>MandelbrotView.java</code></li> </ul> <p>Each file contains one or more classes which have very specific and independent roles, which we summarize here. The main point is to understand that it is very beneficial to divide up a programming task among multiple subtasks. The more independent the subtasks, the easier the code is to write. We will re-use the files <code>Mandelbrot.java</code> and <code>MImage.java</code> in next week's assignment. (They won't need to be altered at all.) This is another benefit of dividing programs into multiple files: you can re-use the parts to write new programs.</p>"},{"location":"assignments/5/mandelbrot/#computing-the-iteration-counts","title":"Computing the iteration counts","text":"<p>The file <code>Mandelbrot.java</code> will contain the code for computing the iteration counts for the Mandelbrot set given the parameters of the set. These parameters are:</p> <ul> <li>Window width in pixels</li> <li>Window height in pixels</li> <li>Minimum point on the X axis in the window (a Java <code>double</code>)</li> <li>Minimum point on the Y axis in the window (a Java <code>double</code>)</li> <li>Maximum point on the X axis in the window (a Java <code>double</code>)</li> <li>Maximum point on the Y axis in the window (a Java <code>double</code>)</li> <li>The maximum iteration count</li> </ul> <p>For each pixel in the image (which we'll call a \"point\"), the program will compute the X/Y coordinates of that point (i.e. the point's corresponding position in the complex plane), then run the Mandelbrot algorithm (described below) to compute the iteration count for that point. It will store the iteration counts into an object called an <code>MImage</code>, which we describe next.</p>"},{"location":"assignments/5/mandelbrot/#storing-the-iteration-counts","title":"Storing the iteration counts","text":"<p>Abstractly, we represent the computed image as a two-dimensional array of integers, where each integer is the iteration count corresponding to a particular point. For convenience, we use a custom class called an <code>MImage</code> to store the data. In addition to the two-dimensional array, the <code>MImage</code> also contains the dimension information of the image (<code>xmin</code>, <code>ymin</code>, <code>xmax</code>, <code>ymax</code>, as well as the image width and height in pixels), so that all the information about a particular image is stored in the <code>MImage</code>.</p> <p>An <code>MImage</code> object is an abstract image, so it doesn't contain color information, just iteration counts. One advantage of storing it this way is that we can switch between different color maps when the image is finally displayed. One disadvantage is that it requires extra computation to convert the iteration counts to colors; however, Java is fast enough to do this on-the-fly.</p> <p>Since this class is so simple, we supply you with the completed implementation, which you don't have to change.</p>"},{"location":"assignments/5/mandelbrot/#displaying-the-image","title":"Displaying the image","text":"<p>The <code>MandelbrotView</code> class will convert an <code>MImage</code> into a Java class called a <code>BufferedImage</code>. <code>BufferedImage</code> objects are basically a two-dimensional array of color values. You can set the color for every pixel in the image, and then display it. The <code>MandelbrotView</code> class extends the <code>JPanel</code> class, which has a <code>paint</code> method which is used to render the contents of the panel to a window on the computer screen. Displaying a <code>BufferedImage</code> on a <code>JPanel</code> is straightforward and is described below.</p>"},{"location":"assignments/5/mandelbrot/#supplied-code","title":"Supplied code","text":"<p>We are supplying you with template code for these Java files:</p> <ul> <li> <p><code>MImage.java</code>  (This is the complete implementation.)</p> </li> <li> <p><code>Mandelbrot.java</code></p> </li> <li> <p><code>MandelbrotView.java</code></p> </li> </ul> <p>You will be editing the last two files, replacing the <code>// TODO</code> comments with your implementation.</p>"},{"location":"assignments/5/mandelbrot/#mandelbrotjava","title":"<code>Mandelbrot.java</code>","text":"<p>This file contains the <code>Mandelbrot</code> class. Here is what you have to implement.</p>"},{"location":"assignments/5/mandelbrot/#fields","title":"Fields","text":"<p>Outside of the methods, define the fields of the class. One field (<code>mimg</code>) is predefined for you because it's used in the <code>getImg</code> method, which is supplied in the template code. Add whatever other fields you find useful.</p> <p>Note</p> <p>We recommend that fields be given their initial values in the constructor, not where they are declared. Java programmers don't all agree on this, but in our opinion, it's easier to understand the code if all the fields are initialized in the same place. Also, having initializations inside the constructor allows you to use the full power of Java (e.g. in case some initializations could result in errors, you can use Java's exception handling capabilities).</p>"},{"location":"assignments/5/mandelbrot/#constructor","title":"Constructor","text":"<p>The <code>Mandelbrot</code> constructor takes several arguments:</p> <ul> <li> <p><code>width</code>, <code>height</code>: the dimensions of the image in pixels</p> </li> <li> <p><code>xmin</code>, <code>ymin</code>, <code>xmax</code>, <code>ymax</code>: the minimum and maximum X and Y axis values in the complex plane of the image being computed</p> </li> <li> <p><code>maxiterations</code>: the maximum number of iterations allowed for the Mandelbrot set computation</p> </li> </ul> <p>It stores these and computes the <code>MImage</code> field (<code>mimg</code>) by calling the <code>draw</code> method.</p>"},{"location":"assignments/5/mandelbrot/#draw","title":"<code>draw</code>","text":"<p>This method computes the <code>MImage</code> field (<code>mimg</code>) by determining the X and Y coordinates in the complex plane of every pixel in the image (i.e. every pixel whose coordinates fit inside a <code>width</code> by <code>height</code> rectangle on the screen). Then, for each coordinate, it computes the iteration count by calling the <code>mcount</code> method. The iteration counts are stored in the <code>MImage</code> object.</p>"},{"location":"assignments/5/mandelbrot/#mcount","title":"<code>mcount</code>","text":"<p>This is a <code>private</code> method, since it will never need to be called from outside of the class. It computes the iteration count for a particular X and Y coordinate in the complex plane, based on Mandelbrot's equation.</p> <p>The naive way of doing this (using complex numbers) is extremely cumbersome, in part because Java has no built-in support for complex numbers (and we don't want you to write a <code>Complex</code> class either!). Instead, you should read this page and implement the \"Unoptimized naive escape time algorithm\". You can assume that <code>mcount</code> gets the <code>x0</code> and <code>y0</code> values in the algorithm directly as arguments; any scaling is done outside of this method. Notice that the escape threshold is 2 i.e. when the magnitude of the complex number is more than 2, the iteration count has been reached.</p> <p>Note</p> <p>In fact, instead of computing the complex magnitude directly, the algorithm computes the square of the complex magnitude and compares it with 4. This allows us to not perform unnecessary square roots. (So it's not completely unoptimized! )</p> <p>Also, unlike the algorithm given, we don't compute colors in this method, just iteration counts.  Computing color values will be left to other classes.</p>"},{"location":"assignments/5/mandelbrot/#getimg","title":"<code>getImg</code>","text":"<p>This method (which is supplied for you in the template code) simply returns the <code>mimg</code> field, which is an <code>MImage</code> object.</p>"},{"location":"assignments/5/mandelbrot/#mandelbrotviewjava","title":"<code>MandelbrotView.java</code>","text":"<p>This file contains two classes: <code>Palettes</code> and <code>MandelbrotView</code>.</p> <p>The <code>Palettes</code> class stores one or more color maps which are used to convert between iteration counts and colors. We are supplying you with one color map, and for this assignment you don't have to create any more. The color map supplied is the one used to generate the images shown above, and is a good all-around color map for displaying the Mandelbrot set. You don't have to alter or edit this class for this assignment.</p> <p>The <code>MandelbrotView</code> class is used to compute and display Mandelbrot set images. This class is incomplete. Here is what you have to implement.</p>"},{"location":"assignments/5/mandelbrot/#fields_1","title":"Fields","text":"<p>A number of fields are specified in the template code. You may add more if you like.</p>"},{"location":"assignments/5/mandelbrot/#the-main-method","title":"The <code>main</code> method","text":"<p>We're supplying you with a partial implementation of the <code>main</code> method.</p> <p>This method will first parse the command-line arguments. If there is an error, print an error message and then call the <code>usage()</code> method (which is supplied). Note that <code>usage()</code> calls <code>System.exit(1)</code>, so you don't have to call that in <code>main</code>.</p> <p>Make sure that you check that the width and height arguments are positive integers, and that <code>xmin</code> is less than <code>xmax</code>. You also need to compute <code>ymax</code> so that the aspect ratio (X axis extent divided by Y axis extent) is the same as the image width divided by the height.</p> <p>The final part of <code>main</code> is supplied for you. It creates a <code>JFrame</code> (which is a visible window) and a <code>MandelbrotView</code> instance, adds the <code>MandelbrotView</code> to the <code>JFrame</code> so it's also visible, and makes the entire window visible.</p>"},{"location":"assignments/5/mandelbrot/#constructor_1","title":"Constructor","text":"<p>The constructor for this class is so simple it's provided for you. It sets field values based on the arguments, sets the maximum number of iterations to 1024, sets up the color map, and draws the image.</p>"},{"location":"assignments/5/mandelbrot/#setcolormap","title":"<code>setColorMap</code>","text":"<p>This method creates the actual color map (an array of <code>Color</code> values called <code>colormap</code>) given the color palette (a <code>Palette</code> object). The purpose of the color map is to store a specific color for each iteration count. Since the maximum iteration count is normally much larger than the number of colors in the palette, we can't just fill the array directly from the palette.</p> <p>There are several ways we could conceivably fill the color map using the palette. To be concrete, we'll assume that the palette has 16 colors and the color map has 1024 colors (which is the case for this program).</p> <p>You might think that the best way to do this would be to spread the palette colors evenly over the color map, interpolating between colors in the palette. So the first 64 colors would lie between color 0 and color 1 of the palette, the next 64 colors would lie between color 1 and color 2 of the palette, and so on. This can easily be done, but unfortunately, if you do this, the images you get are not very visually interesting.</p> <p>A much simpler method is to simply replicate the palette multiple times to fill in the colormap. For each index in the color map, just compute the index modulo the length of the palette as the index of the palette color to use. The nice thing about this kind of coloring is that regions of the image that differ by only a single iteration count will have visually distinct colors. The less nice thing about it is that the colors will wrap around from one end of the palette to the other at certain changes in the iteration count. Overall, though, this will generate visually appealing images that give a lot of visual information about the structure of the Mandelbrot set. Therefore, we recommend that you use this method.</p>"},{"location":"assignments/5/mandelbrot/#draw_1","title":"<code>draw</code>","text":"<p>This method generates a <code>BufferedImage</code> (actual image) from an <code>MImage</code> (abstract image). It does this by creating a <code>BufferedImage</code> of the correct pixel dimensions (which are the same as the dimensions of the <code>MImage</code>). Use <code>TYPE_INT_RGB</code> as the image type in the <code>BufferedImage</code> constructor. For each iteration count in the <code>MImage</code>, look up the corresponding color in the color map and set the image color to that color. The resulting <code>BufferedImage</code> should be stored in the object as the <code>bimg</code> field.</p>"},{"location":"assignments/5/mandelbrot/#other-methods","title":"Other methods","text":"<p>There is a <code>draw</code> method which takes no arguments which is supplied in the template code.</p> <p>The <code>paint</code> method is responsible for actually displaying the contents of the <code>BufferedImage</code> onto the screen. This method is a one-liner and is supplied for you.</p>"},{"location":"assignments/5/overview/","title":"Assignment 5: Mandelbrot set, part 1","text":"<p>For this program, we will write the first of two programs to enable visualization of the Mandelbrot set. In this week's assignment, you will write the code to compute the Mandelbrot set and to display it using command-line arguments. Next week, you will refine this to make an interactive program that allows you to explore the Mandelbrot set while your program is running.</p>"},{"location":"assignments/5/overview/#due-date","title":"Due date","text":"<p>This assignment is due on Monday, November 13th at 2 AM.</p>"},{"location":"assignments/5/overview/#learning-objectives","title":"Learning objectives","text":"<ul> <li> <p>Continue to familiarize ourselves with Java's graphics libraries</p> </li> <li> <p>Learn to break a problem down into multiple reusable classes</p> </li> <li> <p>Review complex numbers and the complex plane</p> </li> <li> <p>Learn what the Mandelbrot set is and how to visualize it</p> </li> </ul>"},{"location":"assignments/5/overview/#template-code","title":"Template code","text":"<p>As usual, the template code for this assignment is available in the course Canvas site as the file <code>lab5.zip</code>.</p>"},{"location":"assignments/5/overview/#what-to-hand-in","title":"What to hand in","text":"<p>Please submit these files to CodePost as <code>Assignment 5</code>:</p> <ul> <li><code>Mandelbrot.java</code></li> <li><code>MandelbrotView.java</code></li> </ul>"},{"location":"intro/welcome/","title":"Welcome to CS 1x!","text":"<p>This course is called Intermediate Computer Programming. It's a course on programming for students who have already have a considerable amount of experience in computer programming. Therefore (unlike CS 1) we will not be teaching you \"how to program\" from scratch. Instead, we will focus on the program design process, as well as covering a number of areas that typically trip up even experienced programmers (e.g. recursion, exception handling, etc.).</p> <p>This book serves as the official course document repository. We will be posting most of the course-related content in these pages, including:</p> <ul> <li>the course syllabus   (which you should read as soon as possible!)</li> <li>the course collaboration policies   (which you should also read as soon as possible!)</li> <li>assignments</li> </ul> <p>and anything else we consider useful.</p> <p>Your feedback on these notes will be very helpful to us in improving them, so please let us know if anything is hard to understand or if something that should be here isn't.</p> <p>Course-related material we won't post here includes:</p> <ul> <li>lecture slides</li> <li>assignment code zip files</li> <li>some administrative information</li> </ul> <p>These will be posted on the course Canvas page in the Modules section.</p>"}]}