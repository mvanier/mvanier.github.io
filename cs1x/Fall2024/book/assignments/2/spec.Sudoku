Outline of the Sudoku program
=============================

The program must be able to do the following:

* Read a Sudoku board from a file.
* Print a Sudoku board.
  * Extra credit for "nice" printout.
* Solve a Sudoku board (or determine that it's unsolvable).
  * Ultimate efficiency is not a requirement, but it should
    be able to solve most boards reasonably quickly.
* Validate the solution (show that it's solved).
* Write the solution to a file.

== Principles

* Good style (see a style guide)
  - lines <= 80 chars ideally
  - spaces between operators and after commas
  - space after open-comment symbol

* Good design
  - methods do one thing only
  - no static methods unless specifically indicated
    - "real" OO programming
  - don't repeat code
  - no unnecessary code or commented-out code

* Good command-line argument checking
  - no tracebacks exposed to user
  - usage message when no arguments supplied
  - readable error message + usage message for specific errors
  - no command-line errors missed

* Good commenting
  - docstrings on each public method
  - comments on any non-obvious code

* Defensive programming
  - use assert() to enforce invariants

== Algorithm

Represent Sudoku board as a 9x9 array of arrays of ints.
Each int is either 1-9 or 0 if contents are unknown.
Start with numbers taken from a puzzle description.
Go through the board row by row.
For each 0 you find:
  -- set it to each of the legal numbers in turn
  -- recursively solve the rest of the board
  -- if solution fails, set the number to the next number
  -- if all numbers fail, set the number back to 0

== Command-line arguments

java Sudoku <filename>

where <filename> is the name of the Sudoku file to read in.
