Part A: Abstraction
===================

1. :sicp_14:`2.2`
-----------------

[**1**] (20 minutes)

Consider the problem of representing points and line segments in a
plane. Points will be represented as a record type called ``point``,
containing two (floating-point) numbers (with field names ``x`` and
``y``). Line segments will be represented as a record type called
``segment`` containing two points: a starting point (a field called
``startp``) and an ending point (a field called ``endp``). Define the
two datatypes using OCaml ``type`` definitions.

Using this representation, define the following functions:

#. ``midpoint_segment``: this function will take a single ``segment`` as
   its only argument and return a ``point`` which is the midpoint of the
   line segment.

#. ``segment_length``: this function will take a single ``segment`` as
   its only argument and return a ``float`` which is the length of the
   line segment.

#. ``print_point``: this function will take a single ``point`` as its
   only argument and print its representation to the terminal.

Use the ``Printf.printf`` function with a suitable format string to
print points. Use the ``%g`` formatting directive to print
floating-point numbers without extra trailing zeros. The output should
look like this when tested in the interactive OCaml interpreter:

.. code-block:: ocaml

   # let p1 = ... ;; (* x = 1.0, y = 0.0 *)
   # print_point p1;;
   (1, 0)
   # let p2 = ... ;; (* x = 3.4, y = -4.5 *)
   # print_point p2;;
   (3.4, -4.5)

You may find the built-in functions ``abs_float`` and ``sqrt`` useful
for computing segment lengths.

Finally, write the following functions, which serve as an abstraction
layer for points and segments.

#. ``make_point``: this function takes two ``float`` arguments
   (representing the ``x`` and ``y`` coordinates) and returns a
   ``point`` in your representation.

#. ``get_coords``: this function takes a ``point`` argument and returns
   a two-tuple of the (x, y) coordinates.

#. ``make_segment``: this function takes two ``point`` arguments
   (representing the start and endpoints) and returns a ``segment`` in
   your representation.

#. ``get_points``: this function takes a ``segment`` argument and
   returns a two-tuple of the (start, end) points.


2. :sicp_14:`2.3`
-----------------

[**2**] (40 minutes)

Implement a representation for rectangles in a plane. Create functions
that compute the perimeter and the area of a given rectangle. Now
implement a different representation for rectangles. Can you design your
system with suitable abstraction barriers, so that the same perimeter
and area functions will work using either representation?

The first representation will store only a pair of points, representing
the lower-left corner and the upper-right corner. The second
representation will store four numbers, representing the lower and upper
``x`` values, and the lower and upper ``y`` values. Use the point and
segment abstractions developed in the previous problem in your solution
of this problem (you don’t have to re-type that code). For both
representations, define these accessors:

.. code-block:: ocaml

   rectangle_lower_segment
   rectangle_upper_segment
   rectangle_left_segment
   rectangle_right_segment

.. note::

   Don’t define the accessors for one representation in terms of
   the accessors for the other representation even if you can. Pretend that
   the code for each representation was written by a different programmer
   with no knowledge of the other representation.

   Use the point and segment abstraction layers, as needed,
   to define these accessors.  Don't use the internal representation
   of either points or segments.
   You may also find it useful to define new point accessors
   ``get_x`` and ``get_y`` to extract just the X or Y coordinates
   of points.

Then define the functions ``rectangle_perimeter`` and ``rectangle_area``
using *only* these accessors and functions from the point representation
described above.

Since we want to be able to test both representations, use the following
names for the second representation’s functions:

.. code-block:: ocaml

   rectangle_lower_segment2
   rectangle_upper_segment2
   rectangle_left_segment2
   rectangle_right_segment2
   rectangle_perimeter2
   rectangle_area2

Note, though, that the code for ``rectangle_perimeter`` and
``rectangle_perimeter2`` will be identical except for name changes (and
similarly for ``rectangle_area`` and ``rectangle_area2``). The code for
the other corresponding functions will necessarily be different, because
they will use different data representations.

Judicious use of field punning (see the "OCaml notes" section) will make this
code much easier to write. Also, don’t forget about the dot syntax for
accessing record fields, as it can be useful here too.

Finally, for testing purposes, write the following functions:

#. ``make_rectangle``: this function takes two ``point`` arguments and
   creates a rectangle using the first representation.

#. ``make_rectangle2``: this function takes four ``float`` arguments and
   creates a rectangle using the second representation.

.. note::

   Technically, ``make_rectangle`` and ``make_rectangle2`` could take
   their arguments in whatever order you like. However, the test scripts
   expect the order to be

   * ``make_rectangle ll ur`` where ``ll`` is the point representing
     the lower-left corner, and ``ur`` is the point representing the
     upper-right corner

   * ``make_rectangle2 lx ly ux uy``, where ``lx`` is the lower ``x``
     value, ``ux`` is the upper ``x`` value, ``ly`` is the lower ``y``
     value, and ``uy`` is the upper ``y`` value.

   so please define your functions that way.


3. :sicp_14:`2.4`
-----------------

[**1**] (30 minutes)

There are many ways to represent data types. For instance, if we want to
represent pairs of values, we could write:

.. code-block:: ocaml

   type ('a, 'b) pair = Pair of 'a * 'b
   let first (Pair (x, _)) = x
   let second (Pair (_, y)) = y

Note that ``pair`` is a polymorphic type, with two type variables ``'a``
and ``'b``, since the same definition will work for arbitrary types.
(OCaml already defines the built-in functions ``fst`` and ``snd`` to
extract the first and second elements of an arbitrary two-tuple.)

Alternatively, we could just use "bare" two-tuples as our
representation, or some kind of record type with two fields. A more
exotic representation of pairs uses a function with two arguments as the
pair data type. Here is part of the code for this representation:

.. code-block:: ocaml

   let make_pair x y = fun m -> m x y
   (* Or, equivalently: let make_pair x y m = m x y *)
   let first z = z (fun x y -> x)

What is the corresponding definition of ``second``? Write the code in
your answer (not in a comment). Then verify (in a comment) that
``first (make_pair x y)`` yields ``x`` for any objects ``x`` and ``y``.
(You don’t need to do a full substitution model evaluation; just enough
to show that you get the correct answer.) Then write out (again in a
comment) the full substitution model evaluation of
``second (make_pair 1 2)``. (Spoiler alert: the answer should be ``2``.)
The evaluation isn’t too long (about 25 lines).

This representation for pairs is actually how pairs are represented in
lambda calculus (LC), which adds strength to the argument that LC is in
fact capable of representing arbitrary data and computations on that
data.

.. note::

   Depending on the warning settings, OCaml may complain about a function
   such as this:

   .. code-block:: ocaml

      fun x y -> x

   because the ``y`` argument isn't used.  In that case, just use ``_``
   instead:

   .. code-block:: ocaml

      fun x _ -> x


4. :sicp_14:`2.5`
-----------------

[**1**] (20 minutes)

Show that we can represent pairs of nonnegative integers using only
numbers and arithmetic operations if we represent the pair
of :math:`a` and :math:`b` as the integer :math:`2^a 3^b`.
Give the corresponding definitions of the functions
``make_pair``, ``first``, and ``second``.
To avoid name clashes with the previous problem,
call them ``make_pairi``, ``firsti``, and ``secondi``.

Before you do this, define the following two helper functions:

#. ``pow``: This function takes two ``int`` arguments and returns the
   first raised to the power of the second. So ``pow 2 10`` would give
   ``1024``. (You may have defined this in the last assignment, in which
   case you can re-use that definition.)

#. ``int_log``: This function takes two ``int`` arguments and returns
   the integer logarithm of the second to the base of the first, which
   we define as being the number of times that the base can be evenly
   divided into the number. Examples:

   .. code-block:: ocaml

      int_log 2 1024 --> 10
      int_log 3 1024 --> 0    (* 1024 is not divisible by 3 *)
      int_log 2 3888 --> 4
      int_log 3 3888 --> 5    (* 3888 = 2^4 * 3^5 *)

   In general, if ``pow a b`` is ``c``, then ``int_log a c`` is ``b``.

Once these functions have been defined, you can (and should) trivially
define ``make_pairi``, ``firsti`` and ``secondi`` in terms of them.

You may assume that all arguments are positive integers, except that the
second argument of ``pow`` can also be ``0``.


5. Unary numbers
----------------

[**1**] (20 minutes)

A very simple representation of non-negative integers is called the
"unary number" representation. One way to represent a non-negative
integer in unary is as follows:

.. code-block:: ocaml

   0 --> [blank]
   1 --> 1
   2 --> 11
   3 --> 111
   4 --> 1111
   5 --> 11111
   (* etc. *)

Clearly, the digit ``1`` is just a placeholder; we could just as well
use anything else. In this problem, we’ll write some functions to work
with unary numbers in OCaml. Our first representation will use lists:
zero will be the empty list, one will be the list containing only the
``unit`` value (``[()]``), two will be the list containing two ``unit``
values (``[(); ()]``), and so on. So we have:

.. code-block:: ocaml

  0 --> []
  1 --> [()]
  2 --> [(); ()]
  3 --> [(); (); ()]
  4 --> [(); (); (); ()]
  5 --> [(); (); (); (); ()]
  (* etc. *)

This can be expressed as the following OCaml code, which is our
abstraction layer for working with unary integers:

.. code-block:: ocaml

  let zero = []

  let is_zero = function
    | [] -> true
    | () :: _ -> false

  let succ u = () :: u

You need to define the following functions:

#. ``prev`` This function takes one argument (a unary representation of
   an integer) and returns a unary integer one less than the argument.
   If the argument is (unary) zero, use the ``invalid_arg`` function
   with a reasonable error message to raise an exception.

#. ``integer_to_unary`` This function takes one argument (an OCaml
   ``int``) and returns a unary number representation of the same
   integer.

#. ``unary_to_integer`` This function takes one argument (a unary
   representation of an integer) and returns the corresponding OCaml
   ``int``.

#. ``unary_add`` This function takes two arguments, both of which are
   unary representations of integers. It returns the result of adding
   the two integers together. The return value is a unary representation
   of an integer, not an OCaml ``int``.

We are going to insist on a few more restrictions. Only the ``prev``
function should use pattern matching. The rest of the functions should
only use ``if``/``then``/``else`` statements, the abstraction layer
functions (``zero``, ``is_zero``, ``succ``, and ``prev``), recursion,
integer operations where they are essential, and nothing else.

Do not convert from unary numbers to integers to do any operations
(except, obviously, in ``unary_to_integer``). Similarly, do not convert
integers to unary numbers to do any operations (except in
``integer_to_unary``).

.. admonition:: Examples

   .. code-block:: ocaml

      # prev [()];;
      - : unit list = []

      # prev [(); (); (); (); ()];;
      - : unit list = [(); (); (); ()]

      # integer_to_unary 0;;
      - : unit list = []

      # integer_to_unary 1;;
      - : unit list = [()]

      # integer_to_unary 10;;
      - : unit list = [(); (); (); (); (); (); (); (); (); ()]

      # unary_to_integer [(); (); (); (); (); (); (); (); ()];;
      - : int = 9

      # unary_to_integer [(); (); ()];;
      - : int = 3

      # unary_to_integer [()];;
      - : int = 1

      # unary_to_integer [];;
      - : int = 0

      # unary_add [(); (); ()] [];;
      - : unit list = [(); (); ()]

      # unary_add [] [(); (); ()];;
      - : unit list = [(); (); ()]

      # unary_add [(); ()] [(); (); ()];;
      - : unit list = [(); (); (); (); ()]

      # unary_to_integer
          (unary_add (integer_to_unary 1001) (integer_to_unary 65535));;
      - : int = 66536

Now consider changing the the list-of-unit representation to this
alternative unary representation:

.. code-block:: ocaml

   type nat = Zero | Succ of nat

   let zero' = Zero

   let is_zero' = function
     | Zero -> true
     | Succ _ -> false

   let succ' u = Succ u

Define ``prev'`` for this representation (you can use pattern matching).
Do the other definitions (``integer_to_unary``, ``unary_to_integer``,
``unary_add``) have to change from their definitions in the previous
representation (other than obvious name changes *e.g.* ``is_zero`` to
``is_zero'``)? Write your answer in a comment. If the answer is yes,
indicate which changes other than name changes have to be made. Write
the new versions (even if they only require name changes). Try to re-use
as much code as possible between the two representations.


6. :sicp_14:`2.6`: Church numerals
----------------------------------

[**2**] (45 minutes)

In case representing pairs as functions wasn’t mind-boggling enough,
consider that, in a language that can manipulate functions as data, we
can even get by without numbers (at least insofar as nonnegative
integers are concerned) by implementing zero and the operation of adding
one as:

.. code-block:: ocaml

   (* zerof = "functional zero"; we call it this so as not to be confused with
      zero or zero' previously defined. *)

   let zerof = fun s -> fun z -> z
     (* or equivalently: let zerof = fun s z -> z *)
     (* or equivalently: let zerof s z = z *)

   let add1 n = fun s -> fun z -> s (n s z)
     (* or equivalently: let add1 n = fun s z -> s (n s z) *)
     (* or equivalently: let add1 n s z = s (n s z) *)

This representation is known as the "Church numeral" representation,
after its inventor, Alonzo Church, the logician who invented the lambda
calculus. Conceptually, ``s`` means "successor" and ``z`` means "zero",
though in reality they don’t really mean anything since they are just
formal arguments of functions.

Define ``one`` and ``two`` directly (not in terms of ``zerof`` and
``add1``). (*Hint*: Use substitution to evaluate ``add1 zerof`` and see
what you get.) Continue by additionally defining all the integers from
``three`` to ``ten`` as Church numerals. Do not use ``add1`` or any of
the smaller Church numerals to define the Church numerals. All Church
numerals should have two arguments: ``s`` and ``z`` (like ``zerof``
does).

.. note::

   Once you see the pattern, it will be very easy to define
   (non-negative) integers as Church numerals. You’re not required to
   prove that your definitions are correct, but they have to *be*
   correct.

Define an addition function called ``add`` for Church numerals. Don’t
use ``add1`` in this definition, and don’t use regular OCaml ``int``\s
in this function either (directly or indirectly). It should have the
form:

.. code-block:: ocaml

   let add m n s z = ...
   (* equivalent to: let add m n = fun s z -> ... *)

where ``m`` and ``n`` are the Church numerals to be added. Note that
when you pass Church numerals ``m`` and ``n`` to ``add`` you get a
function of two arguments ``s`` and ``z`` as the return value; that is
the Church numeral which is the sum of ``m`` and ``n``. The definition
of ``add`` is extremely short.

Then define a function called ``church_to_integer`` which, given a
Church numeral, returns the corresponding non-negative integer. This is
also a very short function.


7. Church numerals: types
-------------------------

[**2**] (45 minutes)

We cheated a little bit on the previous problem. Although we defined
Church numerals in OCaml and were able to define useful functions on
them, in fact, Church’s original lambda calculus is *untyped*, whereas
OCaml is very definitely typed, as you are well aware of by now. (Church
later invented a typed lambda calculus as well, but that’s not what
we’re referring to here.) Therefore, OCaml assigns types to all of the
Church numerals (which are actually functions) as well as to the
functions on Church numerals (``add1`` and ``add``). If you look at the
``lab4.mli`` interface file, you will see some types that you might not
have expected:

.. code-block:: ocaml

   val zerof : 'a -> 'b -> 'b
   val add1 : (('a -> 'b) -> 'c -> 'a) -> ('a -> 'b) -> 'c -> 'b
   val one : ('a -> 'b) -> 'a -> 'b
   val two : ('a -> 'a) -> 'a -> 'a
   val three : ('a -> 'a) -> 'a -> 'a
   val four : ('a -> 'a) -> 'a -> 'a
   val five : ('a -> 'a) -> 'a -> 'a
   val six : ('a -> 'a) -> 'a -> 'a
   val seven : ('a -> 'a) -> 'a -> 'a
   val eight : ('a -> 'a) -> 'a -> 'a
   val nine : ('a -> 'a) -> 'a -> 'a
   val ten : ('a -> 'a) -> 'a -> 'a
   val add : ('a -> 'b -> 'c) -> ('a -> 'd -> 'b) -> 'a -> 'd -> 'c
   val church_to_integer : ((int -> int) -> int -> 'a) -> 'a

These are the types that were automatically inferred for the functions
as defined in ``lab4.ml``.

.. note::

   You can generate these type signatures yourself by running:

   .. code-block:: text

      $ ocamlc -i lab4.ml

   on your ``lab4.ml`` file (assuming that it’s correct).

One peculiar aspect of this is that ``zerof`` and ``one`` don’t have the
same types as the rest of the Church numerals. We might be OK with
``one``, because it’s more general than the subsequent Church numerals
but compatible with them, but ``zerof`` is a completely different type.
And ``church_to_integer`` doesn’t even return an ``int``! What is *that*
all about? Let’s compile the code and try it out:

.. code-block:: text

   $ ocamlc -c lab4.mli  (* the code we supplied you with *)
   $ ocamlc -c lab4.ml   (* your code *)
   $ ocaml
   # #load "lab4.cmo";;
   # open Lab4;;
   # church_to_integer;;
   - : ((int -> int) -> int -> 'a) -> 'a = <fun>
   # zerof;;
   - : 'a -> 'b -> 'b = <fun>
   # one;;
   - : ('a -> 'b) -> 'a -> 'b = <fun>
   # church_to_integer zerof;;
   - : int = 0
   # church_to_integer one;;
   - : int = 1
   # church_to_integer ten;;
   - : int = 10

Somehow, it works: ``church_to_integer`` returns an ``int`` when given
any of the Church numerals we defined. By assigning types to the type
variables in ``church_to_integer`` when the argument of that function is
either ``zerof`` or ``one``, explain why both
``church_to_integer zerof`` and ``church_to_integer one`` return an
integer. Write your answer as an OCaml comment.

*Hint:* Since type variables are simply arbitrary names, you can write
the type of ``church_to_integer`` as:

.. code-block:: ocaml

   val church_to_integer : ((int -> int) -> int -> 'c) -> 'c

so that there is no chance of confusing the ``'a`` in its type with the
``'a`` in the types of ``zerof`` and ``one``, which could refer to
different types. Similarly, the ``'a`` and ``'b`` types in ``zerof``
don’t have to be the same as the ``'a`` and ``'b`` types in ``one`` for
expressions involving ``zerof`` or ``one``, and specifically for
``church_to_integer zerof`` and ``church_to_integer one``.

Your answer should indicate what type the type variables ``'a``, ``'b``,
and ``'c`` have to be when evaluating ``church_to_integer zerof`` and
``church_to_integer one``. They won’t all be the same in both cases
(which is OK because ``church_to_integer`` has a polymorphic type!).
Then use this to argue that ``church_to_integer zerof`` and
``church_to_integer one`` both return values of type ``int``.

Also, don’t forget that the "type arrow" (``->``) associates to the
right, so the type ``'a -> 'b -> 'c`` means ``'a -> ('b -> 'c)``. It’s a
very good idea to "desugar" type expressions in this manner before
trying to compute type variable assignments.

This process of assigning types to type variables in a consistent manner
is called *type unification* and is one of the things that the OCaml
compiler does for us.

This is a somewhat challenging problem, so feel free to ask the TAs for
help if you need it.
