OCaml notes
===========

Testing
-------

For this assignment, we are supplying you with these support files:

- a ``.mli`` OCaml interface file (``lab5.mli``)
- a test script for parts A and B: (``tests_lab5.ml``)
- a test script for part C: (``tests_lab5c.ml``)
- a ``Makefile``

These files are all available on the course Canvas site
in a single zip file called ``lab5.zip``.
Download this file and use it as you've been doing with previous assignments.

The automated tests are only for parts A and B.
The test script for part C is not automated, because your results may
not be identical to the ones we show below (though they should be
equivalent). Instead, it will display the result of evaluating various
expressions, and you can check by eye that they are correct. To run the
test script for part C, type this:

.. code-block:: ocaml

   $ make testc

Or better still:

.. code-block:: ocaml

   $ make testc | more

so you can see the results without having to scroll back in your
terminal. Hit the spacebar to page through the results.

Note that most of the tests/examples described below are also in the
test script. However, the test script doesn’t test everything
(particularly in part C), so don’t assume that your code is perfect if
it passes the test script.


Imperative programming and arrays
---------------------------------

Part A of this assignment
requires you to write some code in an imperative style,
and to work with OCaml’s arrays.
Here is a quick refresher on imperative syntax in OCaml;
see recitation lecture 3 and lecture 12 for more details.
Also check out `this chapter
<https://caml.inria.fr/pub/docs/manual-ocaml/coreexamples.html#s%3Aimperative-features>`__
in the OCaml manual as well as `this chapter
<http://dev.realworldocaml.org/imperative-programming.html>`__
in *Real World OCaml*.

Imperative "variables" are modeled in OCaml using "reference cells"
or "refs" for short.
We create these with the ``ref`` function:

.. code-block:: ocaml

   # ref 10 ;;
   - : int ref = {contents = 10}
   # let r = ref 42 ;;
   val r : int ref = {contents = 42}

A reference is just a record with one mutable field called ``contents``.
You can access this field’s value in two ways:

.. code-block:: ocaml

   # r.contents ;;  (* dot syntax for accessing record fields *)
   - : int = 42
   # !r ;;          (* prefix operator ! *)
   - : int = 42

The second way (using the ``!`` operator) is much shorter and is greatly
preferred.  They both do the exact same thing.

You assign to a ref cell in one of two ways:

.. code-block:: ocaml

   # r.contents <- 1001 ;;  (* dot syntax for mutating record fields *)
   - : unit = ()
   # r ;;
   - : int ref = {contents = 1001}
   # r := 2002 ;;           (* := operator *)
   - : unit = ()
   # r ;;
   - : int ref = {contents = 2002}
   # !r ;;
   - : int = 2002

Again, using the ``:=`` operator is shorter and is greatly preferred.
And again, both ways do the same thing.

Arrays are constructed using this notation:

.. code-block:: ocaml

   # [| 1; 2; 3; 4; 5 |] ;;
   - : int array = [|1; 2; 3; 4; 5|]

You can also use the ``Array.make`` function:

.. code-block:: ocaml

   # Array.make 5 "foo" ;;
   - : string array = [|"foo"; "foo"; "foo"; "foo"; "foo"|]

Array elements are fetched and changed using these syntaxes:

.. code-block:: ocaml

   # let arr = Array.make 5 0 ;;
   val arr : int array = [|0; 0; 0; 0; 0|]
   # arr.(0) ;;
   - : int = 0
   # arr.(0) <- 42 ;;
   - : unit = ()
   # arr ;;
   - : int array = [|42; 0; 0; 0; 0|]

Note that arrays are always mutable, so any element in an array can be
changed with the syntax given above.

OCaml has imperative ``while`` and ``for`` loops. Examples:

.. code-block:: ocaml

   # let r = ref 10 ;;
   val r : int ref = {contents = 10}
   # while !r > 0 do
       Printf.printf "%d\n" !r;
       r := !r - 1
     done ;;
   10
   9
   8
   7
   6
   5
   4
   3
   2
   1
   - : unit = ()

   # for i = 1 to 10 do
       Printf.printf "%d\n" i
     done ;;
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   - : unit = ()

   # for i = 10 downto 1 do
     Printf.printf "%d\n" i
     done ;;
   10
   9
   8
   7
   6
   5
   4
   3
   2
   1
   - : unit = ()

The `Array module`_
has a number of other useful functions on arrays (|eg| ``Array.length``).

.. _Array module: https://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html

That should be enough to get you through this assignment.

