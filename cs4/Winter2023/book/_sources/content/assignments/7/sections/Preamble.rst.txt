Details
=======

Due date
--------

This assignment is due on Monday, |lab7due|, at |duetime|.


Coverage
--------

This assignment covers all the material in the course,
except for the special topics lectures.


Note
----

There will be no opportunity for rework on this assignment.
Submitting this assignment late may make it
difficult or impossible for the TAs to grade it in a timely manner.
Please make every effort to complete the assignment on time.


Overview
--------

This assignment is based on a previous year’s final exam, and will serve
as a good example of writing somewhat longer programs in OCaml, as well
as being excellent preparation for the actual final exam.

The exam is one big miniproject. You will implement a solver for a
sliding-block puzzle game called
`Klotski <https://en.wikipedia.org/wiki/Klotski>`__.

Even though the description of the assignment is fairly long, the total
amount of code you need to write is considerably less than 200 lines
(though you can write more if you want/need to).

The assignment is in two sections.  Part A is worth 20 points,
and part B is worth 10 points, for a total of 30 points,
which get divided by 3 to give the assignment grade out of 10.


What to hand in
---------------

All of your code should be in two files named ``klotski.ml`` and
``search.ml``. These files should be submitted to CodePost as
``Assignment 7``. Do not submit any other files.


Supplied code
-------------

On the course Canvas site, we are providing you with a zip file called
``lab7.zip`` containing eight (8) files of code which you should use as-is
(|ie| don’t edit these files), as well as two (2) template files for the files
you have to hand in (``klotski.ml`` and ``search.ml``) which have some of the
code pre-written for you and which you will need to edit. Please download the
zip file, unzip it, and keep these files in the same directory.

The files are:

``klotski.ml``
  This is a template version of the ``klotski.ml`` file you will be
  submitting. You should download it and edit it to create a working
  version of the file. There are skeleton implementations provided for
  all functions, with complete implementations provided for a few of
  the more obvious/boring/irritating functions. Each of the skeleton
  implementations has one or more places where the following code:
  ``failwith "TODO"`` is found. You should replace this code with your
  own code. Note that you are allowed to add more functions (|eg|
  helper functions) in addition to the ones already in the file, and we
  encourage you to do so if you find it helpful.

``klotski.mli``
  This is the interface file for the ``klotski.ml`` file. Download this
  file, but **do not edit it!** This file and ``klotski.ml`` define the
  ``Klotski`` module. Most of the comments indicating what the various
  exported functions in the module do are in the ``.mli`` file; this is
  typical OCaml practice. Of course, we will describe all these
  functions in detail below as well.

``search.ml``
  This is a template version of the ``search.ml`` file you will be
  submitting. You should download it and edit it to create a working
  version of the file. You only have to implement one function in this
  file, which is part of a functor called ``Search``. We will discuss
  this in detail below. Again, the place where you need to add your
  code is indicated by the code: ``failwith "TODO"``, which you should
  replace with your own code. Again, you are allowed to add more
  functions (|eg| helper functions) in addition to the ones already in
  the file.

``search.mli``
  This is the interface file for the ``search.ml`` file. Download this
  file, but again, **do not edit it!** This file and ``search.ml``
  define the ``Search`` module.

``boards.ml``
  This file contains string versions of several Klotski boards, which
  we will use for testing.

``boards.mli``
  This is the interface file for the ``boards.ml`` file. This file and
  ``boards.ml`` make up the ``Boards`` module. The main exported value
  is an array of strings representing 8 test boards.

``solve.ml``
  This file is the main file for a program called ``klotski_solve``
  which can automatically solve and display the solution of any of the
  Klotski boards in the ``Boards`` module. It allows you to choose
  between breadth-first search (BFS) and depth-first search (DFS) using
  command-line arguments when you run the program. (It turns out that
  BFS is vastly better for this problem than DFS, but implementing
  support for DFS in addition to BFS is so easy, due to OCaml’s module
  system, that we couldn’t resist.)

``interact.ml``
  This file is the main file for a program called ``klotski_interact``
  which will allow you to interactively attempt to solve any of the
  Klotski boards in the ``Boards`` module. The interface is text-based
  and very crude, so don’t expect a great experience, but it’s
  interesting to try to solve these puzzles, especially the harder
  ones. Klotski puzzles can be unbelievably difficult! Using this
  program is completely optional, but it’s fun.

``tests_lab7.ml``
  This is the test script for your code. Running the test script is the
  best way to debug your code. You will probably want to comment out
  tests that involve functions you haven’t written yet.

``Makefile``
  This is the ``Makefile`` for the assignment. There are several
  ``Makefile`` targets:

  *  Typing ``make`` by itself will compile all the files except
     ``tests_lab7.ml`` and compile a native-code compiled version of
     the ``klotski_solve`` program as well as a bytecode version of the
     ``klotski_interact`` program.

  *  Typing ``make solve`` will compile a bytecode version of the
     ``klotski_solve`` program. Typing ``make solve_native`` will
     compile a native-code compiled version of the ``klotski_solve``
     program. The native-code compiled version will run much faster, so
     we recommend compiling it that way if possible.

  *  Typing ``make interact`` will compile the ``klotski_interact``
     program. This is a bytecode program, not a native-code compiled
     program, because the speed difference would not be detectable in
     an interactive program like this.

  *  Typing ``make test`` will run the test script and report all test
     successes/failures.

  *  Typing ``make clean`` will remove all compilation targets (object
     code, executables, |etc|) but leave all source code alone.

  Normally, you will just want to type ``make`` to compile the program
  and ``make test`` to run the tests.

  .. note::

     Typing ``make test`` will not automatically make the program,
     so you have to type ``make`` by itself first.

As mentioned above, you should download all of these files and edit just
the files ``klotski.ml`` and ``search.ml``. **Do not submit any of the
other files.**

