Part A: Basic exercises
=======================

Some of the following problems are taken from the textbook
(Structure and Interpretation of Computer Programs, or SICP for short).
SICP problems are linked to the online textbook description,
although you shouldn't need to consult it.


1. Expressions
--------------

[**4**] |sp| (15 minutes)

Below is a sequence of expressions. What is the result (the type and
value or the error message) printed by the OCaml interpreter in response
to each expression? Assume that the sequence is to be evaluated in the
order in which it is presented. If the interpreter indicates an error,
explain briefly (one sentence) why the error occurred. There are also
some other questions below which you should answer to the best of your
ability. Note that entering each code fragment interactively requires
that you add the ``;;`` terminator to terminate input. Write your
answers as OCaml comments.

1.  ``10``

2.  ``10.``

3.  ``5 + 3 + 4``

4.  ``3.2 + 4.2``

5.  ``3 +. 4``

6.  ``3 + 4.2``

7.  ``3 +. 4.2``

8.  ``3.0 +. 4.2``

9.  ``9 - 3 - 1``

10. ``9 - (3 - 1)``

11. ``let a = 3``

12. ``let b = a + 1``

13. ``a = b``

14. ``[1; 2; 3] = [1; 2; 3]``

15. ``[1; 2; 3] == [1; 2; 3]``   Is this the same as or different from
    the previous expression? Why?

16. ``[(1, 2, 3)]``

17. ``[1, 2, 3]``   Explain why this gives the result it does. This is a
    nasty pitfall which highlights one of the less desirable features of
    OCaml’s syntax. (See the OCaml cheat sheet.)

18. ``if b > a && b < a * b then b else a``

19. ``if b > a and b < a * b then b else a``

20. ``2 + if b > a then b else a``

21. ``if b > a then b else a + 2`` Why is this different from the
    previous case?

22. ``(if b > a then b else a) + 2``

23. ``if b > a then b``   This is not a syntax error. Why does this give
    a type error? *Hint*: What does OCaml assume if the ``else`` in an
    ``if``/``then``/``else`` form is left off?


2. :sicp_10:`1.3`
-----------------

[**3**] |sp| (15 minutes)

Define a function that takes three integer numbers as arguments and
returns the sum of the squares of the two larger numbers. Call the
function you define ``sum_of_squares_of_two_largest``. You will probably
find the ``&&`` special operator to be handy.


3. :sicp_10:`1.4`
-----------------

[**3**] |sp| (15 minutes)

Our evaluation model allows you to use a function
which is a compound expression (something that evaluates to a function).
Use this observation to describe the behavior of the following function:

.. code-block:: text

   let a_plus_abs_b a b =
     (if b > 0 then (+) else (-)) a b

Write your answer in a comment. Note that surrounding an operator with
parentheses makes it into a two-argument function, so

.. code-block:: text

   (+) 2 3

is the same as:

.. code-block:: text

   2 + 3

