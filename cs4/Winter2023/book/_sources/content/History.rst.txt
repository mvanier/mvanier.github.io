.. _History:

History
=======

The history of functional programming, OCaml, and this course is described
here.  You aren't required to know any of this, but I think the history
is quite interesting (and convoluted), so if you're curious and have a few
minutes to spare, read on!


A brief history of functional programming
-----------------------------------------

The ideas which eventually turned into functional programming
date back to the 1920s and 1930s,
when many people were working on the foundations of mathematics and computation.
`Moses Schönfinkel`_ and `Haskell Curry`_
(see also `here <https://wiki.haskell.org/Haskell_Brooks_Curry>`_)
developed combinatory logic,
which (despite the name) is a model of computation
that uses very simple functions called *combinators*
which can be combined to create a full programming language. [1]_
`Alonzo Church`_ developed the `lambda calculus`_,
which can be viewed as the simplest possible programming language
and also as the simplest functional programming language. [2]_

.. note::

   **Fun fact**: Alan Turing was Alonzo Church's Ph.D. student.
   Both lambda calculus and Turing machines can express
   arbitrary computations, which is known as the `Church-Turing thesis`_.
   Nevertheless, Turing's formulation of the process of computation
   is much better known, which is why you learn about Turing machines
   in CS 21 instead of lambda calculus.

.. _Church-Turing thesis: https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis

Both Church and Curry continued to develop their systems.  In particular,
Church extended lambda calculus (now called "untyped lambda calculus")
into a typed version which is the ultimate predecessor of all typed
functional programming languages, including OCaml.

The systems of Church and Curry were purely formal systems,
since there were no computers at the time.
Once computers were developed in the 1940s and 1950s,
there was interest in using them for symbolic manipulation tasks
(as opposed to numerical computations,
which was what computers were mainly used for at the time).
One of the pioneers of this was `John McCarthy`_,
who developed the Lisp_ programming language starting around 1958.
This language had an extremely simple syntax called "S-expressions",
which are basically just lists of symbols surrounded by parentheses.
More importantly for us, Lisp was the first computer language
that had both recursion and anonymous functions
(known as "lambda expressions" in Lisp).
Therefore, Lisp can be considered to be the first real
functional programming language.
Lisp was used primarily for artificial intelligence applications
for many decades, and is still used for this.
Lisp spawned a number of variants, including Common Lisp and Scheme,
both of which are still in use today.
Later, many other functional programming languages, including
OCaml and Haskell, were developed.  These languages were notable
for introducing static type checking to functional programming,
as well as many other features.

.. _Moses Schönfinkel: https://en.wikipedia.org/wiki/Moses_Sch%C3%B6nfinkel
.. _Haskell Curry: https://en.wikipedia.org/wiki/Haskell_Curry
.. _Alonzo Church: https://en.wikipedia.org/wiki/Alonzo_Church
.. _Lambda Calculus: https://en.wikipedia.org/wiki/Lambda_calculus
.. _John McCarthy: https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)
.. _Lisp: https://en.wikipedia.org/wiki/Lisp_(programming_language)


A brief history of OCaml
------------------------

One of the applications that early artificial intelligence researchers were
interested in was using computers to prove mathematical theorems. The original
work on this topic concentrated on fully-automatic theorem proving programs.
However, the large number of choices at any point in a proof made this
intractable except for proofs in very narrow domains.  Then interest shifted to
"proof assistants", which are programs where a human user guides the computer
to a proof using "tactics", which automate routine steps. One of the earlier
proof assistants (though not the earliest) was called LCF_, which stood for
"logic for computable functions".  It was developed first at Stanford and then
at the University of Edinburgh by `Robin Milner`_ and his collaborators in the
early 1970s.  Early versions of LCF used Lisp as the "meta-language" in which
proof tactics could be written.  However, the proof assistant would sometimes
derive incorrect proofs, so the implementors invented a "typed Lisp" which they
called "ML" for "Meta-Language" which contained a type checker that wouldn't
permit the generation of incorrect proofs. [3]_
They then implemented LCF in ML.
ML was originally implemented as an interpreter written in Lisp,
but standalone compiled implementations were soon developed.
Along the way, it was eventually realized that ML was a
full-fledged programming language that could be used for any kind of
application, not just as the implementation language for proof assistants.

Interest in proof assistants spread to INRIA in France in the 1980s,
where an ML dialect called "CAML" [4]_ was developed
by Gerard Huet, Xavier Leroy, and others.
CAML went through a number of versions,
including "Caml light" and finally "Objective Caml", also known as "OCaml",
which appeared in 1996.
OCaml included object-oriented features, making it a multi-paradigm
language (functional, imperative, and object-oriented), though it is mainly
used as a functional language.  In parallel with the development of Caml
dialects, the proof assistant Coq_ was developed at INRIA, and one of the main
motivations for the development of OCaml at INRIA was to serve as the
implementation language for Coq.

.. note::

   If you are interested in proof assistants, you should take
   CS 128, which is a course on interactive theorem proving using Coq.

OCaml is currently an extremely popular language in computer science
education, especially for courses on functional programming and compilers.
OCaml has also spread beyond academia, and is now used
a lot in financial institutions such as `Jane Street Capital`_,
who have also been very active in improving the OCaml infrastructure.
OCaml has also been used for compiler development by many groups,
including Facebook (the Hack_ language) and the Rust_ developers;
both the Hack and Rust compilers were originally written in OCaml.
Other industrial users of OCaml are listed on `this page`_.
While the core language of OCaml is extremely stable,
OCaml is still under heavy development; version 5.0 of the language
has just been released, containing new support for `parallel programming`_
and an innovative `effect handling system`_.

.. _Robin Milner: https://en.wikipedia.org/wiki/Robin_Milner
.. _LCF: https://en.wikipedia.org/wiki/Logic_for_Computable_Functions
.. _Coq: https://coq.inria.fr/
.. _Jane Street Capital: https://www.janestreet.com/
.. _Hack: https://hacklang.org/
.. _this page: https://ocaml.org/industrial-users
.. _parallel programming: https://v2.ocaml.org/releases/5.0/manual/parallelism.html
.. _effect handling system: https://v2.ocaml.org/releases/5.0/manual/effects.html


A brief history of CS 4
-----------------------

In the early 2000s, Andre Dehon took over the Caltech CS 1 course and based it
on the MIT 6.001 course, which used SICP_ as the textbook and Scheme (a Lisp
dialect) as the programming language.  Mike Vanier took over this course after
a few years, first with Ben Brantley co-teaching, then by himself.  This
version of CS 1 was never broadly popular; though some students liked it a lot,
most felt that it was too difficult and abstract for a course aimed at
freshmen, many of whom had little programming experience.  In 2009, CS 1 was
completely overhauled (by Mike) to use Python as its programming language.
Mike still wanted to keep teaching the old CS 1 material, though,
so CS 4 was created.
Originally, CS 4 still used Scheme as the language and SICP_ as the textbook,
but more advanced material was soon incorporated. [5]_
After a few years, Mike got tired of using Scheme because he
found it difficult to debug due to the syntax, the lack of type checking, and the
unstructured kind of object-oriented programming that is used in many parts of
SICP_.  Mike had been programming a lot in OCaml and Haskell at that time, and
had already been giving a couple of lectures introducing OCaml at the end of
the course. In 2016, Mike switched the entire course over to OCaml.
Fortunately, most of the SICP exercises used in the course were not
Scheme-specific and worked fine in OCaml. [6]_  Unexpectedly, switching to
OCaml had the effect of raising the average grade significantly.  We think this
is because the OCaml type checker tends to refuse to pass code until it is
either correct or much closer to correct than would be the case in a
dynamically-typed language like Scheme. Since then, the course has evolved
steadily to incorporate new material and refine old material.

----

.. rubric:: Footnotes

.. [1] The Haskell functional programming language is named after Haskell Curry.

.. [2] This depends on what your definition of "simple" is.  In some ways,
   the combinatory logic systems of Schönfinkel and Curry are simpler than
   lambda calculus.

.. [3] The use of the acronym "ML" to mean "Machine Learning" is a much more
   recent development.

.. [4] The name "CAML" originally meant "Categorical Abstract Machine
   Language", which means something in the context of the original
   implementation.  However, that implementation was replaced by a different
   one, so the name "CAML" survives for historical reasons only.

.. [5] Such as the Y Combinator lecture, which is Mike's favorite lecture.

.. [6] In fact, many were significantly improved in OCaml due to OCaml's
   better facilities for type definition.
