Part D: Special topics
======================

This section has problems relating to the special topics lectures.

1. Streams
----------

[**4**] (30 minutes)

In lecture 15, we showed how to work with streams using the ``lazy``
keyword in OCaml and the ``lazy_t`` polymorphic datatype. However, we
didn’t give a definition of ``lazy_t``. Define a working version of it
here. In other words, fill in this code:

.. code-block:: ocaml

   type 'a contents = (* TODO *)
   type 'a lazy_t = 'a contents ref

Also provide a definition of a constructor and an accessor:

.. code-block:: ocaml

   let make_lazy e = (* TODO *)
   let force lz = (* TODO *)

The ``make_lazy`` function takes the place of the ``lazy`` syntax in
OCaml; it takes an argument ``e`` which is a function of type
``unit -> 'a`` and returns a value of type ``'a lazy_t``. So if you have
an expression ``<expr>`` and want to make it lazy, you would do this:

.. code-block:: ocaml

   let lazy_expr = make_lazy (fun () -> <expr>)

For instance:

.. code-block:: ocaml

   # let lz = make_lazy (fun () -> 100 * 100 * 100);;
   # force lz;;
   - : int = 1000000

When you call ``force`` on a lazy value, it evaluates the expression 
(if it hasn't already been evaluated)
and returns the resulting value, so ``force`` has type ``'a lazy_t -> 'a``.
Also, it has to somehow store the resulting value
so that it never gets recomputed again
(this is what we didn’t show you how to do in the lecture).

.. hint::

   Remember that a lazy value can exist in two forms: evaluated and
   unevaluated. Furthermore, any unevaluated lazy value can be converted to
   the evaluated form (but not vice-versa).


2. The Y combinator
-------------------

[**6**] (60 minutes)

In lecture 16, we showed how to construct the Y combinator and how it
can be used. Here are some simple (we hope) exercises involving Y. Use
this definition for Y:

.. code-block:: ocaml

   let y =
     fun f ->
       (fun z -> z (`Roll z))
       (fun (`Roll w) -> f (fun x -> w (`Roll w) x))

There are no tests for the following problems, but make sure your
functions actually work.


a. ``sum``
~~~~~~~~~~

Use the Y combinator to define a function called ``sum``
which returns the sum of a list of integers.
Make sure that ``sum`` doesn’t call itself!

.. hint::

   Define a recursive ``sum`` function. Use this as a template to define an
   ``almost_sum`` function which doesn’t use recursion. Then pass that
   function as the argument to ``y`` to recover the ``sum`` function.


b. Two-argument functions
~~~~~~~~~~~~~~~~~~~~~~~~~

Recall the definition of a linear iterative factorial function:

.. code-block:: ocaml

   let factorial n =
     let rec iter n r =
       if n = 0
         then r
         else iter (n - 1) (n * r)
     in
       iter n 1

Re-write this function by rewriting ``iter`` so that it doesn’t use
explicit recursion but does use the Y combinator. The challenge here is
that Y returns a function from one value to one value, not from two
values to one value like ``iter``. Deal with this by changing the
definition of ``iter`` (or what you are using in place of ``iter``) so
that it takes only one argument (a pair containing the numbers ``n`` and
``r``) and returns a single number. You’ll have to re-write the call to
``iter`` as well.

.. hint::

   Rewrite ``iter`` first, and only then convert it
   into a form that ``y`` can use.
   (This isn’t that hard; our solution is only 9 lines long.)
   Call the resulting factorial function ``factorial2``.

