Part C: Modules and functors
============================

In this section, you will work with OCaml modules and functors by
implementing a data structure called a *priority queue*. ("Queue" is
pronounced "kyoo".) The specific implementation you will create is
called a *leftist heap*. So let’s talk about these things now.


Priority queues
---------------

.. note::

   There is a priority queue implementation given in the OCaml manual as
   part of the module documentation. Please don’t consult that for this
   assignment (the implementations are different anyway).

A priority queue is a data structure that is ordered so that it provides
fast access to its minimum element, as defined by some ordering
relationship. Conceptually, you can think of that element as "the next
thing to be processed". It also has to have an operation which deletes
the minimum element and returns another priority queue (which would be
useful after processing that element), as well as several other
operations, which are summarized here as an OCaml module type:

.. code-block:: ocaml

   module type PRIORITY_QUEUE =
     sig
       exception Empty

       type elem      (* Abstract type of elements of queue. *)
       type t         (* Abstract type of queue. *)

       val empty      : t                (* The empty queue.         *)
       val is_empty   : t -> bool        (* Check if queue is empty. *)
       val insert     : t -> elem -> t   (* Insert item into queue.  *)
       val find_min   : t -> elem        (* Return minimum element.  *)
       val delete_min : t -> t           (* Delete minimum element.  *)
       val from_list  : elem list -> t   (* Convert list to queue.   *)
     end

Of these operations, note that the operation ``from_list`` is not
fundamental to the definition of a priority queue, but it’s useful.

.. note::

   When we refer to "queue" in this section, we always mean a priority queue,
   not a first-in/first-out data structure which is the usual meaning
   of the word "queue" in programming.  So here,
   "queue" is just short for "priority queue".

Also note that we are being loose about the words "insert" and "delete".
These operations are purely functional, so that when we say we "insert"
an element into a queue, we really mean that we create a new queue which
has the extra element in it; the original queue is unchanged. Similarly,
when we "delete" an element from a queue, we really mean that we create
a new queue without the offending element; the original queue is once
again unchanged.


Leftist heaps
~~~~~~~~~~~~~

Now that we know how our data structure is supposed to behave, the next
question is: how do we implement it? Naturally, there are lots of
choices, each of which will have different trade-offs. In this section
you’re going to implement priority queues as *leftist heaps*. This is a
data structure that has the following attributes:

- It can either be a leaf (representing an empty heap) or a node which
  contains:

  -  a stored element

  -  a non-negative integer value called its "rank"

  -  a left and right subheap, each of which is also a leftist heap

     Thus, a leftist heap is a binary tree with additional rank
     information stored in the nodes. The tree will in general **not**
     be balanced; it will usually have more elements in the left
     subtree than in the right. We say that the tree "skews to the
     left".

- The element stored at the top of the tree is smaller (more precisely,
  is no larger) than any of the elements stored beneath it in either
  subtree.

- As mentioned, each node has an integer value associated with it,
  which is called its *rank*. The rank of a node is equal to the length
  of its *right spine*, which is the number of nodes in the rightmost
  path from the node in question to an empty (leaf) node (this will
  also turn out to be the shortest path to a leaf node). Thus, a leaf
  node has rank 0, and a heap with a right subheap which is a leaf has
  rank 1. However, ranks are only stored in nodes, not in leaves.
  Having the rank stored in the nodes makes many operations much
  faster.

- The rank of any left child is required to be at least as large as the
  rank of its right sibling. This is why it’s called a "leftist" heap.

.. note::

   Be aware that a heap is *not* an ordered binary tree in the usual
   sense. In other words, it is *not* necessarily the case that all the
   elements in the left subheap are smaller than those in the right
   subheap. The only requirement is that an element in a node is smaller
   than elements in the left *and* right subheaps of that node.

The interesting feature of leftist heaps is that they support very
efficient merging of two heaps to form a combined heap. (Of course,
since we’re using purely functional code, you don’t alter the original
heaps.) Leftist heaps can be merged in :math:`\Theta(log\ N)` time,
where :math:`N` is the total number of elements in the resulting heap.

Furthermore, once the merge operation
(which, you’ll note, is not a required operation for priority queues)
is implemented, you can easily define most of the rest
of the heap operations in terms of it. Specifically, you can define the
``insert`` and ``delete_min`` operations in terms of merging, and the
other operations are then trivial to define, except for the list-to-heap
conversion routine.
That can be done easily in :math:`\Theta(N\ log(N))` time,
and with more difficulty in :math:`\Theta(N)` time.
(You’re not required to find the most efficient solution,
but it’s a good exercise.)


Merging leftist heaps
~~~~~~~~~~~~~~~~~~~~~

OK, so now we need to figure out how to merge two leftist heaps to
create a new leftist heap. The basic algorithm is quite simple:

* If either heap is empty, return the other heap.

* If the first heap’s minimum element is smaller than the second heap’s
  minimum element, make a new heap from the first heap’s minimum
  element, the first heap’s left subheap, and the result of merging the
  first heap’s right subheap with the second heap.

* Otherwise, make a new heap from the second heap’s minimum element,
  the second heap’s left subheap, and the result of merging the first
  heap with the second heap’s right subheap.

Here is how to make a new heap from a minimum element and two heaps: the
resulting heap must have:

* the given minimum element

* a rank which is the smaller of the ranks of the original heaps, plus 1

* a left subheap which is the original heap with the larger rank

* a right subheap which is the original heap with the smaller rank

This algorithm will preserve the leftist heap property in the merged
heap.

Here are the problems.


1. ``PriorityQueue`` module
---------------------------

[**6**]  (60 minutes)

Write a module ``PriorityQueue`` which implements the ``PRIORITY_QUEUE``
module type. Assume that the ``elem`` type will be ``int``. Here is a
template for your code:

.. code-block:: ocaml

   module PriorityQueue : (PRIORITY_QUEUE with type elem = int) =
     struct
       exception Empty

       type elem = int

       (*
        * Data type: either
        * -- a Leaf, or
        * -- a Node of (rank, item, left heap, right heap).
        *)
       type t = Leaf | Node of int * elem * t * t

       (* Your code goes here. *)
     end

You will need to fill in the definitions for all the module functions
(the functions whose signatures are in the ``PRIORITY_QUEUE`` module
type). You can also write additional unexported helper functions in the
module, if that will make things easier. Make sure you raise the
``Empty`` exception when trying to do invalid things |eg| finding the
minimum value in an empty queue. Don’t change the ``PRIORITY_QUEUE``
module type!

.. note::

   Based on the discussion given above, one unexported helper function
   you will definitely want to implement is the ``merge`` function.

Note that since the type ``elem`` is abstract, if you want to use a real
type as the elements of your priority queue (and it would be pretty
useless otherwise), you have to specify which type you want the
``PRIORITY_QUEUE``'s ``elem`` value to represent. (This is fairly clunky
syntax.) Also, you might ask why you can’t just make it parametric, like
a type ``'a list``. You actually can in some cases, but here we need a
type with an ordering relation, and there is no way to guarantee that
any arbitrary type will (a) be orderable at all — what if it’s a
function type? or (b) will be orderable using the same function (|eg|
the built-in ``compare`` function). So it’s better to write the code as
it’s written above. Also, this will make it easy to transform into a
functor (see below).

Here’s an interesting point to ponder: why don’t we also have to specify
what the abstract priority queue ``t`` type represents in the code
above? (You don’t have to write down the answer in your code, but if you
can’t figure this out, ask your TA.)

Use the built-in (overloaded) comparison function ``compare`` and/or the
overloaded comparison operators (``<``, ``>`` |etc|) to do whatever
comparisons may need to be done. This works because OCaml’s comparison
operators work on any type. (We’ll see a more elegant way to do this
below.)

Use your priority queue implementation to write a *heap sort* function
called ``heap_sort``. This will take a list of ``int``\s as its
argument and will

* first convert the list to a priority queue (implemented as a leftist
  heap) using the ``from_list`` function of the module

* successively remove the smallest element from the heap and "cons" it
  onto (|ie| place it onto the front of) a list until there are no more
  items in the heap

* reverse the list to get a sorted list in ascending order

This function should be defined *outside* of the ``PriorityQueue`` module,
which means that the only functions from that module you can use are the
exported ones (those whose signatures are in the ``PRIORITY_QUEUE`` module
type).


2. ``MakePriorityQueue`` functor
--------------------------------

[**4**]  (30 minutes)

As written, the code is dependent on the built-in comparison functions.
To make this more generic, let’s define some types and module types:

.. code-block:: ocaml

   (* Signature for ordered objects. *)
   module type ORDERED_TYPE =
     sig
       type t
       val compare : t -> t -> int
     end

   (* Signature for priority queues. *)
   module type PRIORITY_QUEUE =
     sig
       exception Empty

       type elem
       type t

       val empty      : t
       val is_empty   : t -> bool
       val insert     : t -> elem -> t
       val find_min   : t -> elem
       val delete_min : t -> t
       val from_list  : elem list -> t
     end

What you have to do now is generalize your priority queue implementation
into a functor that takes a module implementing the ``ORDERED_TYPE`` module
type as its argument, and produces a priority queue (implemented using a
leftist heap) which is specialized for that particular type of data. For
instance, you can define a module of ordered strings like this:

.. code-block:: ocaml

   module OrderedString =
     struct
       type t = string
       let compare x y =
         if x = y then 0 else if x < y then -1 else 1
     end

and then define your string priority queue like this:

.. code-block:: ocaml

   module StringPQ = MakePriorityQueue(OrderedString)

Here, ``MakePriorityQueue`` is in fact a functor. It takes an input
module (in this case, ``OrderedString``), and returns an output module
(in this case ``StringPQ``) which is a priority queue specialized to
work only on strings.

Once you’ve done this, redefine your heap sort function (again, outside
of the ``StringPQ`` module) using a ``StringPQ`` as the heap. Call the
new function ``heap_sort_2``. Note that this heap sort will only work on
strings.

To get you started, here is a skeleton of the code you should use for
the functor definition:

.. code-block:: ocaml

   module MakePriorityQueue (Elt : ORDERED_TYPE)
     : (PRIORITY_QUEUE with type elem = Elt.t) =
     struct
       (* Your code goes here... *)
     end

Note that again you have to specify what the type ``elem`` in the
``PRIORITY_QUEUE`` represents. Here, it better be the same type as the
type ``t`` in the ``ORDERED_TYPE`` argument (which we have called ``Elt``).

This code will be nearly identical to the code above. All you are really
doing is repackaging that code into a functor.
