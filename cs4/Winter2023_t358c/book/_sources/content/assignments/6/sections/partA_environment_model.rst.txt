Part A: The environment model
=============================

In this section, we will explore the environment model described in
lecture 13.


1. ``factorial``
----------------

[**8**]  (60 minutes)

Adapted from :sicp_21:`3.9`.

Consider this code:

.. code-block:: ocaml

   let factorial n =
     let rec iter m r =
       if m = 0
         then r
         else iter (m - 1) (r * m)
     in iter n 1
   in
     factorial 3

Write a textual description of the environment (all frames and
functions) created while evaluating this code according to the
environment model. See the "OCaml notes" section for guidelines on how
this is to be done. *Note:* This is a text-based description only! Write
your answer as an OCaml comment.

To give you a head start, here is the initial environment:

.. code-block:: ocaml

   (*

     FRAME 0 (initial environment)
       parent: none
       bindings:
         - : [primitive function -]
         * : [primitive function *]

   *)

Note that you do *not* have to write out a detailed evaluation of the
code (though you can if you want), just the frames and functions
generated in its evaluation. Please indicate which code created each
frame/function in parentheses beside the FRAME/FUNCTION name and number.
You can use ellipses (``...``) if the code is too long to comfortably
fit on the line. You can also refer to previously-defined functions as
|eg| ``FUNCTION 0`` instead of copying the code; see the "OCaml notes"
section for examples.

Note also that you don’t have to desugar functions of multiple arguments
into their curried version (``fun x y -> ...`` to
``fun x -> fun y -> ...``). Similarly, when applying a multi-argument
function to its arguments you can create a single frame with bindings
for all function arguments.

When writing out function descriptions, include the enclosing
environment (``env``) or ``none`` if it’s the initial enviroment, the
formal parameter(s) (``params``) and the body of the function
(``body``). If the body is too long to fit on the line, use ellipses
(``...``) to shorten it.

Other notes:

* There are exactly two functions and eight frames in the final
  solution (including FRAME 0 shown above). Include all temporary
  frames.

* Make sure to desugar function definitions to their corresponding
  ``fun`` forms. Other than that, don’t desugar ``let`` expressions to
  ``fun`` expressions. Especially don’t do this with ``let rec``
  expressions, because it isn’t valid!

* The final result should be 6. |smile| You don’t have to write this out,
  though.


2. Recursion using ``ref`` cells
--------------------------------

[**2**] (20 minutes)

Ben Bitfiddle doesn’t like environment model rule 4, which says how to
evaluate a ``let rec`` expression. "It’s too complicated!" he says. "I
can achieve the exact same thing using ``let`` and ``ref`` cells." He
points out a typical piece of OCaml code:

.. code-block:: ocaml

   let rec factorial n =
     if n = 0 then 1 else n * factorial (n - 1)

Then he starts to redo it his way to eliminate the ``let rec``:

.. code-block:: ocaml

   let factorial =
     let f = ref (fun _ -> 0) in

Complete Ben’s code to make a working ``factorial`` function without
using ``let rec``. You only have to add a few more lines. *Hint:*
Consider the original factorial function where the recursive call is
replaced by something else. *Hint 2:* This is actually similar to the
way we described how ``let rec`` works in the environment model, with
the ref cell initially holding the dummy value.
The value ``fun _ -> 0`` is there so that the code type checks;
that function will never be applied.

Restrictions: you may not use ``for`` or ``while`` loops or any
imperative features other than references (``ref`` and the ``:=`` and
``!`` operators) and you *must* use the ``f`` reference.

The solution is only a few lines long.

