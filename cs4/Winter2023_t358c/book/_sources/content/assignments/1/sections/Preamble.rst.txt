Preamble
========

Things you should read
----------------------

As this is the first real assignment, we would like to remind you of
some documents on the course Canvas page that you should read (or at
least skim) before starting your assignment:

*  The :doc:`course collaboration policies </content/admin/Collaboration_policies>`.

   This document describes what kind of collaboration are allowed on
   assignments, and what isn’t allowed.

   .. note::

      It’s easy to just assume you won’t do anything wrong, but
      **please** read this page, because if you don’t, and you’re
      involved in some kind of collaboration that isn’t allowed, you
      could end up getting called before the Caltech Board of Control
      (BoC), which is not a pleasant experience.

*  The :doc:`OCaml cheat sheet </content/readings/ocaml_cheat_sheet>`.

   The cheat sheet describes a number of possibly confusing aspects of
   OCaml syntax. If you discover some weird behavior of OCaml you don’t
   understand, the cheat sheet is the first place you should look. You
   don’t need to read all of it now, but take a look and come back to it
   as needed.

Due date
--------

This assignment is due on |dueday|, |lab1due|, at |duetime|.


Coverage
--------

This assignment covers the material up to lecture 4, corresponding to
section 1.2.3 of SICP_. Some material from recitation 1 is also covered.


What to hand in
---------------

All of your code should be saved to a file named ``lab1.ml``. This file
should be submitted to CodePost as ``Assignment 1``. Please indicate in
a comment what problem any piece of code in your submission refers to.
For instance:

.. code-block:: text

   (* A.2 *)
   ...

refers to problem 2 of section A.


Supplied files
--------------

We are supplying you with this file:

* ``lab1.mli``

You should download it from the course Canvas site.
Its use will be described below.


Grading scheme
--------------

Each section will be given a grade out of 10 marks.
The value of each problem in marks will be written in bold text
at the beginning of the description.
The grade of the entire assignment
is the *average* of the section grades. [1]_

.. note::

   To be pedantic, the section grades will be averaged
   and the result will be the average, rounded to the nearest half point.
   The half point is because CodePost can only handle grades down to
   half points.

   Also, on CodePost, each section is given a grade out of 10
   but the grades are added to give a final "CodePost grade".
   Your real grade is this grade divided by the number of sections.
   So if there are three sections, each worth 10 points,
   and you get everything right, you get a CodePost grade of 30
   but an assignment grade of 30/3 = 10.
   CodePost can't display this average but we will note it in the comments.


Time hints
----------

In addition to the point value of each problem,
each problem comes with a time hint as a number in bold text at the
beginning of the description. This is our estimate of the *maximum* time
that the problem should take you to solve (in minutes).  The format is
as follows:

[**2**] |sp| (15 minutes)

means that a problem is worth 2 marks and should take no more than 15 minutes.

If you find that a problem takes significantly longer than the time estimate,
you should let us know so we can better calibrate the assignments.
You should also talk to the TAs/intructor to find out
if the problem is that you just don’t understand a concept,
or that the problem really is unreasonably hard or long.

----

.. rubric:: Footnotes

.. [1] In the past, assignments were graded by using the minimum of the
   section grades.  We don't do that any more.
