OCaml notes
===========

Testing
-------

For this assignment, we are supplying you with these support files:

#. a ``.mli`` OCaml interface file (``lab4.mli``)
#. a test script (``tests_lab4.ml``)
#. a ``Makefile``

These files are all available on the course Canvas site
in a single zip file called ``lab4.zip``.  Download this file and
unzip it:

.. code-block:: text

   $ unzip lab4.zip

This will create a ``lab4`` directory with the files inside it.
You should not change these files, and you should not submit them as part of
your assignment submission.  You should create, edit and compile the file
``lab4.ml`` (which you will be handing in) in the same directory.

Compile and test the code the same way you did in previous assignments.
Briefly:

.. code-block:: text

  $ make

compiles the code and runs the tests.
If you just want to compile the code to check for type errors,
type:

.. code-block:: text

   $ make compile

To remove all the generated files,
including log files and all compiled OCaml files, type:

.. code-block:: text

   $ make clean

Of course, you can also compile your code from inside the OCaml
interpreter using the ``#use`` directive, as we’ve previously described.
This will check that the code compiles, but it won't check
that it conforms to the ``.mli`` file, and it won't run the tests.


Records and field punning
-------------------------

We will be using OCaml records extensively in this assignment, so this
is a good time to introduce a nifty feature (which we also mentioned in
the recitation lectures) which makes writing code that uses records much
easier. This feature is called *field punning* for reasons that will
become clear shortly.

Consider a simple record datatype for complex numbers:

.. code-block:: ocaml

   type complex = { real : float; imag : float }

Writing code that pattern-matches against a complex number can be a bit
annoying:

.. code-block:: ocaml

   let magnitude { real = r; imag = i } = sqrt (r *. r +. i *. i)

What’s annoying about this is that we have to come up with new names for
the real and imaginary part of the complex number. Of course, we could
do it this way without pattern matching:

.. code-block:: ocaml

   let magnitude c = sqrt (c.real *. c.real +. c.imag *. c.imag)

because records support a "dot syntax" to access their components (like
Python objects). However, this isn’t really an improvement. Yet another
way to write this would be as follows:

.. code-block:: ocaml

   let magnitude { real = real; imag = imag } = sqrt (real *. real +. imag *. imag)

The right-hand side of this definition looks pretty good, but the
left-hand side is weird. It’s legal, because in OCaml you can use a
field name as a variable name (they exist in different *namespaces*, to
be technical), but it’s ugly. What field punning allows you to do is to
write this code like this:

.. code-block:: ocaml

   let magnitude { real; imag } = sqrt (real *. real +. imag *. imag)

What this does is use the (variable) name ``real`` as the value of the
(field) name ``real``, and similarly for ``imag``. This is a nice way to
make functions which use records and which pattern-match on those
records easier to write and easier to read.

You can also use field punning when creating values of record types:

.. code-block:: ocaml

   # let c =
       let real = 1.0 in
       let imag = 3.4 in
         { real; imag } ;;
   - : complex = {real = 1.; imag = 3.4}

This is a bit more confusing to read, but it works fine. Remember: field
names are in a different namespace than variable names. So it’s even
legal to do this:

.. code-block:: ocaml

   type complex = { real : float; imag : float }
   let real = 42
   let imag = "this is wacky"

Here, the variables ``real`` and ``imag`` aren’t even floats, though the
corresponding field names do refer to floats.

You don’t have to use field punning in this (or any other) assignment,
but we recommend it.
A good reference on OCaml records is `this chapter`_ from `Real World OCaml`_.
The `OCaml manual`_ also has a section on records in the first chapter
("The core language").

.. _this chapter: https://dev.realworldocaml.org/records.html


Records and pattern matching with missing fields
------------------------------------------------

When pattern-matching on records, you don't have to include all the
record fields if you don't want to.  For instance:

.. code-block:: ocaml

   type complex = { real : float; imag : float }
   let real_of_complex { real } = real

This compiles and runs fine.  But if you have certain warnings enabled
(which happens when you compile the code using our ``Makefile``),
you'll get a warning:

.. code-block:: text

   Warning 9 [missing-record-field-pattern]: the following labels are not bound in this record pattern:
   imag
   Either bind these labels explicitly or add '; _' to the pattern.

**You should never ignore warnings!  Always fix the cause of the warning.**
In this case, the fix is as simple as changing the pattern by adding
``; _`` to the end of the pattern, as the error message indicated:

.. code-block:: ocaml

   let real_of_complex { real; _ } = real

Now, when you compile this code, there will be no warning.


Names and the single quote character
------------------------------------

Unlike most programming languages,
OCaml allows identifier names to contain the single quote character (``'``)
in any position except the first position.
Typically, we use the single quote character at the end of names,
and sometimes we use more than one single quote character.
These are often used to refer to a name
which is related in some way to another name but distinct.
The single quote character used this way is often called a "prime" character,
which comes from its use in mathematics.
So the name ``foo'`` would be pronounced "foo-prime".


Polymorphic variants
--------------------

Problem B.1 uses polymorphic variants, which are similar to algebraic
datatypes except that you don’t have to declare the type ahead of time.
Polymorphic variants were discussed in lecture 10, and are discussed in
the `OCaml manual`_ (chapter 5) and in `Real World OCaml`_ (chapter 6).
