Part C: Miniproject: Algebraic expressions
==========================================

(Loosely "derived" from :sicp_16:`2.56`.)

One of the best things about OCaml is how easy it is to express
complicated data structures using algebraic datatypes. We will use this
facility to represent algebraic expressions (real algebra, like you
learned in high school) and perform interesting tasks on them.

We will use the type ``expr`` to represent algebraic expressions. Its
definition is:

.. code-block:: ocaml

   type expr =
     | Int of int           (* constant *)
     | Var of string        (* variable *)
     | Add of expr * expr   (* expr1 + expr2 *)
     | Mul of expr * expr   (* expr1 * expr2 *)
     | Pow of expr * int    (* expr^n *)

There is one non-structural constraint that we will impose on this type:
the exponent in a ``Pow`` expression must be a non-negative integer.

Clearly, expressions in this type can’t represent all possible algebraic
expressions, but they can represent a lot of cases of interest (|eg|
polynomials with arbitrary numbers of variables), and it would be easy
to extend this type to deal with more complex kinds of algebraic
expressions.

It’s possible to write a parser from algebraic expressions written in
the usual mathematical notation to this datatype, but we won’t do that
here. Instead, we will directly use the datatype constructors to build
our expressions (we’re not worrying about abstraction here either). Some
example expressions written in this form would be:

.. code-block:: ocaml

   42 --> Int 42

   x --> Var "x"

   x * y --> Mul (Var "x", Var "y")

   (x - 1) * (y + x) --> Mul (Add (Var "x", Int (-1)), Add (Var "y", Var "x"))

   x**3 + 6*x*y - 1 -->
     Add (Add (Pow (Var "x", 3), Mul (Int 6, Mul (Var "x", Var "y"))), Int (-1))

Once we have an algebraic expression in this form, we can do a number of
interesting manipulations on it. We will do two of these in this
section.


1. Simplification
-----------------

[**5**] (30 minutes)

Many algebraic expressions can be converted into equivalent but simpler
algebraic expressions. This process is called "simplifying" the
algebraic expression. Simplification is a difficult problem in general,
because there can be many mutually-exclusive definitions of what
"simpler" means. However, some simplifications are universally agreed
upon. For instance:

* An expression which adds two integers can be replaced by a single
  integer (the sum of the two integers).

* An expression which multiplies two integers can be replaced by a
  single integer (the product of the two integers).

* An expression which takes an integer to the power of another integer
  can be replaced by a single integer (the power of the two integers).

* An expression which adds zero to another expression E is just the
  expression E.

* An expression which multiplies an expression E by 0 is just 0.

* An expression which multiplies an expression E by 1 is just E.

* An expression which raises an expression E to the power of 0 is just
  1 (we are ignoring the tricky case of 0 to the power of 0 here).

* An expression which raises an expression E to the power of 1 is just
  E.

Write a function called ``simplify1`` which does all of these
simplifications on an algebraic expression represented as a value of the
type ``expr``. Make sure that you consider the cases where |eg| 0 is
added to an expression from the left or from the right, and similarly
for other simplifications. Also, if an expression can’t itself be
simplified, try to recursively simplify its subexpressions.

One thing that makes simplification difficult is that simplifying an
expression can yield another expression which can itself be simplified.
The best way to handle this is to repeat the simplification process
until no more simplification can be performed. We are providing you with
the following function ``simplify`` which will call your ``simplify1``
function to simplify an expression until no more of the simplifications
described above are possible:

.. code-block:: ocaml

   let rec simplify expr =
     let e = simplify1 expr in
       if expr = e
         then expr
         else simplify e

Technically, we say that ``simplify`` computes the *fixpoint* of
``simplify1``. This makes the definition of ``simplify1`` simpler. For
instance, if you simplify ``E + 0`` to just ``E``, you don’t then have
to recurse on ``E`` in the ``simplify1`` function, because the
expression ``E`` will be simplified again by the ``simplify`` function
until it can’t be simplified any more. On the other hand, if you have an
expression ``E + F`` which can’t be simplified by any of the rules
above, you have to recursively simplify the parts (``E`` and ``F``),
because if you don’t, calling ``simplify1`` on this expression again
won’t do anything.

Here are some expressions to test your simplifier. These represent the
results after ``simplify`` has been called (not just ``simplify1``).

.. code-block:: ocaml

   Int 42 --> Int 42
   Var "x" --> Var "x"
   Add (Int 32, Int 41) --> Int 73
   Add (Add (Int 1, Int 2), Add (Int 3, Int 4)) --> Int 10
   Add (Mul (Int 1, Int 2), Mul (Int 3, Int 4)) --> Int 14
   Mul (Mul (Int 1, Int 2), Mul (Int 3, Int 4)) --> Int 24
   Mul (Add (Int 1, Int 2), Mul (Int 3, Int 4)) --> Int 36
   Pow (Int 0, 0) --> Int 1
   Pow (Int 10, 2) --> Int 100
   Pow (Add (Int 1, Int 2), 2) --> Int 9

   Add (Var "x", Int 0) --> Var "x"
   Add (Int 0, Var "x") --> Var "x"
   Mul (Int 0, Var "y") --> Int 0
   Mul (Var "y", Int 0) --> Int 0
   Mul (Int 1, Var "z") --> Var "z"
   Mul (Var "z", Int 1) --> Var "z"
   Pow (Var "x", 0) --> Int 1
   Pow (Var "x", 1) --> Var "x"

   Pow (Add (Var "x", Int 0), 1) --> Var "x"
   Add (Add (Var "x", Int 0), Mul (Var "y", Int 0)) --> Var "x"


2. Differentiation
------------------

[**5**] (20 minutes)

Another fun thing you can do with algebraic expressions represented
programmatically is to symbolically differentiate them (|ie| compute
their derivatives with respect to some variable). Specifically, you need
to implement the following differentiation rules:

#. Differentiating any constant gives zero.

#. Differentiating a variable by the same variable gives 1; for a
   different variable it gives zero.

#. Differentiating a sum by a variable is done by differentiating the
   components of the sum separately and then adding them up.

#. Differentiating a product by a variable uses the `product rule`_:
   the derivative of
   :math:`e_1 \times e_2` by :math:`x` is
   :math:`\frac{d}{dx} e_1 \times e_2 + e_1 \times \frac{d}{dx} e_2`.

#. Differentiating an expression raised to a (positive) integer power
   uses the `power rule`_: the derivative of
   :math:`e^n` by :math:`x` is
   :math:`n \times e^{n-1} \times \frac{d}{dx} e`.

.. _product rule: https://en.wikipedia.org/wiki/Product_rule
.. _power rule: https://en.wikipedia.org/wiki/Power_rule

Write a function called ``deriv`` which implements all of these rules.
It’s beneficial if the expression to be differentiated is simplified
before and after computing the derivative, so use this wrapper function
when testing your function:

.. code-block:: ocaml

   let derivative var expr =
     let e = simplify expr in
     let d = deriv var e in
       simplify d

.. container:: formalpara-title

  **Examples**

.. code-block:: ocaml

   derivative "x" (Int 10) --> Int 0
   derivative "x" (Var "x") --> Int 1
   derivative "x" (Var "y") --> Int 0
   derivative "x" (Add (Var "x", Var "x")) --> Int 2
   derivative "x" (Add (Add (Var "x", Var "x"), Var "x")) --> Int 3
   derivative "x" (Mul (Var "x", Int 42)) --> Int 42
   derivative "x" (Mul (Var "x", Var "y")) --> Var "y"
   derivative "z" (Mul (Var "x", Var "y")) --> Int 0
   derivative "x" (Mul (Pow (Var "x", 2), Mul (Int 3, Var "x"))) -->
              Add (Mul (Mul (Int 2, Var "x"), Mul (Int 3, Var "x")),
                   Mul (Pow (Var "x", 2), Int 3))
   derivative "x" (Pow (Var "y", 1)) --> Int 0
   derivative "x" (Pow (Var "x", 1)) --> Int 1
   derivative "x" (Pow (Var "x", 2)) --> Mul ((Int 2), (Var "x"))
   derivative "x" (Pow (Mul (Int 3, Var "x"), 3)) -->
              Mul
               (Mul
                 (Int 3,
                   Pow (Mul (Int 3, Var "x"), 2)),
                 Int 3)
   derivative "x" (Add (Mul (Int 4, Pow (Var "x", 3)),
                        Mul (Int 6, Pow (Var "x", 2)))) -->
              Add (Mul (Int 4, Mul (Int 3, Pow (Var "x", 2))),
                   Mul (Int 6, Mul (Int 2, Var "x")))

If your code produces these results, but with some of the terms
rearranged (|eg| ``Mul (Var "x", Int 2)`` instead of
``Mul (Int 2, Var "x")``, we’ll accept it. However, the results should
be equivalent. *Note*: the test script may fail on correct answers in
this case; don’t assume that there is a bug! Instead, try the failing
examples interactively and see if your result is reasonable.

Our solution is less than ten lines long.
