OCaml notes
===========

Testing
-------

For this assignment, we are supplying you with these support files:

#. a ``.mli`` OCaml interface file (``lab3.mli``)
#. a test script (``tests_lab3.ml``)
#. a ``Makefile``

These files are all available on the course Canvas site
in a single zip file called ``lab3.zip``.  Download this file and
unzip it:

.. code-block:: text

   $ unzip lab3.zip

This will create a ``lab3`` directory with the files inside it.
You should not change these files, and you should not submit them as part of
your assignment submission.  You should create and edit the file
``lab3.ml`` (which you will be handing in) in the same directory.

Once your assignment is done, you should compile it and check that it
conforms to the interface file by entering this command:

.. code-block:: text

  $ make compile

To run the test script, type this *after* compiling the code
with ``make compile``:

.. code-block:: text

  $ make test

This will compile the ``tests_lab3.ml`` file (which contains the unit
tests) and output an executable program called ``tests_lab3``. Then it
will run that program and report all test failures.

If you want to compile the code and immediately run the test script
(useful during development/debugging), type:

.. code-block:: text

  $ make all

or just type:

.. code-block:: text

  $ make

which does the same thing.  This is equivalent to typing ``make compile``
followed by ``make test``.

Running the tests generates some log files; to get rid of them (as well
as all compiled OCaml files), type:

.. code-block:: text

  $ make clean


OCaml documentation
-------------------

The OCaml library documentation is located `here <https://v2.ocaml.org/api/>`.
(You should bookmark this page.)
For this assignment, the documentation on the ``List`` library
will be extremely useful.


Signalling errors
-----------------

We will soon start to explore exception handling in OCaml, but in the
meantime, if at any time you need to signal an error in a function (for
instance, if the function received an invalid input), you can use the
``invalid_arg`` and ``failwith`` functions. They both take a single
string as their only argument, and raise an exception which uses that
string as an error message. The difference is that ``invalid_arg``
raises an ``Invalid_argument`` error (which is most appropriate if a
function received an invalid argument), and ``failwith`` raises a
``Failure`` exception (which is more appropriate for other situations).
For instance:

.. code-block:: ocaml

  # invalid_arg "argument should be > 0" ;;
  Exception: Invalid_argument "argument should be > 0".
  # raise (Invalid_argument "argument should be > 0") ;;  (* same thing *)
  Exception: Invalid_argument "argument should be > 0".
  # failwith "everything is messed up for no good reason!" ;;
  Exception: Failure "everything is messed up for no good reason!".
  # raise (Failure "everything is messed up for no good reason!") ;;  (* same thing *)
  Exception: Failure "everything is messed up for no good reason!".

As you can see, ``invalid_arg`` and ``failwith`` are just functions that
raise particular exceptions.


The ``function`` keyword
------------------------

In OCaml code, it’s extremely common to see this pattern:

.. code-block:: ocaml

  let f n =
    match n with
      | 0 -> 1
      | n' -> n' + 1

In other words, you are defining a function with only one argument, and
you are immediately pattern-matching on that argument. This is so common
that there is a shorthand way of writing this:

.. code-block:: ocaml

  let f = function
    | 0 -> 1
    | n' -> n' + 1   (* we could have used n here too *)

Note that ``function`` is not the same thing as ``fun``! ``function``
just allows you to leave off the last argument of the function and
instead pattern-match on it. ``fun`` can be used with any number of
arguments, and doesn’t automatically define a pattern match (though you
can add a ``match`` statement inside the ``fun``, of course).

Note also that ``function`` can be used with a functions of more than
one argument. For instance, this (not very useful) function:

.. code-block:: ocaml

  let f x y =
    match y with
      | 0 -> x + n
      | n -> x + n * n

could be written like this:

.. code-block:: ocaml

  let f x = function
    | 0 -> x + n
    | n -> x + n * n

This is harder to read, but the ``function`` keyword takes the place of
the ``y`` argument and the ``match`` expression.

There are some cases where you can instantly pattern match on the
arguments of a ``fun`` definition (or even the arguments of a function
which doesn’t use ``fun``) if the arguments have only one kind of
structure you can pattern match on. For instance:

.. code-block:: ocaml

  let sum_of_pair = fun (x, y) -> x + y
  (* Or equivalently: let sum_of_pair (x, y) = x + y *)

defines a function ``sum_of_pair`` which takes a 2-tuple of ``int``\ s
as its only argument and immediately pattern matches on it to extract
the two components. This is more convenient than having to write a
trivial ``match`` expression in such cases.

Using ``function`` where appropriate can make your code more concise and
easier to read, especially when the function has only one argument.


Terminology: "cons" and "append"
--------------------------------

Sometimes, we will refer to the act of adding an item to the front of a
list using the ``::`` constructor as "cons-ing" the item to the front of
the list. This terminology comes from the Scheme programming language
(which borrowed it from the even older Lisp language), where the closest
equivalent to ``::`` is a function called ``cons``. Even though CS 4
doesn’t use Scheme (unlike SICP)  [1]_, we will use this term because
there is no suitable replacement. This term is also commonly used in the
functional programming literature for a variety of languages, whether
they have a ``cons`` function or not.

Similarly, we will refer to the adding of combining two lists together
to form a single list using the ``@`` operator as "appending" the two
lists. This is standard terminology.

----

.. rubric:: Footnotes

.. [1] Long ago, CS 4 did use Scheme as the programming language.

