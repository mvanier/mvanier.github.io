OCaml notes
===========

Packages needed
---------------

For this assignment, you’ll need to have the following ``opam`` packages
installed:

* ``ocamlfind`` (various compilation utilities)
* ``ounit2`` (unit testing)
* ``num`` (arbitrary-precision integer/rational number arithmetic)

``ocamlfind`` should already be installed if you followed the
instructions in assignment 0.
Install the other packages using ``opam`` as follows:

.. code-block:: text

  $ opam update
  $ opam install ounit2 num

As you can see, you can install multiple packages using one ``opam`` command.
Type this:

.. code-block:: text

  $ opam list

after installation and verify that the 
``ocamlfind``, ``ounit2``, and ``num`` packages are installed.
If not, consult with a TA or the instructor.


Testing
-------

.. note::

   In what follows, we're assuming that you are editing and running
   your code in a Unix-like environment
   (MacOS X, Linux, or Windows with WSL).
   If you aren't (|eg| if you are running Windows and are using
   Powershell instead of the WSL ``bash`` shell),
   things will not work correctly.

   Note that you can easily run WSL shells from inside Visual Studio Code,
   and this is recommended if you're using Windows.

   See a TA if you are having problems getting set up.
   (Also review assignment 0, which contains detailed instructions
   on how to get set up.)

For this assignment, we are supplying you with these support files:

#. An OCaml interface file: ``lab2.mli``
#. a test script: ``tests_lab2.ml``
#. a ``Makefile`` to automate compilation.

These files are all available on the course Canvas site
in a single zip file called ``lab2.zip``.  Download this file and
unzip it:

.. code-block:: text

   $ unzip lab2.zip

This will create a ``lab2`` directory with the files inside it.
You should not change these files, and you should not submit them as part of
your assignment submission.  You should create and edit the file
``lab2.ml`` (which you will be handing in) in the same directory.

In order to run the test script, you will need to use the ``ounit2``
unit testing libraries, which you should have installed (see above).
``ounit2`` is a set of libraries which make it easy to write unit tests
for OCaml code (sort of like ``pytest`` for Python).

.. note::

   The term *library* is vague.  The technical terms are
   *package* (used mainly by ``opam``) and *module*
   (used by OCaml itself).  We'll often use the word "library"
   informally to refer to the set of modules in a package.

Once your assignment is done, you should compile it and check that it
conforms to the interface file by entering this command:

.. code-block:: text

  $ make compile

Of course, you can also compile your code from inside the ``utop`` OCaml
interpreter using the ``#use`` directive. Using ``#use`` is recommended
while developing code to check that the code has no type errors.
Using the ``make`` command is useful when the code is finished to make
sure that all your functions, types |etc| have the correct type
signatures (which they should, if you have been following the
directions). Note that it’s possible to write a function that type
checks but doesn’t have the type we want it to have; that’s why using
``make`` is important. The type signatures we expect are in the
``lab2.mli`` interface file.

Finally, to run the test script, type this *after* compiling the code
with ``make compile``:

.. code-block:: text

  $ make test

This will compile the ``tests_lab2.ml`` file (which contains the unit
tests) and output an executable program called ``tests_lab2``. Then it
will run that program and report all test failures. If the test program
doesn’t compile, you probably haven’t installed the ``ounit2`` library;
see above. If you did and it still doesn’t work, ask a TA or the
instructor for help.

If you want to compile the code and immediately run the test script
(useful during development/debugging), type:

.. code-block:: text

  $ make all

or just type:

.. code-block:: text

  $ make

which does the same thing.  This is equivalent to typing ``make compile``
followed by ``make test``.

Running the tests generates some log files; to get rid of them (as well
as all compiled OCaml files), type:

.. code-block:: text

  $ make clean

It’s worthwhile taking a look at the code in the ``tests_lab2.ml`` file,
even though you don’t have to change it. Most of the tests are very
straightforward; they use a function called ``assert_equal`` to test
that a particular function call gives a particular result. There are
some interesting operators in the file (such as ``>:::`` and ``>::``)
which are defined in the ``ounit2`` libraries; one of the cool things
about OCaml is that you can define new operators!

Finally, be aware that the test scripts are in no way exhaustive! Some
functions are just inherently hard to test, or else hard to test in a
way that wouldn’t give away the answer to a student who looked at the
test script code. We recommend that you experiment with the code on your
own as well (using the ``utop`` interactive interpreter)
in addition to running the test script.

.. warning::

   Don’t assume that just because your code passes all the tests
   that everything is perfect!
   It's necessary but not sufficient, as the math folks like to say.


Compiler warnings
^^^^^^^^^^^^^^^^^

The ``Makefile`` commands to compile OCaml code turn on most of
the OCaml compiler warning options,
even ones that are normally turned off.
Therefore, you might see some warnings when compiling your code
that you don't see when loading it into the interpreter.
Compiling your code shouldn't give rise to any warnings,
so if there are any, fix them.
If you don't understand what a compiler warning means, ask us!

A list of compiler warnings is on `this page
<https://v2.ocaml.org/manual/toplevel.html>`_;
scroll down to find it (under the ``-w`` command-line option).


Using libraries in OCaml
------------------------

Some of the problems below require the use of arbitrary-precision
integers and rational numbers. The easiest way to get this in OCaml is
by using the ``Num`` library. [1]_ Here we will show you how to use
OCaml libraries in two different ways: in the ``utop`` interactive interpreter
(useful for debugging and testing code) and while compiling code. We’ll
use the ``Num`` library as an example, but the information will apply to
any OCaml library.


In the ``utop`` interactive interpreter
---------------------------------------

The most basic way to use an OCaml library inside ``utop``
is to use the ``#load`` command. This requires that you know
the full name of the compiled library file. This means that you have to
enter the following commands before using the ``Num`` library
interactively:

.. code-block:: text

  # #load "nums.cma";;
  # open Num;;

(In all the interactive OCaml examples, the first ``#`` is the
interactive prompt that you shouldn’t type.)

Here, we have to know that the library file is called ``"nums.cma"``,
which is a bit annoying. The line ``# open Num;;`` brings all the
contents of the ``Num`` library into the top-level namespace, so you
don’t have to use the ``Num`` prefix when using any of the functions in
the ``Num`` library. (This is like entering ``from Num import *`` in
Python.)

If the library file is in a non-standard location, it’s even worse; you
have to add this line before the ``#load`` line:

.. code-block:: text

  #directory /path/to/the/library/directory

(where you should substitute the real path for
``/path/to/the/library/directory``) or else (better) start ``utop``
with the ``-I`` argument:

.. code-block:: text

  $ utop -I /path/to/the/library/directory

Either way, it’s a nuisance.

Fortunately, the ``utop`` interactive interpreter
supports a much simpler way of loading libraries.
(Internally, it uses the ``ocamlfind`` library to do this,
but you don't need to know exactly how this works.)
All you need to do is type the following commands inside ``utop``:

.. code-block:: text

  # #require "num";;
  # open Num;;

Now you can use all the functions in the ``Num`` module
without having to qualify them with the ``Num.`` prefix.

We’d like to reiterate here that all the ``#``-commands
like ``#use``, ``#require`` |etc| are *not* part of the OCaml language
but are specific to the interactive interpreter.
Please do not use these commands
in compiled OCaml code (|ie| ``.ml`` and ``.mli`` files)!

For the rest of this course we will almost always use ``#require``
instead of ``#load`` to load libraries into ``utop``.


In compiled code
----------------

If you want to compile an executable program that uses the ``Num`` library,
there are three ways to do it:
the hard way, the easy way, and the automatic way.

The hard way is to specify the library information explicitly when you compile
your code. For instance, if you have a file ``"myprog.ml"`` that uses the
``Num`` library, you can compile it like this:

.. code-block:: text

  $ ocamlc nums.cma myprog.mli myprog.ml -o myprog

Here, ``ocamlc`` is the name of the OCaml compiler program. [2]_

Note again that you have to specify the library name in full. If the
directory where ``nums.cma`` is located is not a standard location
(which it probably isn’t), you would additionally have to specify the
directory with the ``-I`` option, |eg|:

.. code-block:: text

  $ ocamlc -I /path/to/the/library/directory nums.cma myprog.mli myprog.ml -o myprog

Clearly, this is a pain, and the easy way to do
this involves using the ``ocamlfind`` package.
In this case we will use the ``ocamlfind`` program
(which is part of the ``ocamlfind`` package;
don’t confuse the two distinct uses of ``ocamlfind``):

.. code-block:: text

  $ ocamlfind ocamlc -package num myprog.mli myprog.ml -o myprog -linkpkg

You can also use ``ocamlfind`` for compiling non-executables (|eg|
object code files or libraries); in that case you leave off the
``-linkpkg`` argument and adjust the ``ocamlc`` arguments as necessary.
For instance, if we were compiling a library ``mylib.ml`` that used the
``Num`` library we would compile it like this:

.. code-block:: text

  $ ocamlfind ocamlc -c  -package num mylib.mli mylib.ml

We will be using ``ocamlfind`` for compiling code which uses libraries
from now on.

Since this is still kind of annoying, we automate this by putting
these kinds of commands in a ``Makefile`` that we will supply to you.
Then, in order to compile your program, you will just have to type:

.. code-block:: text

   $ make

as previously discussed.

For more complicated programs involving multiple files of OCaml code,
the best approach is to use the Dune_ compilation manager.
We'll learn more about Dune in later assignments.

.. _Dune: https://dune.readthedocs.io/en/stable/


Using the ``Num`` library
-------------------------

The ``Num`` library defines a data type called ``num`` which can
represent arbitrarily-large integers and rational numbers composed of
arbitrarily-large integers. The library documentation is
`here <https://ocaml.org/releases/4.05/htmlman/libref/Num.html>`__.

The ``num`` type is abstract, so you have to convert |eg| integers to and from
``num``\ s in order to use them. To convert an integer to a ``num``, use the
``int_of_num`` function and to convert back use the ``num_of_int`` function.
The ``string_of_num`` function converts a ``num`` to a string, while
``float_of_num`` converts a ``num`` to a floating-point number. The numeric
operators in the ``Num`` library all have a ``/`` suffix, so instead of ``+ - *
/`` |etc| we have ``+/ -/ */ //`` |etc| This is analogous to floating-point
numbers which use ``+. -. *. /.`` |etc| It’s not terribly pleasant to use, but
it works.

There are also ``num``-specific relational operators (``</``, ``<=/``,
``>/``, |etc|). You should use these on ``num``\ s instead of the
(overloaded) built-in ones (``<``, ``<=``, ``>``, |etc|) because the
overloaded ones won’t always work properly on ``num``\ s. This includes
the equality operators, which for ``num``\ s are ``=/`` and ``<>/``.

Here are some examples of the ``Num`` library in use in the interactive
interpreter:

.. code-block:: text

  $ utop
  # #require "num";;
  # open Num;;
  # let n1 = num_of_int 42;;
  val n1 : Num.num = <num 42>
  # let n2 = num_of_int 57;;
  val n2 : Num.num = <num 57>
  # n1 +/ n2;;
  - : Num.num = <num 99>
  # n1 */ n2;;
  - : Num.num = <num 2394>
  # n1 // n2;;
  - : Num.num = <num 14/19>
  # float_of_num (n1 // n2);;
  - : float = 0.736842105263
  # string_of_num (n1 // n2);;
  - : string = "14/19"
  # int_of_num (n1 // n2);;
  Exception: Failure "integer argument required".
  # int_of_num ((num_of_int 42) // (num_of_int 21));;
  - : int = 2

This should be enough to get you through this assignment.

----

.. rubric:: Footnotes

.. [1] The ``Num`` package is pretty much deprecated in favor of the
   ``Zarith`` package, but we still use ``Num`` because it’s simpler.

.. [2] More specifically, this is the OCaml *bytecode* compiler,
   which is optimized for very fast compilation.
   There is also a native-code OCaml compiler called ``ocamlopt``,
   which is slower but produces much faster code.
   We will usually just use ``ocamlc``, because it will be fast enough
   for our purposes.

