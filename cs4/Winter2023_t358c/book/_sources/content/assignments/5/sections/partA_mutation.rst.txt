Part A: Mutation and imperative programming
===========================================

In this section, we are going to write a few functions using OCaml’s
imperative features.


1. Fibonacci again
------------------

[**5**]  (20 minutes)

Write two imperative versions of the fibonacci function that takes a
single ``int`` argument ``n`` and returns an ``int`` result, which is
the ``n``\th fibonacci number. The first one should be called
``fibonacci`` and should use a ``while`` loop, while the second should
be called ``fibonacci2`` and should use a ``for`` loop. **Do not use
recursion or any helper functions in either problem.** The resulting
functions should have :math:`\Theta(n)` worst-case asymptotic time
complexity. The functions should store all data in reference cells
(except for the argument ``n`` and loop indices in ``fibonacci2``) and
update them as necessary.

.. hint::

   Write these functions basically the way you would write them in C or
   Python (modulo syntax, of course).


2. Bubble sort
--------------

[**5**]  (30 minutes)

In this problem, you will write a function called ``bubble_sort`` which
implements an imperative sorting algorithm that works on arrays of
values, sorting in-place in ascending order using the "bubble sort"
algorithm. This function has the signature:

.. code-block:: ocaml

   val bubble_sort : 'a array -> unit

You may assume that the type ``'a`` is orderable |ie| that operators
like ``<``, ``=``, and ``>`` work properly on values of that type.

Again, do not use recursion or any helper functions in your function.
Use ``for`` loops or ``while`` loops for looping.

Imperative bubble sort works as follows. Go through the array, looking
at consecutive pairs of elements. If you find one that is out of order
(the second element is smaller than the first), swap the two elements
in-place (you might want to use a temporary variable for this) and
continue. Once you reach the end of the array, the last element of the
array should be the largest. Start over and continue until all the
elements are in the correct order. This algorithm has a time complexity
of :math:`\Theta(n^2)`.

`Here <https://en.wikipedia.org/wiki/Bubble_sort>`__
is a reference on bubble sort.

You don’t need to use any helper functions for this problem, and you
shouldn’t use any.

Note that you can have an ``if`` expression without an ``else`` clause
in OCaml as long as the type of the ``then`` clause is ``unit``
(see the :ref:`ocaml_cheat_sheet`.)

