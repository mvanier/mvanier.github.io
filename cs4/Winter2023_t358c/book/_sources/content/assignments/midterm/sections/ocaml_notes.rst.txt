OCaml notes
===========

Testing
-------

For this exam, we are supplying you with these support files:

* a ``.mli`` OCaml interface file: ``midterm.mli``
* a test script: ``tests_midterm.ml``
* a ``Makefile``

These are all collected in the file ``midterm.zip`` which is posted on the
course Canvas page in the Modules section, Assignments module. You should
download the zip file and unzip it into the directory in which you are writing
your ``midterm.ml`` code. You should not change these files, and you should not
submit them as part of your exam submission to CodePost.

Once your exam is done, you should compile it and check that it conforms
to the interface file by entering this command:

.. code-block:: text

   $ make compile

Of course, you can also compile your code from inside the OCaml interpreter
using the ``#use`` directive, as we’ve previously described. To run the test
script, type this:

.. code-block:: text

   $ make test

This will compile the ``tests_midterm.ml`` file (which contains the unit
tests) and output an executable program called ``tests_midterm``. Then
it will run that program and report all test failures.

If you want to compile the code and immediately run the test script
(useful during development/debugging), just type:

.. code-block:: text

   $ make

Running the tests generates some log files; to get rid of them (as well
as all compiled OCaml files), type:

.. code-block:: text

   $ make clean

Note that almost all the tests/examples described below are also in the
test script.

While writing the midterm, one trick that you will probably want to use
is to comment out the tests in ``tests_midterm.ml`` corresponding to
parts of the midterm you haven’t attempted yet. This will allow you to
just test those parts of the midterm you’ve completed.


Things to be aware of
---------------------

Compilation warnings are **always wrong** and will cost you marks
(up to 1/2 of the problem marks). 
When you compile your code using the ``Makefile``,
most warnings will be enabled,
so if you get any, take them seriously.
If you don't understand a warning, ask us about it on Piazza.

We would like your functions not to be gratuitously inefficient, so if
you write a function in a very inefficient way and there is a simple way
to write it efficiently, you will lose marks. However, we don’t require
your functions to be tail-recursive unless specifically stated.

**Please do not use any imperative constructs unless we specifically say
it’s allowed.** By default, your code should be purely functional. (You
will lose marks if you violate this rule.)

.. note::

   Imperative constructs include ``ref`` cells, the ``!`` dereference
   operator, the ``:=`` assignment operator, records with mutable
   fields, arrays, and ``while`` and ``for`` loops.


Library functions
-----------------

You can use OCaml’s built-in functions as needed anywhere in the exam,
including built-in operators like the ``@`` list concatenation operator.
You are also allowed to use the ``List.rev`` function as needed anywhere
in the exam. You can also use the ``Printf`` functions as needed, though
you don’t actually need them (except maybe for debugging). Other
library functions you can use are mentioned in the problem descriptions.
If we don’t explicitly say you can use it, don’t use it!

.. note::

   By "built-in function" we mean functions that aren’t module qualified
   and are present when OCaml starts up. By "library functions", we mean
   functions that come from a library module like ``List``, ``String``,
   |etc|

   If you think a problem needs a library function which we haven’t
   identified, contact us on Piazza. If you need to know how a permitted
   library function works, see the online OCaml documentation.

