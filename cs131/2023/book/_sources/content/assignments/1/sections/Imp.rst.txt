Part A: Programming in |imp|
============================

In this section you will write a few functions in the base |imp|
language to familiarize yourself with how it works. This code will go in
the file ``lab1a.imp``.

.. note::

   You are allowed to write helper functions in addition to the
   functions described.

   Since |imp| doesn’t (yet) have local variables other than function
   arguments (you’ll implement this in part B), if you need them you can
   either

   * define a global variable instead

   * write a helper function with extra arguments which you use as
     local variables

   The second strategy should be familiar from CS 4. Note that you can
   change the values of function arguments using the ``set`` form.


1. ``sigma``
------------

Define a function ``sigma`` satisfying
``(sigma m n) = m + (m+1) + ... + n``. When ``m > n``, the behavior
of ``sigma`` is unspecified; your implementation may do anything you
like. Write two versions of this function. ``sigma1`` will work
recursively while ``sigma2`` will work imperatively using a ``while``
loop.


2. ``exp`` and ``log``
----------------------

Define functions ``exp`` and ``log``. When base ``b`` and exponent ``n``
are nonnegative, ``(exp b n) = b^n``, and when ``b > 1`` and ``m > 0``,
``(log b m)`` is the smallest integer ``n`` such that ``b^(n + 1) > m``.
(We’re using the ``^`` symbol to mean "to the power of" here.) On inputs
that don’t satisfy the preconditions, your implementation may do
anything you like — even fail to terminate.


3. ``fact``
-----------

Define a function ``fact`` such that ``(fact n)`` is the factorial of
``n``. Define two versions of this function. The first (``fact1``) will
be a simply-recursive function that is familiar from the definition of
factorials. The second (``fact2``) will be an imperative function using
a ``while`` loop.


4. ``fib``
----------

Define a function ``fib`` such that ``(fib n)`` is the ``n``\ th
Fibonacci number. The Fibonacci numbers are a sequence of numbers
defined by these laws:

.. code-block:: text

   fib 0 = 0
   fib 1 = 1
   fib n = fib (n - 1) + fib (n - 2)  when n > 1

Do two versions of this function. ``fib1`` will be the usual
tree-recursive function that corresponds to the definition, but it will
be extremely slow for large input values. ``fib2`` will be an imperative
function using a ``while`` loop and will be fast.


5. ``binary``
-------------

Define a function ``binary`` such that ``(binary m)`` is the number
whose decimal representation looks like the binary representation of
``m``. For example ``(binary 12) = 1100``, since ``11002`` =
12\ :sub:`10`. You can assume that the input ``m`` is non-negative.


Part B: Extending |imp|
=======================

1. ``read``
-----------

Add the primitive ``read`` to the |imp| interpreter and the initial
basis. Function ``read`` is executed for its side effect; it takes no
arguments, reads a number from standard input, and returns the number.
The ``read`` primitive reads an entire line before converting it to an
integer. If the input is invalid, it should raise a ``Runtime_err``
exception with an appropriate error message.

Note that OCaml provides the ``read_line`` function as a built-in
function (in the ``Stdlib`` module). You can use it, or alternatively
use ``read_int`` or ``read_int_opt`` to read the number.


2. Adding syntactic sugar
-------------------------

One interesting way to extend a language is to add *syntactic sugar* to
it. This means to add forms that are trivially convertible to existing
forms. For this problem, we want you to add a few language forms
*without* changing the abstract syntax tree (AST) representation of the
language. Instead, extend the S-expression to AST conversion (the
``parse_expr`` function) so that it recognizes the following forms and
emits the correct AST forms.

.. note::

   This is *not* usually the best way to add syntactic sugar to a
   language. An alternative way, which we’ll explore in other languages,
   is to convert the AST to a simpler AST (an intermediate
   representation). Working with bare S-expressions in OCaml is fairly
   tedious. On the other hand, Scheme and Racket macros are a very
   sophisticated user-programmable way to add syntactic sugar to the
   Scheme and Racket languages, and they work by converting
   S-expressions to other S-expressions (to a first approximation).

In each case, if a syntax error arises, a ``Syntax_err`` exception must
be raised with a meaningful error message.

.. note::

   Don’t forget to add any new keywords to the ``keywords`` list in the
   interpreter!

a. ``do-while``
~~~~~~~~~~~~~~~

Add a C-like ``do-while`` form with this translation:

.. code-block:: text

   (do-while <exp> <test-exp>) ==> (begin <exp> (while <test-exp> <exp>))


b. ``while*``
~~~~~~~~~~~~~

Add a ``while*`` form with this translation:

.. code-block:: text

   (while* <test-exp> <exp1> <exp2> ... <expN>)
     ==> (while <test-exp> (begin <exp1> <exp2> ... <expN>))

This allows you to write ``while`` loops without having an explicit
``begin``. A ``while*`` expression with no non-test expressions is a
syntax error, as is one with no expressions at all.


c. ``for``
~~~~~~~~~~

Add a C-like ``for`` loop with this translation:

.. code-block:: text

   (for <begin-exp> <test-exp> <incr-exp> (<body-exp1> <body-exp2> ... <body-expN))
   ==>
   (begin <begin-exp>
     (while <test-exp>
       (begin <body-exp1> <body-exp2> ... <body-expN> <incr-exp>)))

Note that for all of these changes, you will have to decide what the
location of the newly-created forms are. Here are some guidelines:

* For ``do-while``, use the ``do-while`` location for the generated
  ``begin`` and ``while`` forms.

* For ``while*``, use the ``while*`` location for the generated
  ``while`` and ``begin`` forms.

* For ``for``, use the ``for`` location for the outer generated
  ``begin`` form and the generated ``while`` form. For the inner
  generated ``begin`` form, use the location of the S-expression
  ``List`` constructor that contains the ``begin`` expressions.

* For expressions that pass through unchanged, keep the location the
  same.


3. ``and`` and ``or``
---------------------

The initial basis of the |imp| language is split between primitive
functions and user functions. The user functions are defined in the
string ``initial_basis`` near the end of the file. Two of these
definitions are quite unsatisfying:

.. code-block:: text 

   (define and (b c) (if b c b))
   (define or (b c) (if b b c))

The reason these are bad is that ``and`` and ``or`` should have
short-circuit semantics: if the first argument is ``0`` (for ``and``) or
``1`` (for ``or``) the second argument should never be evaluated. In
this problem we will implement a correct version of ``and`` and ``or``
with the appropriate semantics.

Before we begin, note that this *could* be done the same way we
implemented ``while*`` and ``do-while``: by making ``and`` and ``or``
syntactic sugar for ``if`` expressions. However, it’s instructive to do
it a different way. Here is what we want you to do:

#. Remove the definitions of ``and`` and ``or`` from the
   ``initial_basis`` string.

#. Add ``and`` and ``or`` to the keywords list.

#. Extend the AST ``exp`` type definition with two new constructors:
   ``And (<loc>, <exp>, <exp>)`` and ``Or (<loc>, <exp>, <exp>)``.

#. Extend ``parse_expr`` so that the S-expression corresponding to
   ``(and <exp> <exp>)`` gets converted to the corresponding AST form
   and similarly for ``(or <exp> <exp>)``.

#. Extend ``eval_expr`` with cases for ``And`` and ``Or`` AST forms.
   These should just dispatch to ``If`` AST forms according to the
   rules:

.. code-block:: text

   And (l, e1, e2) ==> If (l, e1, e2, e1)
   Or (l, e1, e2) ==> If (l, e1, e1, e2)

with one caveat: make sure you do not compute the value of ``e1`` or
``e2`` more than once. (There are different ways to achieve this.)

Again, make sure that the locations used in derived forms are reasonable ones.


4. Improving ``while`` and ``begin``
------------------------------------

The way that ``while`` and ``begin`` expressions are evaluated in the
``eval_expr`` function is somewhat inefficient. In both cases, we
sometimes have to create new ``while``/``begin`` expressions and
evaluate them in order to evaluate the full expression (this was spelled
out in the operational semantics). However, why should we dispatch the
``while``/``begin`` subexpression to ``eval_expr`` just so it can wind
up in the exact same point in the code we are already in? The extra case
analysis is completely unnecessary. Rewrite the code for these forms so
that you never have to recurse on a newly-created ``while`` or ``begin``
subexpression.

There are two ways to do this: imperatively and functionally. The
imperative way would use an OCaml ``while`` loop and reference
variables. We want you to do it the other way: using a tail-recursive
helper function (for ``while``) or using either a tail-recursive helper
function or an equivalent higher-order function (for ``begin``).


5. Adding support for local variables
-------------------------------------

One glaring weakness of the |imp| language is that it has no local
variables, even though it has an environment for storing them. In this
problem we will implement them.

The syntax for function definitions will change to the following:

.. code-block:: text

   (define function-name (formals) {(locals <locals>)} expression)

The curly braces are not part of the concrete syntax; they mean that the
``locals`` declaration can be omitted, in which case the locals list is
empty. In other words:

.. code-block:: text

   (define foo (x y z) <exp>)

is the same as:

.. code-block:: text

   (define foo (x y z) (locals) <exp>)  ; empty locals list

Here’s an example of a function that uses locals:

.. code-block:: text

   (define dumb-add (x y z)
     (locals sum)
     (begin
       (set sum x)
       (set sum (+ sum y))
       (set sum (+ sum z))
       sum))

Here’s the function being called:

.. code-block:: text

   >>> (dumb-add 1 2 3)
   6

Here are the steps we want you to go through to implement locals:

#. Add ``locals`` to the keywords list.

#. Extend the ``Define`` AST form in the ``def`` type to contain a list
   of identifiers corresponding to local variables. This list should be
   separate from the ``id list`` of function arguments.

#. Extend ``parse_def`` so that it recognizes function definitions with
   locals and parses them to the new ``Define`` form. Function
   definitions without locals will also be parsed to the new ``Define``
   form, but the locals list will be empty. Check that all the locals
   identifiers are valid and that they are unique (as is currently done
   for the function parameters). Note that it’s OK to use the same name
   for a local variable and a function parameter; in such cases, the
   local variable takes precedence.

#. Extend the ``UserFunction`` definition so it includes locals.

#. When a function call with a ``UserFunction`` is evaluated, all locals
   are added to the local variable environment with an initial value of
   ``0``. Then evaluation proceeds normally.

Try to do this without copying code unnecessarily.


Part C: Programming in extended |imp|
=====================================

Rewrite your functions from part A as follows. Even if you used helper
functions to implement your functions in part A (which is allowed),
don’t do that here; all functions should be self-contained. Also, none
of these functions should use recursion.

* Rewrite the ``sigma2`` function so it uses ``while*`` and local
  variable(s). Call the new function ``sigma3``.

* Rewrite ``exp`` so it uses ``while*`` and local variable(s). Call the
  new version ``exp2``.

* Define a version of ``fact`` which uses local variable(s) and a
  ``for`` loop. Call it ``fact3``.

* Define a version of ``fib`` which uses local variable(s) and a
  ``for`` loop. Call it ``fib3``.

