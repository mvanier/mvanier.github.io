{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The CS 131 book: Winter 2024","text":"<p>This book is the official document repository for the Caltech CS 131 course  (Programming Languages) for the Spring 2024 term.</p> <p>The course instructor is Mike Vanier. See the syllabus for administrative information.</p> <p>Please read this page for an overview of the course.</p>"},{"location":"lectures/","title":"Lectures","text":"<p>Links to lectures slides are posted below.</p> <ul> <li> <p>Lecture 1:   Introduction</p> </li> <li> <p>Lecture 2:   The Imp language</p> </li> <li> <p>Lecture 3:   The Imp language: the code</p> </li> <li> <p>Lecture 4:   The Imp language: the code, part 2</p> </li> <li> <p>Lecture 5:   The uScheme language</p> </li> <li> <p>Lecture 6:   The uScheme language: operational semantics</p> </li> <li> <p>Lecture 7:   The uScheme language: the code</p> </li> <li> <p>Lecture 8:   The uScheme+ language</p> </li> </ul>"},{"location":"admin/collab/","title":"Collaboration policies","text":""},{"location":"admin/collab/#overview","title":"Overview","text":"<p>The CS 131 collaboration policies determine if, and how much, you are allowed to collaborate with other students while working on your assignments.</p> <p>Please read this document to the very end, because you are responsible for abiding by all the rules set forth here. Failure to abide by these rules may cause you to get sent to the Board of Control (BoC), and that is not pleasant for anyone concerned. Therefore, we want to be extra clear on what constitutes fair collaboration in this course.</p> <p>Note</p> <p>In some places in this document, you will read that some kind of behavior is strictly forbidden. We are not trying to scare you or intimidate you, and we're not trying to be jerks. We just want to make absolutely sure that you know what the rules are, and saying that something is strictly forbidden is pretty unambiguous. (We apologize in advance if you find this annoying.)</p>"},{"location":"admin/collab/#basic-policy","title":"Basic policy","text":"<p>You are welcome to collaborate informally on your assignments with other individuals who are taking the course, but you must write all of your own code and you must not look at other students' code, except to help them as described below. Copying another student's code verbatim or nearly verbatim (from a file, a whiteboard, a screen share or anywhere else) is not acceptable and is an Honor Code violation. Taking another student's file and modifying it to make it look different is definitely not acceptable and is an Honor Code violation. Consulting a printed or electronically displayed version of another student's code and referring to it while you write your own code is not acceptable either, and is also an Honor Code violation. Having someone dictate code while you type isn't acceptable either. Basically, you have to do your own work.</p> <p>Getting advice on algorithms or syntactic details of the language, or suggestions on how to debug a part of your program that isn't working, is fine.</p> <p>All of the above also applies if you are getting tutored for the course, officially or unofficially.</p> <p>All of the above also applies to student work from previous years. We re-use some problems in assignments, and copying answers from an assignment that was submitted in previous years is an Honor Code violation just as much as copying from a student who is currently taking the course.</p>"},{"location":"admin/collab/#helping-others-and-the-50-foot-rule","title":"Helping others and the \"50-foot rule\"","text":"<p>It is common for students to want to help other students to write and debug their assignments. While we prefer that you go to one of the course teaching assistants when you need help on the assignments (it doesn't matter which one), we don't forbid you from seeking help from other students or offering your help to other students. However, we do insist on some guidelines to make the process fair for everyone.</p> <p>When you are helping another student with their homework, you are acting as an unofficial teaching assistant, and thus you must behave like one. A teaching assistant will not tell you the answer or dictate code to you; he/she will help you work through the problem so that you understand what you are doing wrong. If you don't have the time or the inclination to do this, do not assist other students. If you just give them your code, you are violating the Honor Code and both you and the people you are giving the code to may be in for some serious consequences.</p> <p>As a way of clarifying the way in which you can help other students (especially when it comes to debugging their code), we want you to obey the \"50 foot rule\". This rule states that if you help another student with their programming problems (including debugging), you must not consult your own code while doing so. Specifically, we ask that your own code be at least 50 feet away i.e. not visible to you or the person you are helping while you are helping them. (It doesn't have to be exactly 50 feet; the point is that you can't see your code while helping the other person and you shouldn't run back and forth between your computer with your code and the computer of the person you're helping.) The slogan of the 50-foot rule is: \"Help them with your brain, not with your code.\" Please do not try to find a loophole kind of way around this e.g. projecting your code on a building 50 feet away; that is clearly not what we mean. Posting your code on a pastebin-like internet site, emailing your code to other people, sharing your screen with your code on it, printing it out, or even referring to it on your laptop while helping someone else, are all clear violations of the collaboration policy for this course. Also, we don't want you to put your code up on a computer in a room 50 feet away from where you're helping someone and run back and forth, dictating a line at a time. If you can't help them without consulting your code, don't help them. Refer them to a teaching assistant.</p> <p>Note</p> <p>The 50-foot rule only applies when helping another student in person.</p> <p>Helping another student using teleconferencing software like Zoom, Skype, Discord etc. is covered below, but one aspect of it is that screen sharing is not permitted.</p> <p>We realize that it's more convenient to ask someone in your house for help than to walk all the way to the Annenberg building. A possible solution is to get to know a TA and meet with them in their dorm room (if they are willing). Another possibility is to meet with a TA on Zoom or Discord, or in a room that's closer than Annenberg (e.g. in a library).</p>"},{"location":"admin/collab/#use-and-abuse-of-pseudocode","title":"Use and abuse of pseudocode","text":"<p>In the past, some students have been called in to the BoC because of very similar code that was ultimately traced to pseudocode written on a whiteboard which was almost exactly like the final code. Pseudocode is supposed to be an informal, non-executable description of an algorithm. If you write or consult pseudocode which is (say) 80% or more of the way to being actual runnable code as a way to do an end run around the collaboration policies, be advised that we and the BoC are well aware of this problem and you will not get away with it. On the other hand, if you (or a TA) write out or read pseudocode which is a human-readable description of an algorithm without any actual code in it, you are fine. If in doubt, ask the instructor.</p>"},{"location":"admin/collab/#teleconferencing-software-eg-zoom","title":"Teleconferencing software (e.g. Zoom)","text":"<p>If you use teleconferencing software (like Zoom) or software with teleconferencing capabilities (like Discord), you may not share your screen with other students, whether to help them or to get help from them. This also applies to non-students (with the obvious exception of the course instructor or TAs).</p> <p>Also, it is strictly forbidden to dictate code over teleconferencing software. This is consistent with the rules in the other sections of this document.</p>"},{"location":"admin/collab/#discussion-boards-and-chat-programs","title":"Discussion boards and chat programs","text":"<p>You are strictly forbidden from posting code from your assignments to a discussion board (such as Piazza) unless it's a private message to one or more instructors/TAs. If this happens you may lose the ability to use the discussion board for any purpose.</p> <p>This also applies to other programs with chat features that are not used in the course (like Slack, Discord, or Discourse), or even email for that matter.</p>"},{"location":"admin/collab/#use-of-public-websites","title":"Use of public websites","text":"<p>It is strictly forbidden to post any of the problems from the assignments onto websites (for instance, Stack Overflow), and anyone caught doing this will be charged with an Honor Code violation. This includes problems that are similar to assignment problems even if not identical. If you find a discussion of course-related material on internet websites, you may read it as long as the discussion is not about a problem that is identical to or very similar to a problem on one of the course assignments. However, do not transcribe code from the internet into your homework submissions.</p> <p>It is strictly forbidden to look at any solutions to any previous years' work posted on internet code repository sites (including but not limited to GitHub, GitLab, BitBucket, etc.). It is also strictly forbidden to put your own code on such a repository unless (a) it is a private repository, and (b) you do not allow anyone else access to this private repository. You may also not fork any such repositories that you might happen to find; we will consider this evidence of intent to plagiarize.</p>"},{"location":"admin/collab/#use-of-code-hinting-software-github-copilot-or-chatgpt","title":"Use of code hinting software (Github Copilot or ChatGPT)","text":"<p>You are strictly forbidden to use code hinting software such as Github Copilot, ChatGPT, or similar software for any part of this course. (This should be obvious.)</p>"},{"location":"admin/collab/#summary","title":"Summary","text":"<p>These are resources that you may or may not be allowed to consult while working on your assignments and exams.</p> Item Status Course book OK Course textbook OK Official OCaml documentation OK Other OCaml documentation OK Other OCaml books OK Your notes OK Notes of other students Not allowed Your graded assignments OK Other students' graded assignments Not allowed Other students' ungraded assignments Not allowed Other code written by anyone else that answers an assigned problem Not allowed Solutions to assignment/exam problems from a previous year Not allowed Material posted on internet forums that answers specific problems Not allowed Material in non-course code repositories (Github, Bitbucket, Gitlab etc.) Not allowed Code hinting software (e.g. Github Copilot, ChatGPT) Not allowed"},{"location":"admin/collab/#consequences-for-violating-these-policies","title":"Consequences for violating these policies","text":"<p>Be aware that letting another student copy from you is just as bad as copying from another student, and can get you into just as much trouble.</p>"},{"location":"admin/collab/#finally","title":"Finally...","text":"<p>If you have any questions about the course collaboration policies, please contact the instructor. Do not ask the teaching assistants; they may not give you the best answer.</p> <p>We realize that the vast majority of you (hopefully all of you) have no intention of cheating or overcollaboration in any way, and we hope that this collaboration policy won't get in the way of your enjoyment of the course.</p>"},{"location":"admin/syllabus/","title":"Syllabus","text":"<p>This is the course syllabus for CS 131 (Functional Programming) for the Spring 2024 term.</p>"},{"location":"admin/syllabus/#instructor","title":"Instructor","text":"<p>The instructor/lecturer for the course is Mike Vanier (mvanier@cms.caltech.edu). Mike's pronouns are he/him.</p>"},{"location":"admin/syllabus/#lectures","title":"Lectures","text":"<p>Lectures will be held in room 213 of the Annenberg building on Mondays, Wednesdays, and Fridays from 3 PM to 4 PM.</p>"},{"location":"admin/syllabus/#teaching-assistants","title":"Teaching assistants","text":"<p>Here are the teaching assistants for the course. Contact information and office hours for teaching assistants will be posted on the course Piazza page.</p> <ul> <li>Rachael Kim</li> <li>Emeka Nkurumeh</li> <li>Vinny Thai  (head TA)</li> <li>Christopher Zhou</li> </ul>"},{"location":"admin/syllabus/#course-description","title":"Course description","text":"<p>From the Caltech catalog:</p> <p>CS 131 is a course on programming languages and their implementation. It teaches students how to program in a number of simplified languages representing the major programming paradigms in use today (imperative, object-oriented, and functional). It will also teach students how to build and modify the implementations of these languages. Emphasis will not be on syntax or parsing but on the essential differences in these languages and their implementations. Both dynamically-typed and statically-typed languages will be implemented. Relevant theory will be covered as needed. Implementations will mostly be interpreters, but some features of compilers will be covered if time permits. </p>"},{"location":"admin/syllabus/#textbook","title":"Textbook","text":"<p>This course is based around the textbook Programming Languages: Build, Prove, and Compare, by Norman Ramsey. We will often abbreviate this book as PL:BPC.</p>"},{"location":"admin/syllabus/#external-websites","title":"External websites","text":"<p>There will be a Piazza site, which you will be enrolled in if you are registered for this course.</p> <p>For homework submission and grading, we will use CodePost.</p>"},{"location":"admin/syllabus/#office-hours","title":"Office hours","text":"<p>Office hours will either be held in-person or on Zoom, at the discretion of the teaching assistant. Mike will hold his office hours on Zoom. Office hour times will be posted on Piazza.</p>"},{"location":"admin/syllabus/#grading-scheme","title":"Grading scheme","text":"<p>CS 131 is on grades. There are no exams.</p> <p>There will be 5 or 6 assignments, worth 10 marks each. On CodePost, each assignment will be given 100 \"points\". The point grade will be divided by 10 to get the actual grade in marks.</p> <p>Letter grades are determined by taking the maximum grade (60 if there are 6 assignments, 50 if there are 5 assignments) and scaling it to a maximum of 100. Letter grades are assigned to these percentages as follows:</p> Numerical grade (out of 100%) Letter grade 95-100% A+ 90-95% A 85-90% A- 80-85% B+ 75-80% B 70-75% B- 65-70% C+ 62-65% C 60-62% C- 58-60% D+ 55-58% D &lt; 55% F"},{"location":"admin/syllabus/#redoing-assignments","title":"Redoing assignments","text":"<p>After you receive your initial grade on an assignment, you have one week to submit a redo. Redos will be submitted as a separate CodePost assignment called <code>Assignment N (rework)</code> (for assignment <code>N</code>). Late redos (received after the 1-week redo window) will not be graded and your previous grade will stand. You may not submit more than one redo per assignment.</p>"},{"location":"admin/syllabus/#late-policy-for-assignments","title":"Late policy for assignments","text":"<p>If an assignment is late when first submitted, marks are deducted at the rate of 20 points/day. These marks can't be regained through rework. If a rework is late (i.e. is submitted more than one week after the original grade was submitted), it doesn't count, and the previous grade stands.</p> <p>Note</p> <p>If an assignment is submitted on time, but is missing one or more sections, those sections will be graded as a 0. The assignment can be reworked, of course, but assuming the sections that were missing on the initial submission are submitted with the rework, there is no additional rework for these sections. This means (for instance) if you don't submit a section on the initial submission but do submit it in the rework, the grade of that section in the rework is final \u2014 you don't get to rework it just because you hadn't submitted it before. So please don't leave out sections!</p> <p>Students may request extensions for assignments due to unusual circumstances. These extensions have to be approved by the course instructor (Mike).</p>"},{"location":"admin/syllabus/#assignment-due-dates","title":"Assignment due dates","text":"<p>Assignments will be due on Friday at 2 AM unless otherwise indicated. Note that a due time of 2 AM means early that morning, so effectively it means very late the previous evening.</p>"},{"location":"admin/syllabus/#attendance-and-participation","title":"Attendance and participation","text":"<p>Attendance and participation currently do not count towards the final grade. However, we strive to make lectures interactive and do a lot of demos and discussion during lectures.  Missing out on this will deprive you of many of the benefits of the course (as well as a lot of the fun!). All lectures slides will be posted.</p>"},{"location":"admin/syllabus/#academic-integrity","title":"Academic integrity","text":"<p>Caltech's Honor Code states that: \"No member of the Caltech community shall take unfair advantage of any other member of the Caltech community.\"</p> <p>Understanding and avoiding plagiarism: Plagiarism is the appropriation of another person's ideas, processes, results, or words without giving appropriate credit, and it violates the honor code in a fundamental way. You can find more information at this page.</p>"},{"location":"admin/syllabus/#collaboration-policies","title":"Collaboration policies","text":"<p>The course collaboration policies are listed in the Collaboration policies page in this book.</p> <p>Note</p> <p>Please read the collaboration policies! You are responsible for knowing what is an isn't acceptable collaboration, and if you over-collaborate you may be sent to the Board of Control, which is never pleasant.</p>"},{"location":"admin/syllabus/#software","title":"Software","text":"<p>See the software page for information on installing the course software.</p>"},{"location":"admin/syllabus/#diversity-and-inclusion","title":"Diversity and inclusion","text":"<p>You all belong in this class and as such should expect to be treated by your classmates and the course staff with respect. It is our goal, as the course staff, to provide an interesting and challenging environment that is conducive to learning. If any incident occurs that challenges this commitment to a supportive and inclusive environment, please let the instructors know so the issue can be addressed.</p>"},{"location":"admin/syllabus/#accessibility","title":"Accessibility","text":"<p>We consider accessibility to be an extremely important issue. If some aspect of the course is making it more difficult for you to learn the material, we want to hear about it! We want this course to be an enjoyable experience for you, not a burden.</p>"},{"location":"admin/syllabus/#student-wellness","title":"Student Wellness","text":"<p>It is very important to us that you take care of your mental wellness throughout the course. Everyone on the course staff is available to chat, and you can always attend office hours for a non-academic conversation if necessary.</p>"},{"location":"admin/syllabus/#students-with-documented-disabilities","title":"Students with documented disabilities","text":"<p>Students who may need an academic accommodation based on the impact of a disability must initiate the request with Caltech Accessibility Services for Students (CASS). Professional staff will evaluate the request with required documentation, recommend reasonable accommodations, and prepare an Accommodation Letter for faculty dated in the current quarter in which the request is being made. Students should contact CASS as soon as possible, since timely notice is needed to coordinate accommodations. See the CASS website for more information.</p> <p>Undergraduate students should contact Dr. Lesley Nye, interim Dean of Undergraduate Students (administrative contact: Beth Larranaga) and graduate students should contact Darrell Peterson, Associate Dean of Graduate Studies (administrative contact: Georgine Okura).</p>"},{"location":"assignments/1/assignment1/","title":"Assignment 1: The Imp language","text":""},{"location":"assignments/1/assignment1/#due-date","title":"Due date","text":"<p>This assignment is due on Friday, April 19th at 2 AM.</p>"},{"location":"assignments/1/assignment1/#prerequisites","title":"Prerequisites","text":"<p>The only prerequisite for the course is having taken and passed CS 4. We absolutely require you to know the OCaml programming language before taking this course, because all of your submissions will be in OCaml and we don't have time to teach that language here. We will not be using any major features of the language that weren't taught in CS 4, though one or two minor ones (like labelled arguments) will be in the code base in a few places.</p> <p>Note</p> <p>The CS 4 requirement doesn't apply if you're a graduate student. In that case, though, you are responsible for getting up to speed in OCaml by yourself.</p> <p>We will also assume that you have a rudimentary knowledge of Unix-style terminal commands (at roughly the level required for CS 4). If not, please read e.g. a Linux tutorial, because we will be using the terminal a lot in this course.</p> <p>Note</p> <p>You are not required to use Linux in this course. The terminal in MacOS works pretty much the same way (both Linux and MacOS are Unix systems), so the commands should work fine assuming the software is installed correctly. Windows terminal commands are completely different. If you have Windows, you should install Windows Subsystem for Linux (WSL), which gives you a full version of Linux running inside of Windows.  (Use that instead of trying to run Haskell natively on Windows.)</p>"},{"location":"assignments/1/assignment1/#syllabus","title":"Syllabus","text":"<p>Please make sure you have read the Syllabus page and the Collaboration policies page before submitting any assignments, so you know how the course is organized, what the grading policies are, what is and is not acceptable collaboration etc..</p>"},{"location":"assignments/1/assignment1/#software-installation","title":"Software installation","text":"<p>See the Software page for instructions on how to install the course software.</p>"},{"location":"assignments/1/assignment1/#external-websites","title":"External websites","text":"<p>In addition to this book, we will be using the following websites:</p> <ul> <li> <p>The course Canvas page, which is where we will post the source code for assignments.</p> </li> <li> <p>The course Piazza page, which is where most course-related announcements will be posted, as well as serving as a question-and-answer forum. Teaching assistant contact information and office hours will also be posted on the Piazza page.</p> </li> <li> <p>The course CodePost page, which is where assignments will be submitted and graded.</p> </li> </ul> <p>Students will be enrolled in Piazza and CodePost by the course instructor. If you added the course late, you may need to remind the instructor to add you.</p> <p>In addition, some TAs and the instructor may choose to host office hours online on Zoom.</p>"},{"location":"assignments/1/assignment1/#code-base","title":"Code base","text":"<p>All assignments will have a code base, which includes test code and sometimes template code for modules. These are posted on the course Canvas site in the Modules section as a single zip file.</p> <p>The code base for the Imp language contains two subdirectories: <code>imp</code> and <code>sexpr</code>. The <code>sexpr</code> subdirectory contains the code to parse S-expressions from strings and files. The <code>imp</code> subdirectory contains the base implementation of the <code>imp</code> language. You should unzip the file in a directory and do the following:</p> <ol> <li><code>cd</code> into the <code>sexpr</code> subdirectory and run <code>make</code>.</li> <li>Then <code>cd</code> into the <code>imp</code> subdirectory and run <code>make</code>.</li> </ol> <p>If all goes well, this should create the <code>imp</code> executable, which you can run as follows:</p> <pre><code>$ ./imp\n&gt;&gt;&gt;\n</code></pre> <p>Then you can type in Imp expressions at the prompt. Control-D will exit the interpreter.</p>"},{"location":"assignments/1/assignment1/#the-rlwrap-program","title":"The <code>rlwrap</code> program","text":"<p>If you can, try to install the <code>rlwrap</code> program, which will allow you to do line editing on your interpreters in the same way that you do using <code>utop</code> with OCaml. Most package managers will allow you to install <code>rlwrap</code>. On MacOS using Homebrew, the command is:</p> <pre><code>$ brew install rlwrap\n</code></pre> <p>On Ubuntu Linux, it's:</p> <pre><code>$ sudo apt install rlwrap\n</code></pre> <p>You can use it like this:</p> <pre><code>$ rlwrap ./imp\n</code></pre> <p>and then you can use line editing with your Imp interpreter. (The same applies to all of the interpreters in this course.)</p>"},{"location":"assignments/1/assignment1/#writing-and-testing-your-code","title":"Writing and testing your code","text":"<p>You will write two new files of Imp code:</p> <ul> <li> <p><code>lab1a.imp</code>, which is all the Imp code you will write for part A</p> </li> <li> <p><code>lab1c.imp</code>, which is all the (extended) Imp code you will write for part C</p> </li> </ul> <p>You will also edit the file <code>imp.ml</code> in accordance with the instructions given in part B.</p> <p>The <code>imp</code> subdirectory of the code base has a <code>tests</code> subdirectory. Copy your <code>lab1a.imp</code> and <code>lab1c.imp</code> files into that directory, go back to the <code>imp</code> directory and type:</p> <pre><code>$ make test\n</code></pre> <p>This will run some tests on your code, all of which should pass.  Of course, passing the tests doesn't mean that your code is perfect, but failing a test means that something is definitely wrong.</p>"},{"location":"assignments/1/assignment1/#what-to-hand-in","title":"What to hand in","text":"<p>For this assignment, you will submit three files to CodePost as <code>Assignment 1</code>:</p> <ol> <li><code>lab1a.imp</code></li> <li><code>imp.ml</code> (containing your additions as described in part B)</li> <li><code>lab1c.imp</code></li> </ol>"},{"location":"assignments/1/partA/","title":"Part A: Programming in Imp (15 points)","text":"<p>In this section you will write a few functions in the base Imp language (the version we provide to you, with no alterations) to familiarize yourself with how it works. This code will go into the file <code>lab1a.imp</code>.</p> <p>Note</p> <p>You are allowed to write helper functions in addition to the functions described.</p> <p>Since Imp doesn't (yet) have local variables other than function arguments (you'll implement this in part B), if you need them you can either</p> <ul> <li> <p>define a global variable instead</p> </li> <li> <p>write a helper function with extra arguments which you use as local variables</p> </li> </ul> <p>The second strategy should be familiar from CS 4. Note that you can change the values of function arguments using the <code>set</code> form.</p>"},{"location":"assignments/1/partA/#1-sigma","title":"1. <code>sigma</code>","text":"<p>[3 points]</p> <p>Define a function <code>sigma</code> satisfying <code>(sigma m n) = m + (m+1) + ... + n</code>. When <code>m &gt; n</code>, the behavior of <code>sigma</code> is unspecified; your implementation may do anything you like. Write two versions of this function. <code>sigma1</code> will work recursively while <code>sigma2</code> will work imperatively using a <code>while</code> loop.</p>"},{"location":"assignments/1/partA/#2-exp-and-log","title":"2. <code>exp</code> and <code>log</code>","text":"<p>[3 points]</p> <p>Define the functions <code>exp</code> and <code>log</code>. When base <code>b</code> and exponent <code>n</code> are nonnegative, <code>(exp b n) = b^n</code>, and when <code>b &gt; 1</code> and <code>m &gt; 0</code>, <code>(log b m)</code> is the smallest integer <code>n</code> such that <code>b^(n + 1) &gt; m</code>. (We're using the <code>^</code> symbol to mean \"to the power of\" here.) On inputs that don't satisfy the preconditions, your implementation may do anything you like \u2014\u2009even fail to terminate.</p>"},{"location":"assignments/1/partA/#3-fact","title":"3. <code>fact</code>","text":"<p>[3 points]</p> <p>Define a function <code>fact</code> such that <code>(fact n)</code> is the factorial of <code>n</code>. Define two versions of this function. The first (<code>fact1</code>) will be a simply-recursive function that is familiar from the definition of factorials. The second (<code>fact2</code>) will be an imperative function using a <code>while</code> loop.</p>"},{"location":"assignments/1/partA/#4-fib","title":"4. <code>fib</code>","text":"<p>[3 points]</p> <p>Define a function <code>fib</code> such that <code>(fib n)</code> is the <code>n</code>th Fibonacci number. The Fibonacci numbers are a sequence of numbers defined by these laws:</p> <pre><code>fib 0 = 0\nfib 1 = 1\nfib n = fib (n - 1) + fib (n - 2)  when n &gt; 1\n</code></pre> <p>Write two versions of this function. <code>fib1</code> will be the usual tree-recursive function that corresponds to the definition, but it will be extremely slow for large input values. <code>fib2</code> will be an imperative function using a <code>while</code> loop and will be fast.</p>"},{"location":"assignments/1/partA/#5-binary","title":"5. <code>binary</code>","text":"<p>[3 points]</p> <p>Define a function <code>binary</code> such that <code>(binary m)</code> is the number whose decimal representation looks like the binary representation of <code>m</code>. For example <code>(binary 12) = 1100</code>, since <code>1100</code><sub><code>2</code></sub> = <code>12</code><sub><code>10</code></sub>. You can assume that the input number <code>m</code> is non-negative.</p>"},{"location":"assignments/1/partB/","title":"Part B: Extending Imp (70 points)","text":"<p>All the changes you make in this section are to the file <code>imp.ml</code>.</p>"},{"location":"assignments/1/partB/#1-read","title":"1. <code>read</code>","text":"<p>[10 points]</p> <p>Add the primitive <code>read</code> to the Imp interpreter and the initial basis. Function <code>read</code> is executed for its side effect; it takes no arguments, reads a number from standard input, and returns the number. The <code>read</code> primitive reads an entire line before converting it to an integer. If the input is invalid, it should raise a <code>Runtime_err</code> exception with an appropriate error message.</p> <p>Note that OCaml provides the <code>read_line</code> function as a built-in function (in the <code>Stdlib</code> module). You can use it, or alternatively use <code>read_int</code> or <code>read_int_opt</code> to read the number.</p>"},{"location":"assignments/1/partB/#2-adding-syntactic-sugar","title":"2. Adding syntactic sugar","text":"<p>[20 points]</p> <p>One interesting way to extend a language is to add syntactic sugar to it. This means to add forms that are trivially convertible to existing forms. For this problem, we want you to add a few language forms without changing the abstract syntax tree (AST) representation of the language. Instead, extend the S-expression to AST conversion (the <code>parse_expr</code> function) so that it recognizes the following forms and emits the correct AST forms.</p> <p>Note</p> <p>This is not usually the best way to add syntactic sugar to a language. An alternative way, which we'll explore in other languages, is to convert the AST to a simpler AST (an intermediate representation). Working with bare S-expressions in OCaml is fairly tedious. On the other hand, Scheme and Racket macros are a very sophisticated user-programmable way to add syntactic sugar to the Scheme and Racket languages, and they work by converting S-expressions to other S-expressions (to a first approximation).</p> <p>In each case, if a syntax error arises, a <code>Syntax_err</code> exception must be raised with a meaningful error message.</p> <p>Note</p> <p>Don't forget to add any new keywords to the <code>keywords</code> list in the interpreter!</p>"},{"location":"assignments/1/partB/#a-do-while","title":"a. <code>do-while</code>","text":"<p>Add a C-like <code>do-while</code> form with this translation:</p> <pre><code>(do-while &lt;exp&gt; &lt;test-exp&gt;) ==&gt; (begin &lt;exp&gt; (while &lt;test-exp&gt; &lt;exp&gt;))\n</code></pre> <p>Example</p> <pre><code>&gt;&gt;&gt; (val x 5)\nvariable x = 5\n&gt;&gt;&gt; (do-while (println x) (set x (- x 1)))\n5\n4\n3\n2\n1\n0\n</code></pre>"},{"location":"assignments/1/partB/#b-while","title":"b. <code>while*</code>","text":"<p>Add a <code>while*</code> form with this translation:</p> <pre><code>(while* &lt;test-exp&gt; &lt;exp1&gt; &lt;exp2&gt; ... &lt;expN&gt;)\n  ==&gt; (while &lt;test-exp&gt; (begin &lt;exp1&gt; &lt;exp2&gt; ... &lt;expN&gt;))\n</code></pre> <p>This allows you to write <code>while</code> loops without having an explicit <code>begin</code>, which is very convenient. A <code>while*</code> expression with no non-test expressions is a syntax error, as is one with no expressions at all.</p> <p>Example</p> <pre><code>&gt;&gt;&gt; (val x 5)\nvariable x = 5\n&gt;&gt;&gt; (while* (&gt; x 0) (println x) (set x (- x 1)))\n5\n4\n3\n2\n1\n0\n</code></pre>"},{"location":"assignments/1/partB/#c-for","title":"c. <code>for</code>","text":"<p>Add a C-like <code>for</code> loop with this translation:</p> <pre><code>(for &lt;begin-exp&gt; &lt;test-exp&gt; &lt;incr-exp&gt; (&lt;body-exp1&gt; &lt;body-exp2&gt; ... &lt;body-expN))\n==&gt;\n(begin &lt;begin-exp&gt;\n  (while &lt;test-exp&gt;\n    (begin &lt;body-exp1&gt; &lt;body-exp2&gt; ... &lt;body-expN&gt; &lt;incr-exp&gt;)))\n</code></pre> <p>Example</p> <pre><code>&gt;&gt;&gt; (val x 0)\nvariable x = 0\n&gt;&gt;&gt; (val n 0)\nvariable n = 0\n&gt;&gt;&gt; (for (set x 5) (&gt; x 0) (set x (- x 1)) ((println x) (set n (+ n 1))))\n5\n4\n3\n2\n1\n0\n&gt;&gt;&gt; n\n5\n</code></pre> <p>Note</p> <p>Don't forget the parentheses around the body expressions! Think of it as a <code>begin</code> expression without the <code>begin</code> keyword.</p> <p>Note that for all of these changes, you will have to decide what the location of the newly-created forms are. Here are some guidelines:</p> <ul> <li> <p>For <code>do-while</code>, use the <code>do-while</code> location for the generated <code>begin</code> and <code>while</code> forms.</p> </li> <li> <p>For <code>while*</code>, use the <code>while*</code> location for the generated <code>while</code> and <code>begin</code> forms.</p> </li> <li> <p>For <code>for</code>, use the <code>for</code> location for the outer generated <code>begin</code> form and the generated <code>while</code> form. For the inner generated <code>begin</code> form, use the location of the S-expression <code>List</code> constructor that contains the <code>begin</code> expressions.</p> </li> <li> <p>For expressions that pass through unchanged, keep the location the same.</p> </li> </ul>"},{"location":"assignments/1/partB/#3-and-and-or","title":"3. <code>and</code> and <code>or</code>","text":"<p>[10 points]</p> <p>The initial basis of the Imp language is split between primitive functions and user functions. The user functions are defined in the string <code>initial_basis</code> near the end of the file. Two of these definitions are quite unsatisfying:</p> <pre><code>(define and (b c) (if b c b))\n(define or (b c) (if b b c))\n</code></pre> <p>The reason these are bad is that <code>and</code> and <code>or</code> should have short-circuit semantics: if the first argument is <code>0</code> (for <code>and</code>) or <code>1</code> (for <code>or</code>) the second argument should never be evaluated. In this problem we will implement a correct version of <code>and</code> and <code>or</code> with the appropriate semantics.</p> <p>Before we begin, note that this could be done the same way we implemented <code>while*</code> and <code>do-while</code>: by making <code>and</code> and <code>or</code> syntactic sugar for <code>if</code> expressions. However, it's instructive to do it a different way. Here is what we want you to do:</p> <ol> <li> <p>Remove the definitions of <code>and</code> and <code>or</code> from the <code>initial_basis</code> string.</p> </li> <li> <p>Add <code>and</code> and <code>or</code> to the keywords list.</p> </li> <li> <p>Extend the AST <code>exp</code> type definition with two new constructors: <code>And (&lt;loc&gt;, &lt;exp&gt;, &lt;exp&gt;)</code> and <code>Or (&lt;loc&gt;, &lt;exp&gt;, &lt;exp&gt;)</code>.</p> </li> <li> <p>Extend <code>parse_expr</code> so that the S-expression corresponding to <code>(and &lt;exp&gt; &lt;exp&gt;)</code> gets converted to the corresponding AST form and similarly for <code>(or &lt;exp&gt; &lt;exp&gt;)</code>.</p> </li> <li> <p>Extend <code>eval_expr</code> with cases for <code>And</code> and <code>Or</code> AST forms. These should just dispatch to <code>If</code> AST forms according to the rules:</p> </li> </ol> <pre><code>And (l, e1, e2) ==&gt; If (l, e1, e2, e1)\nOr (l, e1, e2) ==&gt; If (l, e1, e1, e2)\n</code></pre> <p>with one caveat: make sure you do not compute the value of <code>e1</code> or <code>e2</code> more than once. (There are different ways to achieve this.)</p> <p>Again, make sure that the locations used in derived forms are reasonable ones.</p>"},{"location":"assignments/1/partB/#4-improving-while-and-begin","title":"4. Improving <code>while</code> and <code>begin</code>","text":"<p>[10 points]</p> <p>The way that <code>while</code> and <code>begin</code> expressions are evaluated in the <code>eval_expr</code> function is somewhat inefficient. In both cases, we sometimes have to create new <code>while</code>/<code>begin</code> expressions and evaluate them in order to evaluate the full expression (this was spelled out in the operational semantics). However, why should we dispatch the <code>while</code>/<code>begin</code> subexpression to <code>eval_expr</code> just so it can wind up in the exact same point in the code we are already in? The extra case analysis is completely unnecessary. Rewrite the code for these forms so that you never have to recurse on a newly-created <code>while</code> or <code>begin</code> subexpression.</p> <p>There are two ways to do this: imperatively and functionally. The imperative way would use an OCaml <code>while</code> loop and reference variables. We want you to do it the other way: using a tail-recursive helper function (for <code>while</code>) or using either a tail-recursive helper function or an equivalent higher-order function (for <code>begin</code>).</p>"},{"location":"assignments/1/partB/#5-adding-support-for-local-variables","title":"5. Adding support for local variables","text":"<p>[20 points]</p> <p>One glaring weakness of the Imp language is that it has no local variables, even though it has an environment for storing them. In this problem we will implement them.</p> <p>The syntax for function definitions will change to the following:</p> <pre><code>(define function-name (formals) {(locals &lt;locals&gt;)} expression)\n</code></pre> <p>The curly braces are not part of the concrete syntax; they mean that the <code>locals</code> declaration can be omitted, in which case the locals list is empty. In other words:</p> <pre><code>(define foo (x y z) &lt;exp&gt;)\n</code></pre> <p>is the same as:</p> <pre><code>(define foo (x y z) (locals) &lt;exp&gt;)  ; empty locals list\n</code></pre> <p>Here's an example of a function that uses locals:</p> <pre><code>(define dumb-add (x y z)\n  (locals sum)\n  (begin\n    (set sum x)\n    (set sum (+ sum y))\n    (set sum (+ sum z))\n    sum))\n</code></pre> <p>Here's the function being called:</p> <pre><code>&gt;&gt;&gt; (dumb-add 1 2 3)\n6\n</code></pre> <p>Here are the steps we want you to go through to implement locals:</p> <ol> <li> <p>Add <code>locals</code> to the keywords list.</p> </li> <li> <p>Extend the <code>Define</code> AST form in the <code>def</code> type to contain a list of identifiers corresponding to local variables. This list should be separate from the <code>id list</code> of function arguments.</p> </li> <li> <p>Extend <code>parse_def</code> so that it recognizes function definitions with locals and parses them to the new <code>Define</code> form. Function definitions without locals will also be parsed to the new <code>Define</code> form, but the locals list will be empty. Check that all the locals identifiers are valid and that they are unique (as is currently done for the function parameters). Note that it's OK to use the same name for a local variable and a function parameter; in such cases, the local variable takes precedence.</p> </li> <li> <p>Extend the <code>UserFunction</code> definition so it includes locals.</p> </li> <li> <p>When a function call with a <code>UserFunction</code> is evaluated, all locals are added to the local variable environment with an initial value of <code>0</code>. Then evaluation proceeds normally.</p> </li> </ol> <p>Try to do this without copying code unnecessarily.</p>"},{"location":"assignments/1/partC/","title":"Part C: Programming in extended Imp (15 points)","text":"<p>Rewrite your functions from part A as follows. Even if you used helper functions to implement your functions in part A (which is allowed), don't do that here; all functions should be self-contained. Also, none of these functions should use recursion. This code will go into the file <code>lab1c.imp</code>.</p> <p>Note</p> <p>Even if the previous implementation(s) of the functions you are writing used helper functions, do not use helper functions for any of the functions here. Having local variables will make helper functions unnecessary.</p>"},{"location":"assignments/1/partC/#1-sigma3","title":"1. <code>sigma3</code>","text":"<p>[4 points]</p> <p>Rewrite the <code>sigma2</code> function so it uses <code>while*</code> and local variable(s). Call the new function <code>sigma3</code>.</p>"},{"location":"assignments/1/partC/#2-exp2","title":"2. <code>exp2</code>","text":"<p>[4 points]</p> <p>Rewrite <code>exp</code> so it uses <code>while*</code> and local variable(s). Call the new version <code>exp2</code>.</p>"},{"location":"assignments/1/partC/#3-fact3","title":"3. <code>fact3</code>","text":"<p>[3 points]</p> <p>Define a version of <code>fact2</code> which uses local variable(s) and a <code>for</code> loop. Call it <code>fact3</code>.</p>"},{"location":"assignments/1/partC/#4-fib3","title":"4. <code>fib3</code>","text":"<p>[4 points]</p> <p>Define a version of <code>fib2</code> which uses local variable(s) and a <code>for</code> loop. Call it <code>fib3</code>.</p>"},{"location":"intro/software/","title":"Installing the course software","text":"<p>Here are the steps you should go through to install OCaml on your computer. If you have already installed OCaml (e.g. because you took CS 4), you can skip most of these instructions. Please make sure that you are running a current version of OCaml (version 5.1.1 or later). If not, use <code>opam</code> to upgrade your OCaml version as described below.</p>"},{"location":"intro/software/#installing-ocaml-and-opam","title":"Installing OCaml and <code>opam</code>","text":"<p>See the instructions on the OCaml website.</p> <p>Note</p> <p><code>opam</code> is the OCaml package manager. It should be installed along with OCaml.</p> <p>Be aware that the version numbers may have changed since that document was written. Be sure to install the correct version! For this term, we are using OCaml version 5.1.1.</p>"},{"location":"intro/software/#macos","title":"MacOS","text":"<p>The instructions for MacOS refer to the Homebrew package manager, which needs to be installed first.</p> <p>Note</p> <p>Homebrew does not come pre-installed on Macs, but it is easy to install and is incredibly useful. Almost any open-source command-line software you can imagine can be installed using Homebrew with a single command. (This includes most programming languages, including OCaml).</p> <p>Ignore the warnings about using Homebrew on Mac M1 processors, which are obsolete. It works fine now.</p> <p>We strongly recommend that you do not use the MacPorts package manager (incorrectly referred to as \"MacPort\" in the OCaml website). Use Homebrew instead.</p>"},{"location":"intro/software/#linux","title":"Linux","text":"<p>If you are using Linux, you can install OCaml using your system's package manager. If your Linux is an Ubuntu variant (the most common kind), you should install OCaml using the Ubuntu package manager <code>apt</code> (also known as <code>apt-get</code>). Installation instructions for Ubuntu and other Linux distributions are available on this page. For Ubuntu the commands are:</p> <pre><code>$ sudo apt update\n$ sudo apt install opam\n</code></pre> <p>The <code>sudo</code> is so you don't have to install the software as the root user. You may be asked to enter your password, which you should do.</p> <p>Note</p> <p>The instructions on the website also tell you to do this first:</p> <pre><code>$ sudo add-apt-repository ppa:avsm/ppa\n</code></pre> <p>This is unnecessary, since we will show you how to upgrade OCaml below.</p>"},{"location":"intro/software/#windows","title":"Windows","text":"<p>If you are using Windows, your should install a Linux system inside of Windows using the Windows Subsystem for Linux (WSL) Then you can use <code>apt</code> like on any Ubuntu Linux system. Don't try to install OCaml natively on Windows; although this may be possible, you are very likely to run into problems beyond the capability of the instructors to solve. Please use WSL!</p>"},{"location":"intro/software/#initialization","title":"Initialization","text":"<p>Once you have a version of OCaml and <code>opam</code> installed, you need to set it up, and, if necessary, upgrade the versions. Go through the following steps.</p> <ul> <li> <p>Start a terminal. If you are running MacOS, you can use the Terminal program. If you're using Windows/WSL, you can either use Windows Terminal or use Visual Studio Code and start a terminal inside the editor. If you're using Windows, make sure you are running Ubuntu/WSL inside the terminal and not Powershell! Both Windows Terminal and VS Code allow you to select either one, once WSL has been installed.</p> </li> <li> <p>Initialize <code>opam</code> by typing <code>opam init</code> in a terminal and following the instructions.</p> <p>Note</p> <p>There is an issue with initializing <code>opam</code> inside of WSL (Windows Subsystem for Linux). Basically, due to the way WSL works, you have to initialize <code>opam</code> differently by disabling sandboxing. This theoretically can cause some problems if a package does something really stupid, but it probably won't. The fix is to use this command instead of just <code>opam init</code>:</p> <pre><code>$ opam init --disable-sandboxing\n</code></pre> </li> <li> <p>At the end of the <code>opam init</code> command, it will ask you to run <code>eval ${opam env}</code><sup>1</sup> to set up the <code>PATH</code> variable of your shell to point to the <code>opam</code> directories. This is important, because if you don't do this, adding new packages (and new OCaml versions) will not work. Opam will also ask you if it can change your shell initialization file (e.g. <code>~/.bashrc</code> for <code>bash</code> or <code>~/.zshrc</code> for <code>zsh</code>) by adding some commands. You should say yes, because if you don't, every time you start up a new terminal you will have to type <code>eval ${opam env}</code> to get <code>opam</code> to work correctly.</p> </li> <li> <p>In your terminal, type:</p> <pre><code>$ opam update\n$ opam upgrade\n</code></pre> <p>to make sure the package repository is up to date and all OCaml packages have been upgraded to the most recent versions.</p> </li> <li> <p>Check the OCaml version by typing <code>ocaml --version</code>. If it's the desired version (which is 5.1.1 this term), you are done with this part. Otherwise do</p> <pre><code>$ opam switch create 5.1.1\n</code></pre> <p>and wait for the new version to be installed. (This will take a while.)</p> </li> <li> <p>Install some libraries and programs:</p> <pre><code>$ opam install utop dune ocamlformat\n</code></pre> <p>This will install the <code>utop</code>, <code>dune</code>, and <code>ocamlformat</code> programs, as well as a number of OCaml libraries you don't have to worry about.</p> <p><code>utop</code> is the OCaml interactive interpreter. We will be working with this a lot!</p> <p>Note</p> <p>There is a more primitive interactive interpreter just called <code>ocaml</code> that comes with the OCaml distribution. We won't use this, because <code>utop</code> is vastly more featureful and nicer to use.</p> <p><code>dune</code> is the OCaml compilation manager. We will introduce this when we need it.</p> <p><code>ocamlformat</code> is an auto-formatter for OCaml code. You don't actually need this, but it gets handy when you are working with longer files of code and you want to make sure everything is formatted neatly.</p> </li> </ul>"},{"location":"intro/software/#using-ocaml","title":"Using OCaml","text":"<p>There are only a few things you need to know in order to use OCaml effectively.</p>"},{"location":"intro/software/#starting-ocaml","title":"Starting OCaml","text":"<p>Open a terminal and type:</p> <pre><code>$ utop\n</code></pre> <p>at the terminal prompt. (The <code>$</code> is the terminal prompt; don't type that.) This will bring up the OCaml interactive interpreter, which is a good environment for experimenting with the language and for testing code you've written. (This is similar to the Python interactive interpreter.)</p> <p><code>utop</code> makes it possible to easily recall and edit previously-input lines of text by using the up and down arrow keys. To see what it can do, start up <code>utop</code>:</p> <pre><code>$ utop\n</code></pre> <p>and type the following commands (one per line, hitting the return key at the end of each line):</p> <pre><code># Printf.printf \"hello\\n\" ;;\n# Printf.printf \"goodbye\\n\" ;;\n</code></pre> <p>Note that the OCaml interpreter prompt is the hash sign (<code>#</code>); don't type that! These lines should, when evaluated, print the words <code>\"hello\"</code> and <code>\"goodbye\"</code> respectively. Once you've done this, you should be able to recall either line by using the up arrow key. For instance, you can hit the up arrow key once to get the line:</p> <pre><code>Printf.printf \"goodbye\\n\" ;;\n</code></pre> <p>and edit it so that it says:</p> <pre><code>Printf.printf \"hasta la vista\\n\" ;;\n</code></pre> <p>When you hit return, it should print out <code>\"hasta la vista\"</code> on a separate line. This feature makes line editing much easier. You can also use control-a (hold the control key down and type <code>a</code>) to get to the beginning of a line you are editing and control-e to get to the end. control-l (lower-case L) clears the terminal and puts the cursor at the top of the terminal window.</p> <p>Exit the interpreter by typing control-d (this is just like Python). You can also type <code>#quit;;</code> at the prompt:</p> <pre><code># #quit;;\n</code></pre> <p>and that will also work.</p>"},{"location":"intro/software/#configuring-utop","title":"Configuring <code>utop</code>","text":"<p>One annoying thing about <code>utop</code> is that it tends to go overboard on command completion.  You can disable this by typing this inside <code>utop</code>:</p> <pre><code># #utop_prompt_dummy;;\n# UTop.set_show_box false;;\n</code></pre> <p>It's annoying to type this every time you start <code>utop</code>, so what I do is make a <code>utop</code> initialization file called <code>init.ml</code> and put it in the directory <code>~/.config/utop</code> (creating that directory if necessary). Then these commands will be run every time <code>utop</code> starts.</p> <p>Note</p> <p>Unfortunately, this will not work properly if used in a directory that has a <code>.ocamlinit</code> file in it (usually your home directory). There are workarounds, but most of the time it will work properly.</p>"},{"location":"intro/software/#using-visual-studio-code","title":"Using Visual Studio Code","text":"<p>You can use any plain text editor you like to write OCaml code, but we recommend you try Visual Studio Code (also known as VS Code), which has excellent OCaml support. In order to use it, you need to do the following steps:</p> <ul> <li> <p>Install the OCaml Language Server Protocol by typing this into a terminal:</p> <pre><code>$ opam install ocaml-lsp-server\n</code></pre> <p>A language server protocol provides a way for editors to query languages so that things like command completion and type information can be displayed in the editor while you're editing code.</p> </li> <li> <p>Install Visual Studio Code from the VS Code website.</p> </li> <li> <p>When inside VS Code, look at the Extensions pane (select View/Extensions from the menu). Type \"OCaml\" into the search bar at the top, and select and install \"OCaml Platform\".</p> </li> </ul> <p>Now you will get nice syntax highlighting and code completion when you edit OCaml source code. You can also start a terminal while inside VS Code to test your code by running the OCaml interpreter.</p> <ol> <li> <p>Or possibly <code>eval ${opam config env}</code> or something similar. It all does the same thing.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/welcome/","title":"Welcome to CS 131!","text":"<p>This book serves as the official course notes, so that lectures are less of a brain dump of details and more an opportunity to interactively go through course topics, answer questions, and get you thinking about the material. In addition, we will be posting most of the course-related content in these pages, including:</p> <ul> <li>the course syllabus   (which you should read as soon as possible!)</li> <li>administrative details</li> <li>instructions on how to set up your computer with the course software</li> <li>links to lecture slides</li> <li>assignments</li> <li>coding notes and tips</li> </ul> <p>and anything else we consider useful. Your feedback on these notes will be very helpful to us in improving them, so please let us know if anything is hard to understand or if something that should be here isn't.</p> <p>Course-related material we won't post here includes:</p> <ul> <li>code supplied to students for assignments</li> <li>some administrative information e.g. contact information</li> </ul> <p>These will be posted on the course Canvas page in the Modules section.</p>"},{"location":"intro/welcome/#instructor-and-course-staff","title":"Instructor and course staff","text":"<p>The course instructor is Mike Vanier (mvanier@cms.caltech.edu).</p> <p>The TAs are listed in the syllabus.  Their contact information will be posted on the course Canvas page.</p>"},{"location":"intro/welcome/#what-this-course-is-about","title":"What this course is about","text":"<p>CS 131 is a course on implementing programming languages. We will be implementing interpreters for several programming languages. Some will be imperative, and some will be functional. Some will be untyped, some dynamically typed, and some statically typed. We will learn how programming languages differ \"from the inside\" i.e. how different features of programming languages affect the implementations of these languages.</p> <p>This is an extremely interesting and fun topic, and it's one of my personal favorite subjects. Implementing programming languages can be very addicting, but it is also a lot of work. We will be using the OCaml language exclusively in this course.</p> <p>We hope you enjoy the course!</p>"}]}