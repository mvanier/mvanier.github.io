Introduction
============

Welcome to CS 115!
------------------

This book serves as the official course notes, so that lectures are less of a
brain dump of details and more an opportunity to interactively go through
course topics, answer questions, and get you thinking about the material.
In addition, we will be posting most of the course-related content in these
pages, including:

* the course :doc:`syllabus <admin/Syllabus>`
  (which you should read as soon as possible!)
* administrative details
* instructions on how to set up your computer with the course software
* assignments
* coding notes and tips

and anything else we consider useful.  Your feedback on these notes will be
very helpful to us in improving them, so please let us know if anything is hard
to understand or if something that should be here isn't.

Course-related material we won't post here includes:

* lecture slides
* research papers of interest
* code supplied to students for assignments
* some administrative information |eg| contact information

These will be posted on the course Canvas page in the Modules section.


Instructor and course staff
---------------------------

The course instructor is Mike Vanier (mvanier@cms.caltech.edu).

The TAs are listed in the syllabus.  Their contact information
will be posted on the course Canvas page.


What this course is about
-------------------------

This course is an introduction to lazy functional programming
using the Haskell_ programming language.
The prerequisite for taking this course is to have already taken CS 4
(which means that you know how to do functional programming
in the OCaml_ language); 
this is therefore not a course for students who have never done
functional programming before.
In a sense, if CS 4 is the introductory functional programming course,
this is the advanced functional programming course.

This course exists for the following reasons.

#. Haskell is one of the best-known and most-used functional programming
   languages in use today.

#. Haskell has a unique evaluation model (lazy evaluation);
   it is the only programming language in wide use that uses this
   evaluation strategy.

#. Haskell is a *pure* functional language, in contrast to OCaml,
   which is *impure* (has non-functional features).
   This has a number of interesting consequences.

#. Haskell has a number of abstractions that are either not found
   in other functional languages, or are not nearly as easy to use
   in those languages.

#. Haskell has some features (notably monads) which are notoriously
   difficult for new Haskell programmers to learn;
   this course will make it much easier for you to understand them.

You might think that having a different evaluation model
is not very significant, but as we will see,
it turns out to have very far-reaching effects on the way that we
write functional code.
Some ways of writing code in OCaml (|eg| tail recursion)
are much less useful in Haskell,
while some ways (|eg| function composition)
are much more useful because of lazy evaluation.

In general, programming in Haskell feels more "high-level"
than programming in OCaml, and it's worth experiencing this
to be able to make an informed judgment about which language
is best suited for which tasks. [1]_
Haskell is also very productive and great fun to program in!

We hope you enjoy the course!

----

.. rubric:: Footnotes

.. [1] We don't want to take sides when comparing OCaml and Haskell.
   Both are excellent languages which have useful features
   the other doesn't.  OCaml has a much more powerful module system,
   while Haskell has many abstractions that OCaml lacks.
   Well-rounded functional programmers should know both languages.
