.. _Syllabus:

Syllabus
========

This is the course syllabus for CS 115 (Functional Programming)
for the Spring 2023 term.

Instructor
----------

The instructor/lecturer for the course is Mike Vanier
(mvanier@cms.caltech.edu).
Mike's pronouns are *he/him*.


Lectures
--------

Lectures will be held in room 105 of the Annenberg building
on Mondays, Wednesdays, and Fridays from 2 PM to 3 PM.


Teaching assistants
-------------------

Here are the teaching assistants for the course.
TA contact information are posted on the course Canvas page.
TA office hours are posted on the course Piazza page.

* Isha Chakraborthy
* Julen Lujambio
* Andrew Ma
* Sophie Piao
* Philippa (Pippa) Richter
* Felianne Teng


Course description
------------------

From the Caltech catalog:

.. pull-quote::

   This course is a both a theoretical and practical introduction to functional
   programming, a paradigm which allows programmers to work at an extremely high
   level of abstraction while simultaneously avoiding large classes of bugs that
   plague more conventional imperative and object-oriented languages. The course
   will introduce and use the lazy functional language Haskell exclusively. Topics
   include: recursion, first-class functions, higher-order functions, algebraic
   data types, polymorphic types, function composition, point-free style, proving
   functions correct, lazy evaluation, pattern matching, lexical scoping, type
   classes, and modules. Some advanced topics such as monad transformers, parser
   combinators, dynamic typing, and existential types are also covered.


Recommended textbooks
---------------------

There is no required text.  There are a number of textbooks that can be used to
supplement the course material:

* *Haskell, the Craft of Functional Programming*, 3rd ed. by Simon Thompson

* *Programming in Haskell*, 2nd ed. by Graham Hutton

* `Learn You a Haskell For Great Good`_ by Miran
  :raw-html:`Lipova&#269;a`
  (free to read online)

* `Haskell Programming From First Principles`_
  by Christopher Allen and Julie Moronuki

* `Thinking Functionally with Haskell`_ by Richard Bird

* `Algorithm Design with Haskell`_ by Richard Bird and Jeremy Gibbons

* `Effective Haskell`_ by Rebecca Skinner

.. _Learn You a Haskell For Great Good: http://learnyouahaskell.com
.. _Haskell Programming From First Principles: http://haskellbook.com
.. _Thinking Functionally with Haskell: https://www.cs.ox.ac.uk/publications/books/functional
.. _Algorithm Design with Haskell: https://www.cs.ox.ac.uk/publications/books/adwh
.. _Effective Haskell: https://pragprog.com/titles/rshaskell/effective-haskell/


External websites
-----------------

There will be a Piazza site, which you will be enrolled in
if you are registered for this course.

For homework submission and grading, we will use CodePost_.


Office hours
------------

Office hours will either be held in-person or on Zoom,
at the discretion of the teaching assistant.
Mike will hold his office hours on Zoom.
Office hour times will be posted on Piazza.


Grading scheme
--------------

CS 115 is on grades. There are no exams.

There will be 6 assignments, worth 10 marks each.  Each assignment is divided
into sections.  Each section is given an integer grade from 0 to 10.
The overall grade of the assignment is the *average* grade of all sections.

.. note::

   The CodePost grading system doesn't handle averages, so on CodePost,
   the grade will be the *sum* of the section grades.
   This will be divided by the number of sections to give the actual grade.

In addition, there will be an end-of-course survey
which will be worth 4 marks if you fill it out.

The maximum number of marks is (:math:`10 \times 6 + 4 = 64`).
This will be scaled to :math:`100` and the grades will be assigned as follows:

.. list-table::
   :widths: 25 25
   :header-rows: 1

   * - Numerical grade (out of 100%)
     - Letter grade
   * - 95-100%
     - A+
   * - 90-95%
     - A
   * - 85-90%
     - A-
   * - 80-85%
     - B+
   * - 75-80%
     - B
   * - 70-75%
     - B-
   * - 65-70%
     - C+
   * - 62-65%
     - C
   * - 60-62%
     - C-
   * - 58-60%
     - D+
   * - 55-58%
     - D
   * - < 55%
     - F


Redoing assignments
-------------------

After you receive your initial grade on an assignment,
you have *one week* to submit a redo.
Redos will be submitted as a separate CodePost assignment called
``Assignment N (rework)`` (for assignment ``N``).
Late redos (received after the 1-week redo window)
will not be graded and your previous grade will stand.
You may not submit more than one redo per assignment.


Late policy for assignments
---------------------------

If an assignment is late when first submitted, marks are deducted at the rate
of 2.0 marks/day.  These marks can't be regained through rework.  If a rework
is late (|ie| is submitted more than one week after the original grade was
submitted), it doesn't count, and the previous grade stands.

.. note::

   If an assignment is submitted on time, but is missing one or more sections,
   those sections will be graded as a 0.
   The assignment can be reworked, of course,
   but assuming the sections that were missing on the initial submission
   are submitted with the rework,
   there is no additional rework for these sections.
   This means (for instance) if you don't submit a section
   on the initial submission but do submit it in the rework,
   the grade of that section in the rework is final --
   you don't get to rework it just because you hadn't submitted it before.
   So please don't leave out sections!
 
Students may request extensions for assignments due to unusual circumstances.
These extensions have to be approved by the course instructor (Mike).


Assignment due dates
--------------------

Assignments will be due on |dueday| at |duetime| unless otherwise indicated.
Note that a due time of |duetime| means early that morning, so effectively it
means very late the previous evening.


Attendance and participation
----------------------------

Attendance and participation currently do not count towards the final grade.
However, we strive to make lectures interactive and do a lot of live coding
during lectures.  Missing out on this will deprive you of many of the benefits
of the course (as well as a lot of the fun!).  All lectures will be recorded in
case you can't attend a lecture or which to review the material.  In addition,
all lectures slides will be posted.


Academic integrity
------------------

Caltechâ€™s Honor Code states that: "No member of the Caltech community shall
take unfair advantage of any other member of the Caltech community."

*Understanding and avoiding plagiarism*: Plagiarism is the appropriation of
another person's ideas, processes, results, or words without giving appropriate
credit, and it violates the honor code in a fundamental way. You can find more
information at `this page <http://writing.caltech.edu/resources/plagiarism>`_.


Collaboration policies
----------------------

The course collaboration policies are listed in the
:doc:`/content/admin/Collaboration_policies` page in this book.

.. note::

   **Please read the collaboration policies!**
   You are responsible for knowing what is an isn't acceptable collaboration,
   and if you over-collaborate you may be sent to the Board of Control,
   which is never pleasant.


Software
--------

See the :doc:`Software </content/Software>` page
for information on installing the course software.


Diversity and inclusion
-----------------------

You all belong in this class and as such should expect to be treated by your
classmates and the course staff with respect. It is our goal, as the course
staff, to provide an interesting and challenging environment that is conducive
to learning. If any incident occurs that challenges this commitment to a
supportive and inclusive environment, please let the instructors know so the
issue can be addressed.

Accessibility
-------------

We consider accessibility to be an extremely important issue.  If some aspect
of the course is making it more difficult for you to learn the material, we
want to hear about it!  We want this course to be an enjoyable experience for
you, not a burden.

Student Wellness
----------------

It is very important to us that you take care of your mental wellness
throughout the course. Everyone on the course staff is available to chat, and
you can always attend office hours for a non-academic conversation if
necessary.

Students with documented disabilities
-------------------------------------

Students who may need an academic accommodation based on the impact of a
disability must initiate the request with Caltech Accessibility Services for
Students (CASS).  Professional staff will evaluate the request with required
documentation, recommend reasonable accommodations, and prepare an
Accommodation Letter for faculty dated in the current quarter in which the
request is being made. Students should contact CASS as soon as possible, since
timely notice is needed to coordinate accommodations.
See the `CASS website <http://cass.caltech.edu/>`_ for more information.

Undergraduate students should contact Dr. Lesley Nye, associate Dean of
Undergraduate Students (administrative contact: Beth Larranaga) and graduate
students should contact Dr. Kate McAnulty, Associate Dean of Graduate Studies
(administrative contact: Jacob Dalton).

----

.. rubric:: Footnotes

