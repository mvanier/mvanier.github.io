TODO ideas
==========

**********

Lecture 17, slides 46-47:
What happens when we don't use fundeps but define both

  instance MonadError String (Either ArithmeticError)
  instance MonadError ArithmeticError (Either ArithmeticError)

?  Call it MyMonadError and re-create the error-handling monad (MyEither?).
Can you get a type error at run time, or do you get an error with e.g.
overlapping instances?
ANSWER: NEITHER.  Actually, the types of throwError and catchError are enough
to constrain the type checker to only accept valid code.  I'm not sure that
fundeps are that necessary; all they seem to do is allow a programmer to 
prevent other programmers from defining useless instances by mistake.
Need to read some papers on this.
Reference: http://www.haskell.org/haskellwiki/Functional_dependencies
UPSHOT: Fundeps allow the type checker to figure out some types without
requiring the user to manually specify them.  This makes code cleaner.

Possibly this could lead to a Ben Bitdiddle problem where Ben forgets to put
in an obvious fundep and instead has to annotate his code with explicit types
left and right.  Show how judiciously adding a fundep can clean up the code!

**********

For problem A.4, it would be very interesting to investigate how hard it would
be to design datatypes such that it was impossible to violate the invariants.
In other words, an expression:

* must start and end with a number
* must have operators between each pair of numbers

This will do:

  type Expr = Expr [(Num, Op)] Num

or

  type Expr = Expr Num [(Op, Num)]

TODO: Redo the problem using this datatype, perhaps as an add-on to the
existing problem.

**********

