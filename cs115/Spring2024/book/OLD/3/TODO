TODO list
=========

== 2022

I added a subsection on ScopedTypeVariables.

== OLD

Optional variation on a theme
-----------------------------

There is an interesting representation of natural numbers as either:

-- zero
-- twice an integer
-- twice an integer plus 1

For instance, you could have:

data BinaryNat =
    Zero
  | Twice BinaryNat
  | TwicePlusOne BinaryNat

This could be used as an alternate datatype for the first section.  It is more
efficient than unary representations in that the length of the integer is
logarithmic in the size of the integer.  Even if I kept the first section as is,
this would be fun to play with.

Church numerals
---------------

It would be fun to define a factorial function that is so generic it can even
work on Church numerals, and then use it on them.


Tests to add to SparseMatrixTests.hs
------------------------------------

Write a function to turn a list of list of integers into a sparse matrix.
Use this to simplify the existing tests and write new ones.

Create a 4x4 matrix and check that all the components of the matrix are correct
(the bounds, the row indices, the column indices, and the contents).  Use the
existing 4x4 matrices in the HUnit portion for this.

Test that random in-bounds locations give the right results, including ones that
return zero because the indices are not in rowIndices and/or colIndices.

MAYBE: Learn how to test "expect a failure" type conditions (maybe with e.g. HUnit).

Probably should capture the HUnit results and print a success/failure message.


Other stuff
-----------

(N.B. This problem has been removed.)

The Functor/OrderedFunctor example should be rethought in terms of the
DatatypeContexts extension; see:
http://stackoverflow.com/questions/7438600/datatypecontexts-deprecated-in-latest-ghc-why
http://www.haskell.org/ghc/docs/7.4.1/html/users_guide/data-type-extensions.html
http://hackage.haskell.org/trac/haskell-prime/wiki/NoDatatypeContexts

Also, you can now define a Functor that imposes arbitrary constraints on its
instances using the ConstraintKinds and TypeFamilies extension; see

http://dorchard.wordpress.com/2011/09/22/constraint-kinds-in-haskell-finally-bringing-us-constraint-families/

for an example of how this works.  Pretty effing cool!

