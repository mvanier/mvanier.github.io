@simpleHeader[
  :title{New problem}
]

@section{The problem}

@Ol{

@Li{

@p{@b{[30]} In mathematics, an !{associative} operator ${OP} is one that has the
property that ${x OP (y OP z) == (x OP y) OP z}.  In other words, in a chained
operator expression of the form ${x OP y OP z}, where you put the parentheses
doesn't matter; you can interpret the expression as either ${x OP (y OP z)} or
${(x OP y) OP z} and it will mean the same thing.  Associativity in programming
languages like Haskell doesn't usually mean this kind of associativity, because
most programming languages (including Haskell) aren't powerful enough to express
the concept of mathematical associativity.  Instead, associativity (more
technically known as !{fixity}) is just a syntactic property of an operator
which allows the parser to correctly interpret expressions of the form ${x OP y
OP z}.  If the operator ${OP} is left-associative, this will be interpreted as
${(x OP y) OP z} (put the parentheses around the leftmost operator
subexpression); if it's right-associative, it will be interpreted as ${x OP (y
OP z)} (put the parentheses around the rightmost operator subexpression), and if
it's non-associative, simply disallow the expression altogether (!{i.e.} require
the programmer to explicitly put the parentheses in to indicate what the
intended meaning is).}

@p{Haskell allows you to define your own operators and to set both the
precedence of the operators (from 1 to 10) and their associativities (${infix}
for non-associative, ${infixl} for left-associative, or ${infixr} for
right-associative).  The default associativity (in case you don't set it) is
left-associative.  Some operators have type signatures which require a
particular associativity to work in chained operator expressions, while with
other operators, you have a choice, though sometimes one choice is much better
than another.  For instance, the "cons" operator (${:}) must be
right-associative for expressions like ${1 : 2 : [3]} to work, while the
addition operator (${+}) can be either right- or left-associative (it's
actually left-associative, but it would work correctly either way).  Some
operators like the division operator (${/}) could theoretically be either
right- or left-associative but are left-associative to conform to mathematical
practice (because the ${/} operator is not associative in the mathematical
sense, so right-associative and left-associative interpretations of chained
operators give different results).  Some operators like the equality operator
(${==}) are non-associative; you might wish that an expression like ${x == y ==
z} means the same thing as ${(x == y) && (x == z)} but it doesn't (in fact,
it's a syntax error).  This makes sense, because ${x == (y == z)} requires that
${x} but not ${y} or ${z} be a ${Bool}, while ${(x == y) == z} requires that
${z} but not ${x} or ${y} be a ${Bool}.  The point is, you sometimes have to
think a bit in order to set the associativity of a user-defined operator
correctly.}

@p{Note also that Haskell allows you to set invalid associativities for your
operators!  Any operator can be declared ${infix}, which simply means that
chained operator expressions using that operator become parse errors and are
rejected.  Or an operator which should be declared ${infixr} could be declared
${infixl} instead, which means that chained operator expressions will be
interpreted incorrectly, leading to type errors in some cases.}

@p{This problem has three parts.  The third part is !!{optional} and is worth 1
"honor roll point".  Honor roll points are not part of the regular point system
(it won't bring up your grade for the assignment) but they may be worth
something at the end of the course (we'll figure something out).}

@Ol{

@Li{

@p{For the first part of this problem, we will show you some new operators we've
defined, and you should indicate what the associativity should be.  Here are
your choices:}

@Ol{

*{If neither ${infixr} or ${infixl} will work with chained operator expressions
(!{i.e.} both of them lead to type errors), declare it to be ${infix}
(non-associative).}

*{If the operator can be declared either ${infixr} or ${infixl} without
resulting in a type error for chained operator expressions, declare it ${infixl}
but add a comment stating that it could be ${infixr} as well.}

*{If the operator can be declared as only one of ${infixr} or ${infixl} without
resulting in a type error for chained operator expressions, declare it to be the
correct associativity (either ${infixr} or ${infixl}, whichever works).}

}Ol@

@p{When figuring out if a "chained operator expression" works for either the
${infixr} or ${infixl} associativity, choose whichever values you like as
arguments to the operator; if any choice of arguments works, it's valid for that
associativity.  Give one example of a chained operator expression in that case.
No examples are needed if the correct associativity is ${infix} (!{i.e.}
non-associative).}

@p{Here are the operators (just a description, not a definition):}

@Ol{

*{The operator ${>#<} compares two scores and tells you the winner. For example,
${51 >#< 40 = "First Player"}, and ${21 >#< 21 = "Tie"}. It has type ${Integer
-> Integer -> String}.}

*{The operator ${+|} adds two integers and takes the last digit of their sum.
For example, ${7 +| 6 = 3}. It has type ${Integer -> Integer -> Integer}.}

*{The operator ${&<} appends an integer to the end of a list. For example, ${[1,
2] &< 3 = [1, 2, 3]}. It has type ${[Integer] -> Integer -> [Integer]}, where
${[Integer]} means a list of integers.}

*{An operator ${>&&} that conses an integer twice to the beginning of a list.
For example, ${1 >&& [2, 3] = [1, 1, 2, 3]}.  It has type ${Integer -> [Integer]
-> [Integer]}.}

}Ol@

@Solution{
1. Non-associative (infix). Chaining >#< with itself doesn't type-check no
matter where you put the parentheses.

2. Left-associative (infixl) and right-associative (infixr) are equally good.
This operator is associative in the mathematical sense, so the value of 

  a +| b +| c
  
is the same whether it is parsed as 

  (a +| b) +| c
  
or 

  a +| (b +| c)

Example: 22 +| 35 +| 49 = (22 +| 35) +| 49 = 7 +| 49 = 6 and 22 +| (35 +| 49) =
22 +| 4 = 6, so both infixl and infixr work.

3. Left-associative (infixl). Example: 

     [1, 2] &< 3 &< 4 
     = ([1, 2] &< 3) &< 4
     = [1, 2, 3] &< 4
     = [1, 2, 3, 4]

   Using this operator in a right-associative way doesn't type check.

4. Right-associative (infixr).  Example:

     1 >&& 2 >&& [3, 4]
     = 1 >&& (2 >&& [3, 4])
     = 1 >&& [2, 2, 3, 4]
     = [1, 1, 2, 2, 3, 4]

   Using this operator in a left-associative way doesn't type check.
}Solution@

}Li@

@Li{

@p{Consider an operator ${+#} that adds two integers and tells you how many
digits long their sum is. For example, ${2 +# 800 = 3}, since ${802} is three
digits long. It has type ${Integer -> Integer -> Integer}.  What !{could} its
associativity be in order to allow chained operators to type check (give all
answers that work).  What !{should} its associativity be?  (!{Hint:} Try writing
out some examples.)}

@Solution{

Since the type signature of (+#) is 

  Integer -> Integer -> Integer

then either infixl (left-associative) or infixr (right-associative) will type
check for chained operator expressions.  However, chained operator expressions
of this operator have no real meaning.  For example, consider:

  2 +# 800 +# 234

The intuitive meaning of what we would _like_ this to signify is to add 2, 800
and 234 together and then count the number of digits, which would be 4.
However, from the definition of the operator we have:

  (2 +# 800) +# 234 = 3 +# 234 = 3
  2 +# (800 +# 234) = 2 +# 4 = 1

So neither left- or right-associativity gives a "reasonable meaning", which
means that this operator is best declared as non-associative (infix).

}Solution@

}Li@

@Li{

@p{@b{Honor roll problem (you are not required to do this!)}.  Can you come up
with an operator whose "natural" associativity is right-associative (${infixr})
but which can also be used as a left-associative operator in some cases?  We
exclude operators with the type ${a -> a -> a} for any type ${a} which can
obviously be either left- or right-associative.  Instead, choose an operator of
the type ${a -> b -> b} for some types ${a} and ${b} (which aren't the same
type), declare it ${infixl} (which in real code would probably be a mistake) and
show that you can in fact use it as a left-associative operator given certain
inputs.}

@p{@b{Note:} This question is mostly for fun, like a puzzle, so don't take it
too seriously.}

@Solution{
-- This example shows that even "obviously" right-associative operators
-- can be used in a left-associative way in some cases.

(>&&) :: a -> [a] -> [a]
x >&& y = x : x : y
infixl 8 >&&  -- oops, should be infixr

-- Let's make the best of it!
ns = 1 >&& [2] >&& [[3]] >&& [[[4]]]
   = ((1 >&& [2]) >&& [[3]]) >&& [[[4]]]
   = [1, 1, 2] >&& [[3]] >&& [[[4]]]
   = [[1, 1, 2], [1, 1, 2], [3]] >&& [[[4]]]
   = [[[1, 1, 2], [1, 1, 2], [3]],
      [[1, 1, 2], [1, 1, 2], [3]], [[4]]]
}Solution@

}Li@

}Ol@

}Li@

}Ol@

@end@

