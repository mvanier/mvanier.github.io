Lab 3: call it "IO, IO, It's Off To Work We Go!"


@problem:[30]{Write a Haskell expression which generates an infinite list of
Pythagorean triples, !{i.e.} triples of positive integers ${(a, b, c)} such that
${a^2 + b^2 == c^2}.  Use this to write another expression which returns the
unique Pythagorean triple with ${a + b + c == 1000}.  Write the result in a
comment.}{  

.{!{NOTE}: The naive solution to this problem is unacceptably inefficient.  Your
version must run to completion in ${ghci} in a few seconds.

}{

={
triples :: [(Integer, Integer, Integer)]
triples = ???

-- Answer: 

}


AVERAGE OF A LIST: (type class question)

average :: [a] -> a
average lst = sum lst / length lst


PROVE THAT foldl CANNOT BE USED TO GENERATE AN INFINITE LIST!


**********

reverse definition:

reverse [] = []
reverse (x:xs) = reverse xs ++ [x]

Analyze for efficiency vs. tail-recursive version.
Also note alternate definitions:

reverse = foldl (flip (:)) []

reverse l = rev l []
  where
    rev []     a = a
    rev (x:xs) a = rev xs (x:a)

reverse [1, 2, 3]
reverse (1 : (2 : (3 : [])))
reverse (2 : (3 : [])) ++ [1]
(reverse (3 : []) ++ [2]) ++ [1]
((reverse [] ++ [3]) ++ [2]) ++ [1]
(([] ++ [3]) ++ [2]) ++ [1]
([3] ++ [2]) ++ [1]
((3:[]) ++ [2]) ++ [1]
(3 : ([] ++ [2])) ++ [1]
(3 : [2]) ++ [1]
3 : ([2] ++ [1])
3 : ((2:[]) ++ [1])
3 : (2 : ([] ++ [1]))
3 : (2 : [1])
3 : [2, 1]
[3, 2, 1]

reverse [1, 2, 3]
rev [1, 2, 3] []
rev (1 : (2 : (3 : []))) []
rev (2 : (3 : [])) (1 : [])
rev (3 : []) (2 : (1 : []))
rev [] (3 : (2 : (1 : [])))
(3 : (2 : (1 : [])))
(3 : (2 : [1]))
(3 : [2, 1])
[3, 2, 1]

**********

Evaluate: 

fibs :: [Integer]
fibs = 0 : 1 : zipWith (*) fibs (tail fibs)

**********

Some problems with list comprehensions involving infinite lists e.g.

[(x, y) | x <- [1..], y <- [1..], x + y == 10]

(why doesn't this terminate?)

Answer: Haskell doesn't know that the lists are increasing and can't prove that
later values in the list will always make x + y == 10 fail!

**********

SIMPLE STAND-ALONE PROGRAMS as project for lab 2.

-- e.g. pal: takes a string, returns True if it's a palindrome, else False
   -- stripping punctuation, lowercasing everything

% pal 'Madam, I\'m Adam'
True

**********






