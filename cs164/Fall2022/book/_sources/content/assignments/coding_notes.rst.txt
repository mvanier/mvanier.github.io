OCaml coding notes and tips
===========================

Here are some notes and tips
that should improve your OCaml programming experience.
We also describe our expectations
of how we want you to write your OCaml code,
so don't just skip this document!


Warnings
--------

Warnings are always bad, unless you expect them (|eg| because code is only
partially written).  Never ignore warnings.  Your finished code should *never*
generate warnings.


Functional programming tips
---------------------------

Use functional style by default
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Code should be written in a functional style (no ``ref``\s, arrays, or records
with mutable fields) except where indicated.  Marks will be taken off if this
rule is violated.  We will let you know when it's OK to use imperative idioms.
Certain imperative idioms (like ``while`` and ``for`` loops) are almost never
used, but we do use ``ref`` cells on occasion to make code simpler.

Many of the tips below describe ways to effectively use functional style.
They are not in any particular order, so feel free to browse until you find
something interesting.


Use tail recursion by default
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As you recall, a lot of CS 4 was spent teaching you to write functions using
recursion instead of loops, and specifically tail recursion.  We use tail
recursion because it has desirable space properties, so in general,
when you write a recursive function, try hard to make it tail recursive.
If you can't do this, be prepared to explain why during code reviews.


Persistent data structures
^^^^^^^^^^^^^^^^^^^^^^^^^^

Probably the hardest part of using functional programming effectively is
getting used to persistent data structures (like lists) instead of mutable data
structures (like arrays).

In this course, almost all data structures are persistent, which means that
when you change something in the data structure, it returns the updated version
without altering the input version.  This is very different to how imperative
languages work.

.. Tip::

   If you think you need to use ``List.iter``
   (which would be appropriate for a mutable data structure)
   you almost always want to actually use ``List.fold_left``
   or an iterative helper function
   (which is appropriate for a persistent data structure).

Even though you may find functional programming awkward at first,
it is *vastly* easier to write correct code
in a functional style than in an imperative style.
There is simply less that can go wrong.


Type annotations
^^^^^^^^^^^^^^^^

We *strongly* recommend that you add type annotations
to all functions that are internal to a module.
It will save you a lot of grief.
Just because OCaml can do type inference
doesn't mean that you have to rely on it!
When you specify the types manually,
you will usually get better error messages.

For example, instead of writing this code:

.. code-block:: OCaml

   let rec insert x lst =
     match lst with
       | [] -> [x]
       | h :: t ->
         if x < h then x :: lst else h :: insert x t

write it like this:

.. code-block:: OCaml

   let rec insert (x : 'a) (lst : 'a list) : 'a list =
     match lst with
       | [] -> [x]
       | h :: t ->
         if x < h then x :: lst else h :: insert x t

(Actually, you'd probably rewrite it to be tail recursive, but that's
another topic.)  In many cases, you could substitute a more specific
type for ``'a`` (say, ``int``), which would be beneficial
in the event that the type that was actually passed to ``insert``
was something other than a list of ``int``\s.

Also, don't remove the type annotations once the code is working
"because it looks prettier"; leave them in.
It's good documentation and it will be really important
if you ever have to modify the code.

.. note::

   We didn't have this guideline in CS 4,
   primarily because the code base was so much smaller.  
   The more complicated the code gets,
   the more helpful explicit type annotations are.


Folds are your friend!
^^^^^^^^^^^^^^^^^^^^^^

Programmers new to functional programming are often frustrated by what they
perceive as the difficulty of doing simple things.  A good example of this is
accumulation. You have a list and want to compute some value from the list
elements. For instance, say you want to get the maximum value of the list (and
assume that you only have a two-element ``max`` function to compute maximums).
A Python programmer could immediately write this code:

.. code-block:: Python

   def max_list(lst):
       """Compute the maximum of a list of positive integers."""
       if len(lst) == 0:
           return 0
       mx = lst[0]
       for item in lst:
           mx = max(mx, item)
       return mx

In OCaml, we do this sort of thing using folds, specifically left folds.

.. code-block:: OCaml

   let max_list lst =
     List.fold_left
       (fun mx item -> max mx item)
       0
       lst

This can be simplified further:

.. code-block:: OCaml

   let max_list lst = List.fold_left max 0 lst

Whenever you need to write code which accumulates something over a list,
you generally want to use a fold.

A common beginner's style error is to do this with an iterative helper
function:

.. code-block:: OCaml

   let max_list lst =
     let rec iter rest mx =
       match rest with
         | [] -> mx
         | h :: t -> iter t (max h mx)
     in
       iter lst 0

This is not so bad, but the iterative helper function can be replaced by
``List.fold_left`` and the entire function becomes a one-liner!
Be alert for this kind of situation --
there's no benefit to using a functional language
if you don't take advantage of what it offers.

On the other hand, sometimes you are accumulating more than one thing in an
iteration. You can still use ``List.fold_left`` in such cases by accumulating a
tuple of all the things you're accumulating, but in my experience, it's often
easier to just write an iterative helper function.

Left *vs.* right folds
......................

95% of the time or more, if you want to use a fold in OCaml,
you want to use a left fold (``List.fold_left``)
instead of a right fold (``List.fold_right``).
Left folds are tail recursive (space efficient) and are more natural
than right folds, which are not tail recursive
and thus not space efficient.

On the other hand, there are cases where right folds are the right thing to
use.  When you want to accumulate things in a list from the right going back
to the left, a right fold is usually going to be simpler than a left fold,
and you shouldn't feel bad about using one in that case.


Nested pattern matching
^^^^^^^^^^^^^^^^^^^^^^^

It's very common to want to write a pattern match inside another
pattern match.  There are two cases to consider.

#. Where the two pattern matches can be combined.  Consider this code:

   .. code-block:: OCaml

      let f (maybe_lst : int list option) : int option =
        match maybe_lst with
          | None -> None
          | Some lst ->
            begin
              match lst with
                | h :: _ -> Some h
                | [] -> None
            end

   You can merge both pattern matches as follows:

   .. code-block:: OCaml

      let f (maybe_lst : int list option) : int option =
        match maybe_lst with
          | Some (h :: _) -> Some h
          | _ -> None

   Note how much shorter and clearer the code is.
   Also note the use of the wildcard (``_``) pattern
   for "don't care" situations.

   Merging pattern matches is almost always possible if the
   inner pattern match doesn't depend on a value computed using
   information from the outer pattern match.
   Unnecessary pattern matches are bad style and will be marked down
   (but we'll try to alert you of this issue during code reviews).

#. Where the two pattern matches *can't* be combined.
   Consider this code:

   .. code-block:: OCaml

      let f (lst : int list) : (int * int) option =
        match lst with
          | h :: t ->
            begin
              match List.sort compare t with
                | h' :: _ -> Some (h, h')
                | _ -> None
            end
          | _ -> None

   The inner match is matching on the result of the ``List.sort``
   function applied to the tail of the list.
   You can't combine these pattern matches because the inner one
   depends on a value which must be computed (it's not structural).
   For very simple cases, you can use a ``when`` clause instead of
   the inner match, but often this isn't feasible.
   So you have nested ``match`` expressions.

   When you have nested ``match`` expressions, you **must** surround them
   by either ``begin``/``end`` delimiters (as we did above) or parentheses,
   which looks like this:

   .. code-block:: OCaml

      let f (lst : int list) : (int * int) option =
        match lst with
          | h :: t ->
            (match List.sort compare t with
               | h' :: _ -> Some (h, h')
               | _ -> None)
          | _ -> None

   Using parentheses looks more concise, but it's easy to forget to close
   the open parenthesis, so we prefer to use ``begin``/``end``.
   (It reads better, too.)  What you definitely do *not* want to do is this:

   .. code-block:: OCaml

      let f (lst : int list) : (int * int) option =
        match lst with
          | h :: t ->
            match List.sort compare t with
              | h' :: _ -> Some (h, h')
              | _ -> None
          | _ -> None

   If you do this, you will get strange error messages because
   OCaml will consider the last line to be part of the inner pattern match.
   Remember, **OCaml is not whitespace sensitive!**
   So don't forget the ``begin``/``end``.

New OCaml features
------------------

The ``|>`` (pipe) operator
^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``|>`` (pipe) operator is a reverse-apply operator
(analogous to a Unix pipe).
It's very convenient when you want to transform some inputs repeatedly
by applying one function after another.

Instead of writing this:

.. code-block:: OCaml

   func3 (func2 (func1 data))

you can write this:

.. code-block:: OCaml

   data |> func1 |> func2 |> func3

Aside from having fewer parentheses, it's often easier to read:
"Create ``data``, then apply ``func1``, ``func2``, and ``func3``
to it in succession."

Also, because of OCaml's auto-currying of functions, it even works
if one or more of the functions take additional arguments, just as long
as the data structure is the last argument to the function.
So we might have |eg|:

.. code-block:: OCaml

   data |> func1 arg1 |> func2 arg2a arg2b |> func3

instead of:

.. code-block:: OCaml

   func3 (func2 arg2a arg2b (func1 arg1 data))

Whether this is clearer is up to you.

When there are a *lot* of transformations, it's nice to write them on 
multiple lines:

.. code-block:: OCaml

   data
     |> transform1
     |> transform2
     |> transform3 arg
     |> transform4 arg1 arg2
     (* etc. *)

This is much more readable than the usual notation:

.. code-block:: OCaml

   transform4 arg1 arg2 (transform3 arg (transform2 (transform1 data)))

and it's also easier to extend with more transformations.


The ``@@`` (apply) operator
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The "cousin" of the ``|>`` operator is the ``@@`` (forward apply) operator.
Like ``|>``, it's never required, but sometimes it can make code a bit nicer by
removing the need for some parentheses.

.. note::

   If you know the Haskell language, you'll recognize the ``@@`` operator as
   the same thing as the ``$`` operator in Haskell.

The ``@@`` operator is used to apply a function to its argument,
so ``f @@ x`` is the same as ``f x``.  Seems pointless, right?
But consider ``f (1 + 2)``.  With ``@@`` this becomes ``f @@ 1 + 2``
and you've eliminated the need for the parentheses.  Similarly:

.. code-block:: OCaml

   func3 (func2 (func1 data))

can be written as:

.. code-block:: OCaml

   func3 @@ func2 @@ func1 data

and the parenthesis-saving is even greater!
(Note that this operator associates to the right.)

A common use for this is when signalling errors.  In the course compilers,
most errors use the ``failwith`` function:

.. code-block:: OCaml

   failwith "my error message"

This is fine, but very often, the error message needs to contain
formatted data |eg|

.. code-block:: OCaml

   if i > max_i then
     failwith (Printf.sprintf "i value: (%d) is too large" i)
   else
     ...

This can be rewritten using the ``@@`` operator as:

.. code-block:: OCaml

   if i > max_i then
     failwith @@ Printf.sprintf "i value: (%d) is too large" i
   else
     ...

and sometimes it's nice to put the ``Printf.sprintf`` on its own line:

.. code-block:: OCaml

   if i > max_i then
     failwith @@
       Printf.sprintf "i value: (%d) is too large" i
   else
     ...

In fact, this case is so common that we've written a helper function called
``failwithf`` ("``failwith`` with formatting"), so using that,
we could rewrite the above code as:

.. code-block:: OCaml

   open Support.Utils

   ...

   if i > max_i then
     failwithf "i value: (%d) is too large" i
   else
     ...


Labelled arguments
^^^^^^^^^^^^^^^^^^

OCaml has a neat feature called `labelled arguments`_ which we didn't cover in
CS 4.  Just like you'd expect, this feature means that you can label a function
argument with a name, and you have to use that name when calling the function.
What's nice is that you don't have to put labelled arguments in any particular
order; as long as the label is there, the function will know what to do about
them.

The syntax is described in detail in the link, but here's an example:

.. code-block:: OCaml

   let f ~x ~y = x - y     (* x and y are labelled arguments *)

   let _ = f ~x:10 ~y:20   (* you need the labels when calling the function *)
   let _ = f ~y:20 ~x:10   (* does the same thing *) 

Why would you use this?

In our experience, the toughest OCaml bugs to track down are in functions that
have more than one argument of the same type.  It's easy to switch the
arguments by mistake, and then you have a very hard-to-find bug.

The solution is to use labelled arguments.  This way, when you call the
function, you have to specify which argument you mean, which makes errors of
this kind far less likely.

We're not suggesting you do this for every function, but it's certainly a
trick to keep in mind, and one which we've used in much of the supporting
code.

Also, OCaml supports *optional arguments*, which are like labelled arguments
except the function gets a default value you specify if the labelled argument
is left off.  The link above describes those too.

.. _labelled arguments: https://v2.ocaml.org/manual/lablexamples.html

Design tips
-----------

Write stubs!
^^^^^^^^^^^^

When you are starting to write a function, write a "stub".
This is an incomplete function. Just put in

* the arguments

* type annotations for arguments and the return type
  (This is *very* important!  Don't skip this step!)

* and ``failwith "TODO"`` for the body.

Then fill it in later.

Here's an example of a stub:

.. code-block:: OCaml

   let halts_on_all_inputs (f : int -> int) : bool =
     failwith "TODO"

This particular function might be a bit hard to complete, though.

Writing stubs is a great way to get past "coder's block".
Once the stub is written,
you can compile it and make sure it type checks.
If it's recursive, you can usually easily fill in the base cases.
At that point, you're ready to work on the body of the function.


Use wishful thinking!
^^^^^^^^^^^^^^^^^^^^^

If a function seems too difficult/complex to write directly,
ask yourself "what function do I need
which would make it really easy to write this function?"
Then assume that *that* function exists
(|ie| write a stub for it),
and write your main function using the assumed function.
When that's done, go back and write the body of the assumed function.

This is one of *the* most useful programming tips.  It's explored at some
length in the book SICP (Structure and Interpretation of Computer Programs),
which is an amazing book (and which is the basis of CS 4).

Use the ``support`` library!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``support`` library (which is part of the CS 164 code base)
contains a number of modules with useful functions and data structures.
Often, this can save you a lot of time versus writing them yourself.
Here, we will briefly discuss the modules,
but we **strongly** encourage you to read the comments
in the ``support/*.mli`` files to find out more.
We will remind you in the assignments which functions and data structures
are particularly useful for that assignment.

The ``support`` library contains these modules:

* ``Functors``

  This module defines three module types: ``OrderedTypeS``,
  ``SetS.S`` and ``MapS.S``.  They are extensions of the standard OCaml
  module types ``OrderedType``, ``Set.S`` and ``Map.S``.
  The extensions mostly have to do with functions that convert
  instances of the internal datatypes to and from S-expressions, as well
  as a few other utility functions.  There are also new functors called
  ``SetS.Make`` and ``MapS.Make`` that create modules with the module types
  ``SetS.S`` and ``MapS.S`` respectively, given a module of module type
  ``OrderedTypeS``.

  In general, you should never be using a module of module type
  ``OrderedType``, ``Set.S``, or ``Map.S``.  Always use the extended versions
  (``OrderedTypeS``, ``SetS.S``, or ``MapS.S``).  Usually, all you have to do
  is type the extra ``S`` at the end of the name.

* ``Dgraph``

  This module contains a functor called ``Make``
  which makes a module of type ``Dgraph.S``,
  which implements a directed graph.
  The functor takes an ordered type module (module type ``OrderedTypeS``)
  as its argument.

  Note that this (like the other graph implementations in this library)
  is implemented in a purely functional way.
  This is not as efficient as an imperative graph could be,
  but it's more than sufficient for our needs
  and tends to be very well-behaved
  (as functional data structures usually are).
  
* ``Multigraph``

  This is like ``Dgraph``, but implements a directed multigraph.

* ``PriorityQueue``
  
  This module contains a very simple (some might call it "brain dead") version
  of a priority queue module called ``PriorityQueue.Simple``.
  One day we'll implement a more efficient one, but this will do for now.

* ``Ugraph``

  This is like ``Dgraph``, but implements an undirected graph.

* ``Utils``

  This contains lots of little utility functions that aren't found in the
  OCaml standard libraries.  There are string and list functions,
  functions to generate unique variable names, functions to work with
  S-expressions, and so on.  This is a module you will want to get familiar
  with.

You use the ``support`` library by ``open``\ing it and then ``open``\ing
whatever modules you need from it:

.. code-block:: OCaml

   open Support
   open Functors
   open Utils

If you only need one module, you can alternatively do this:

.. code-block:: OCaml

   open Support.Utils

Or you can ``open Support`` and then use a qualified function |eg|
``Utils.last``.


Debugging tips
--------------

Although strictly-typed functional languages like OCaml greatly reduce the
number of bugs in your programs, you will still make mistakes and have to debug
them.  Debugging functional languages can be challenging; here are some tips
we've found to be useful.

``printf``\-style debugging
^^^^^^^^^^^^^^^^^^^^^^^^^^^

``printf``-style debugging is highly effective if you do it right.  The wrong
way is to add ``printf`` statements to otherwise functional code:

.. code-block:: OCaml

   let x = ... in
   Printf.printf "x = %s\n" x;
   let y = ... in
     ...

Even though this can work, you are embedding imperative code inside
functional code, and you can get into tricky syntax issues as a result.
A better way to do it is like this:

.. code-block:: OCaml

   let x = ... in
   let _ = Printf.printf "x = %s\n" x in
   let y = ... in
     ...

This also embeds imperative code, but uses functional syntax, so there
won't be any syntax issues.


.. note::

   If the surrounding code is imperative (like a ``begin`` expression
   or the body of a ``for`` or ``while`` loop), the exact opposite criterion
   applies: favor the naked ``Printf.printf ...`` instead of the
   ``let _ = Printf.printf ...`` idiom.  However, in well-written OCaml
   code, ``while`` and ``for`` loops should be almost nonexistent.

Also, you should add ``%!`` at the end of the ``printf`` format string:

.. code-block:: OCaml

   let x = ... in
   let _ = Printf.printf "x = %s\n%!" x in
   let y = ... in
     ...

This makes OCaml flush the string as soon as the ``printf`` executes.
If you don't do that, sometimes error messages before a crash can be lost.

Finally, for debugging, consider writing your ``printf``\s this way:

.. code-block:: OCaml

       let x = ... in
   let _ = Printf.printf "DEBUG: x = %s\n%!" x in
       let y = ... in
         ...

This way, it's easy to spot these lines, which is good because you are
going to want to delete them once debugging is done.

Using the REPL
^^^^^^^^^^^^^^

"REPL" means "Read-Eval-Print-Loop" and refers to the interactive interpreter
(what you get into if you type ``ocaml`` or ``utop`` at a terminal prompt).
You might think that it's hard to use a REPL in a large, multi-file project
like the compiler assignments, but we've got you covered!

Typing ``make repl`` in any directory will bring up a REPL in which all the
modules of the program are accessible.  This allows you to interactively test
your code.  Some kinds of code are easier to test in this way than others, but
don't underestimate how useful this can be, especially when trying to track
down a tricky bug.  All you need to do is to open the relevant module:

.. code-block:: OCaml

   # open Some_Compiler_Pass_That_Isnt_Working;;

and you can play with all the functions in that module.

Insert debugging code into tricky algorithms
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some passes involve tricky algorithms.  In those cases, it's a good idea to
define a ``debug`` variable at the top of the file:

.. code-block:: OCaml

   let debug = ref false  (* change to `true` when you need debug output *)

and then put debug code into the tricky algorithm that prints out the inputs
and outputs:

.. code-block:: OCaml

   let tricky_algorithm weird_inputs =
     if !debug then
       Printf.printf "INPUT: %s\n" (string_of_weird_inputs weird_inputs);
     ... (* rest of algorithm *)

To do this, you need to be able to convert the algorithm inputs/output
to strings.  Most of the data structures you will be using can be easily
converted to S-expressions, and there is a ``print_sexp`` function in the
``Utils`` module that will print an S-expression in a readable fashion
(this is discussed below).
This is extremely useful for tracking down algorithm errors.


On S-expressions
----------------

What S-expressions are
^^^^^^^^^^^^^^^^^^^^^^

S-expressions are described in this `Wikipedia article`_.
Essentially, they are an extremely simple (perhaps the most simple) way to
represent structured data.  The "S" in "S-expression" originally meant
"symbolic"; these were originally the way to represent arbitrary data in the
Lisp programming language.  (They were eventually used to represent Lisp code
as well, but that's another story.)  Even now, S-expressions are often
associated with Lisp-like programming languages such as Scheme and Racket, but
they are far more generally useful, as we'll see.

.. _Wikipedia article: https://en.wikipedia.org/wiki/S-expression

An S-expression is essentially just a nested list of arbitrary symbols.
S-expressions can be described recursively as either

* a symbol (which can be an arbitrary string,
  but normally without internal spaces or quotes)
* or a list of S-expressions

Usually, we use parentheses to delimit a list.  Here are some sample
S-expressions:

* ``foo``
* ``(a b c)``
* ``(this is (a (nested list) of) symbols)``
* ``((foo 1) (bar 2) (baz 3))``

Basically, any structured data can be represented as an S-expression.

How we use them
^^^^^^^^^^^^^^^

We use S-expressions as both a serialization format and a visualization
tool.  "Serialization" means that we can take arbitrary OCaml datatypes and
convert them to and from S-expressions without losing any information.  For
visualization, we take some OCaml datatype we want to look at, convert it to an
S-expression, and then pretty-print the S-expression in a readable format.

Visualization is incredibly useful for debugging.  We will be using a lot of
fairly complex OCaml datatypes, and our compiler passes will have the job of
converting one datatype into another.  We would like to be able to inspect
these datatypes to make sure that we converted them correctly.  If we had to
write special string conversion functions for all our datatypes, that would be
an enormous amount of boring work.  Instead, there are OCaml libraries that will
allow us to automatically convert any datatype to an S-expression if we add
small annotations to our code.  (These libraries are the ``sexplib`` and
``ppx_sexp_conv`` libraries.)

In order to get OCaml to generate the S-expression conversion code, we 
have to add an annotation after type declarations:

.. code-block:: OCaml

   type value =
     | Bool of bool
     | Int of int
     | Function of (value -> value)
   [@@deriving sexp]   (* this is the annotation *)

The ``[@@deriving sexp]`` line is what is called a "PPX extension";
it's a kind of code-generating macro which, when interpreted by OCaml,
will proceed to generate two functions:
``sexp_of_value`` (convert a ``value`` to an S-expression)
and ``value_of_sexp`` (convert an S-expression to a value).
We tend to use the first function(s) much more than the second,
because we usually want to convert our types to S-expressions.

We will use this facility for nearly all our data structures.
Fortunately, you don't have to worry about it!
Just don't remove those annotations; they are doing real work.

All you really need to know is that for any datatype ``foo``
which has the ``[@@deriving sexp]`` annotation, (which is almost all of them)
there will be functions called ``sexp_of_foo`` and ``foo_of_sexp`` generated.
There is also a function in the ``Support.Utils`` module called ``print_sexp``
which will print out an S-expression in a readable format.
So if you need to print out the data structure,
just convert it to an S-expression with ``sexp_of_foo``
and then print it using ``print_sexp``.

.. note::

   There is much, much more that could be said about OCaml's PPX
   extension system, which is a relatively new feature of the language
   (and which wasn't discussed at all in CS 4 or CS 131).
   It's a very powerful code-generation system,
   but it also has a fairly steep learning curve.


