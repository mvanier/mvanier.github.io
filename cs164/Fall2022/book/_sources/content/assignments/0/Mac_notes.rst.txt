Notes on MacOS X
================

.. note::

   Thanks to Simon Lequar for doing the research on this topic!

If you are using a Mac OS X computer as your development machine for this
course, these notes are for you.  If not, you can skip them.
Similarly, if you have an older Mac which is running an x86-64 (Intel)
processor, you can skip these notes.

These notes are for students who are running Macs with the M1 or M2 processors
(or later versions of these).
(We will refer to these Macs as *Mx Macs* in what follows.)
These processors do not use the x86-64 instruction set;
they use the ARM64 instruction set, which is very different.
Eventually, we may allow (or even require) students to compile their code
down to ARM64 instead of (or in addition to) x86-64,
but this isn't yet the case.
Fortunately, there is a workaround which you can use now.

The only issue with using an Mx Mac is compiling and running the
assembly language code generated by the compiler.
This code is specific to the x86-64 processor and can't be compiled
natively on an Mx Mac.

`This`__ article has information on how to compile and run x86-64 assembly
language on an Mx Mac.

__  https://www.courier.com/blog/tips-and-tricks-to-setup-your-apple-m1-for-development/

Following the article (only the first step), you can create a duplicate
terminal that uses Rosetta2_, which is a translation layer that allows x86-64
applications to run on Mx hardware. From there, using the default terminal (the
not-rosetta2 one), run the ``make`` command to compile the compiler, then
switch to the new terminal and run the python test script
(``run_eval_tests.py``) there with the ``-only-asm`` argument.

.. _Rosetta2: https://support.apple.com/en-us/HT211861

Note that you should *only* run these particular tests in the Rosetta2
terminal; the rest of the tests should be run in the regular (non-Rosetta)
terminal, because they don't involve compiling assembly code.

In principle, the most manual way to use Rosetta2 is to use the non-Rosetta
terminal to compile code to assembly language, save the output to a file,
and then (in the Rosetta2 terminal), compile the file to an executable and run
and test it there.  This sequence could look like this:

.. code-block:: text

   [non-Rosetta terminal]
   $ ./compile tests/var_test_1.src > var_test_1.s
   [Rosetta terminal, same directory]
   $ gcc -c var_test_1.s
   $ gcc -c runtime.c
   $ gcc runtime.o var_test_1.o -o var_test_1
   $ ./var_test_1
   $ echo $?

If everything went well, this should print out the return value of the program
(in this case, ``42``).

.. note::

   These instructions have not been fully vetted.  If you are having problems
   with them, please let us know!


