Syllabus
========

This is a tentative syllabus for CS 164 (Compilers), Fall 2022.
Everything is subject to revision.


People
------

Instructor: Mike Vanier (mvanier@cms.caltech.edu).

There are no teaching assistants this term.  Wish me luck!

Mike's office hours are TBA.


Course description
------------------

This course covers the construction of *compilers*: programs which convert
program source code to machine code which is directly executable on modern
hardware.  The course takes an incremental approach: a series of compilers will
be built, all of which generate assembly code for x86-64 processors,  with each
compiler adding features. The final compiler will compile programs written in a
full-fledged high-level programming language to assembly language, which can
then be compiled to machine language using standard tools.

Topics covered include register allocation, conditionals, loops and dataflow
analysis, garbage collection, lexical scoping, and type checking.

This course is project-based and programming-intensive.  Students will work in
teams of two students each.
All compilers will be written in the OCaml_ programming language.


Learning objectives
-------------------

At the end of this course, you will have written a compiler from a small subset
of a typed dialect of the Scheme programming language to assembly language.
Along the way, you will learn the primary ingredients of modern compilers.


Prerequisites
-------------

The course has a hard prerequisite of CS 4 (Fundamentals of Computer
Programming), because you need to know OCaml to take this course.

Two recommended (but not required) prerequisites are:

* CS 24 (Introduction to Computing Systems), primarily because we will be using
  assembly language, and CS 24 includes an introduction to assembly language.
  However, we will describe all the assembly language instructions we need
  as we get to them.

* CS 131 (Programming Languages).  This course is useful because:

  * CS 131 also uses OCaml, so students who have taken it have
    experience writing moderately large multi-file programs in OCaml;

  * students who have taken CS 131 already know what an abstract syntax
    tree (AST) is, and what intermediate representations (IRs) are,
    which will be useful.

  Again, though, we will cover this material in this course.


Textbook
--------

The course textbook is *Essentials of Compilation* by Jeremy Siek. This is a
freely-available textbook available as a PDF. We will be following the book
quite closely. The main difference is that the book uses the Racket_
programming language to build the compilers, whereas we will use OCaml_.


Topics covered
--------------

This is a very abbreviated list of topics covered in the course,
presented in the order it will be covered.
Some additional material may be covered towards the end of the course.

* Overview of the compilation process
* Variables and scoping
* Register allocation and graph coloring algorithms
* Conditionals and type checking
* Loops and dataflow analysis
* Tuples and garbage collection
* Functions
* Lexically-scoped functions (time permitting)


Grading scheme
--------------

The course is on grades.  There are no exams.

* There are 6 homeworks, each given a grade from 0-100.
  They are collectively worth 75% of the course grade.

* 20% for participation in weekly code reviews.

* 5% for participation in class.

Letter grades are assigned as follows:

.. list-table::
   :widths: 25 25
   :header-rows: 1

   * - Numerical grade (out of 100%)
     - Letter grade
   * - 95-100%
     - A+
   * - 90-95%
     - A
   * - 85-90%
     - A-
   * - 80-85%
     - B+
   * - 75-80%
     - B
   * - 70-75%
     - B-
   * - 68-70%
     - C+
   * - 65-68%
     - C
   * - 60-65%
     - C-
   * - 55-60%
     - D
   * - < 55%
     - F


Course software
---------------

Setting up the course software is described in
:doc:`assignment 0 </content/assignments/0/Assignment0>`.


Collaboration policies
----------------------

Collaboration policies are given in :doc:`Collaboration_policies`.


Diversity and inclusion
-----------------------

You all belong in this class and as such should expect to be treated with
respect by your classmates and by the course staff. It is our goal, as the
course staff, to provide an interesting and challenging environment that is
conducive to learning. If any incident occurs that challenges this commitment
to a supportive and inclusive environment, please let the instructor know so
the issue can be addressed.

Accessibility
^^^^^^^^^^^^^

We consider accessibility to be an extremely important issue.  If some aspect
of the course is making it more difficult for you to learn the material, we
want to hear about it!  We want this course to be an enjoyable experience for
you, not a burden.

Student Wellness
^^^^^^^^^^^^^^^^

It is very important to us that you take care of your mental wellness
throughout the course. Everyone on the course staff is available to chat, and
you can always attend office hours for a non-academic conversation if
necessary.

Students with documented disabilities
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Students who may need an academic accommodation based on the impact of a
disability must initiate the request with Caltech Accessibility Services for
Students (CASS).  Professional staff will evaluate the request with required
documentation, recommend reasonable accommodations, and prepare an
Accommodation Letter for faculty dated in the current quarter in which the
request is being made. Students should contact CASS as soon as possible, since
timely notice is needed to coordinate accommodations. http://cass.caltech.edu/.

Undergraduate students should contact Dr. Lesley Nye, associate Dean of
Undergraduate Students and graduate students should contact R. Darrell
Peterson, Associate Dean of Graduate Studies.

